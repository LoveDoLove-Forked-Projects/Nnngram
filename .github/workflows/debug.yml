name: Build CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Prepare Java 16
        uses: actions/setup-java@v1
        with:
          java-version: 16
          java-package: jdk
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        
      - name: Native Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/.cxx
            TMessagesProj/build/intermediates/cmake
            TMessagesProj/build/intermediates/stripped_native_libs
            TMessagesProj/build/intermediates/cxx
            TMessagesProj/build/intermediates/merged_jni_libs
            TMessagesProj/build/intermediates/merged_native_libs
            ~/.cache/ccache
            ~/.ccache
          key: jni-${{ hashFiles('TMessagesProj/jni/**') }}
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Prepare Environment
        run: |
          sudo apt-get install bison gcc make curl ninja-build ccache -y
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

      - name: Debug Build
        run: |
          echo -e "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}\nRELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}\nRELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}">>local.properties
          cat > service_account_credentials.json << EOF
          ${{ secrets.ANDROID_PUBLISHER_CREDENTIALS }}"
          EOF
          ccache -zp
          ccache -o max_size=10G
          ccache -o hash_dir=false
          ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'
          ./gradlew TMessagesProj:assembleRelease
          ccache -s
          echo "APK_FILE=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_ARMV7=$(find TMessagesProj/build/outputs/apk -name '*armeabi*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_X86=$(find TMessagesProj/build/outputs/apk -name '*x86.apk')" >> $GITHUB_ENV
          echo "APK_FILE_X64=$(find TMessagesProj/build/outputs/apk -name '*x86_64*.apk')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v2
        name: Upload apk
        with:
          name: Nullgram
          path: TMessagesProj/build/outputs/apk/release/*
      - uses: actions/upload-artifact@v2
        name: Upload apk (arm64-v8a)
        with:
          name: Nullgram-arm64-v8a
          path: ${{ env.APK_FILE }}
      - uses: actions/upload-artifact@v2
        name: Upload apk (armeabi-v7a)
        with:
          name: Nullgram-armeabi-v7a
          path: ${{ env.APK_FILE_ARMV7 }}
      - uses: actions/upload-artifact@v2
        name: Upload apk (x86_64)
        with:
          name: Nullgram-x86_64
          path: ${{ env.APK_FILE_X64 }}
      - uses: actions/upload-artifact@v2
        name: Upload apk (x86)
        with:
          name: Nullgram-x86
          path: ${{ env.APK_FILE_X86 }}

          
  upload:
    name: Upload Release
    if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - telegram-bot-api
    steps:
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Release
        run: |
          chmod +x telegram-bot-api-binary
          ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
          curl http://127.0.0.1:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
           -X POST \
           -F chat_id="${{ secrets.TELEGRAM_TO }}" \
           -F text="==== ${{ github.event.inputs.tag }} ====" \
           --silent --show-error --fail >/dev/null
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          function upload() {
            for apk in $@; do
              echo ">> Uploading $apk"
              curl http://127.0.0.1:8081/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument \
                -X POST \
                -F chat_id="${{ secrets.TELEGRAM_TO }}" \
                -F document="@$apk" \
                --silent --show-error --fail >/dev/null
              sleep 1
            done
          }
          upload apks/*.apk
          pkill telegram-bot

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v2
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary
