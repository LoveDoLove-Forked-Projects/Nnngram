Only in TMessagesProj: .cxx
Only in TMessagesProj: .gradle
Only in TMessagesProj/build: generated
Only in TMessagesProj/build/intermediates: aapt_proguard_file
Only in TMessagesProj/build/intermediates: aar_metadata_check
Only in TMessagesProj/build/intermediates: annotation_processor_list
Only in TMessagesProj/build/intermediates: apk_ide_redirect_file
Only in TMessagesProj/build/intermediates: app_metadata
Only in TMessagesProj/build/intermediates: asm_instrumented_project_classes
Only in TMessagesProj/build/intermediates: asm_instrumented_project_jars
Only in TMessagesProj/build/intermediates: assets
Only in TMessagesProj/build/intermediates: binary_art_profile
Only in TMessagesProj/build/intermediates: binary_art_profile_metadata
Only in TMessagesProj/build/intermediates: bundle_manifest
Only in TMessagesProj/build/intermediates: cmake
Only in TMessagesProj/build/intermediates: compatible_screen_manifest
Only in TMessagesProj/build/intermediates: compile_and_runtime_not_namespaced_r_class_jar
Only in TMessagesProj/build/intermediates: compressed_assets
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_133e2547.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_133e2547.log
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_133e2547_key.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_2f3y386l.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_2f3y386l.log
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_2f3y386l_key.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_376j4h6f.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_376j4h6f.log
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_376j4h6f_key.json
Only in ../Tele/TMessagesProj/build/intermediates/cxx: abi_configuration_3c5sw373.json
Only in ../Tele/TMessagesProj/build/intermediates/cxx: abi_configuration_3c5sw373.log
Only in ../Tele/TMessagesProj/build/intermediates/cxx: abi_configuration_3c5sw373_key.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_4n3q2d16.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_4n3q2d16.log
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_4n3q2d16_key.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_w2f4i6z3.json
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_w2f4i6z3.log
Only in TMessagesProj/build/intermediates/cxx: abi_configuration_w2f4i6z3_key.json
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1048_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1128_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1199_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1219_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1255_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_129_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1389_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1439_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1468_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1507_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1621_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1660_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1704_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1763_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1839_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1874_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_1919_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2007_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2029_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2113_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2349_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2390_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2415_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2416_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_259_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2623_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2625_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2665_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2676_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_269_timing.txt
Only in ../Tele/TMessagesProj/build/intermediates/cxx: create_cxx_tasks_274_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2772_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2886_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2932_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2939_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_2965_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3126_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3156_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_32_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3267_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3338_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3350_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3539_timing.txt
Only in ../Tele/TMessagesProj/build/intermediates/cxx: create_cxx_tasks_355_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3575_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3796_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_3891_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_402_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_408_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_4113_timing.txt
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/build/intermediates/cxx/create_cxx_tasks_415_timing.txt ../Tele/TMessagesProj/build/intermediates/cxx/create_cxx_tasks_415_timing.txt
5,6c5,6
<       create-cmake-model 188ms
<     create-module-model completed in 191ms
---
>       create-cmake-model 166ms
>     create-module-model completed in 168ms
8,9c8,9
<       create-cmake-model 165ms
<     create-module-model completed in 166ms
---
>       create-cmake-model 178ms
>     create-module-model completed in 179ms
11,12c11,12
<       create-cmake-model 173ms
<     create-module-model completed in 175ms
---
>       create-cmake-model 163ms
>     create-module-model completed in 165ms
14,15c14,15
<       create-cmake-model 173ms
<     create-module-model completed in 174ms
---
>       create-cmake-model 165ms
>     create-module-model completed in 167ms
17c17
<       create-cmake-model 162ms
---
>       create-cmake-model 163ms
19,35c19,20
<     create-module-model
<       create-cmake-model 183ms
<     create-module-model completed in 187ms
<     create-module-model
<       create-cmake-model 168ms
<     create-module-model completed in 171ms
<     create-module-model
<       create-cmake-model 174ms
<     create-module-model completed in 176ms
<     create-module-model
<       create-cmake-model 174ms
<     create-module-model completed in 176ms
<     create-module-model
<       create-cmake-model 170ms
<     create-module-model completed in 172ms
<   create-initial-cxx-model completed in 1836ms
< create_cxx_tasks completed in 1843ms
---
>   create-initial-cxx-model completed in 884ms
> create_cxx_tasks completed in 886ms
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_4194_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_438_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_4494_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_4508_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_462_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_468_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_4891_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_493_timing.txt
Only in ../Tele/TMessagesProj/build/intermediates/cxx: create_cxx_tasks_5359_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_5846_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_625_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_6608_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_669_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_692_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_6993_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_719_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_843_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_897_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_917_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_937_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_939_timing.txt
Only in TMessagesProj/build/intermediates/cxx: create_cxx_tasks_962_timing.txt
Only in TMessagesProj/build/intermediates/cxx: Debug
Only in TMessagesProj/build/intermediates/cxx: ndk_locator_record_153m1n29.json
Only in TMessagesProj/build/intermediates/cxx: ndk_locator_record_153m1n29.log
Only in TMessagesProj/build/intermediates/cxx: ndk_locator_record_153m1n29_key.json
Only in ../Tele/TMessagesProj/build/intermediates/cxx: ndk_locator_record_1t581u51.json
Only in ../Tele/TMessagesProj/build/intermediates/cxx: ndk_locator_record_1t581u51.log
Only in ../Tele/TMessagesProj/build/intermediates/cxx: ndk_locator_record_1t581u51_key.json
Only in TMessagesProj/build/intermediates/cxx: ndk_locator_record_3y6x602n.json
Only in TMessagesProj/build/intermediates/cxx: ndk_locator_record_3y6x602n.log
Only in TMessagesProj/build/intermediates/cxx: ndk_locator_record_3y6x602n_key.json
Only in ../Tele/TMessagesProj/build/intermediates/cxx: ndk_locator_record_5c1x3mu1.json
Only in ../Tele/TMessagesProj/build/intermediates/cxx: ndk_locator_record_5c1x3mu1.log
Only in ../Tele/TMessagesProj/build/intermediates/cxx: ndk_locator_record_5c1x3mu1_key.json
Only in TMessagesProj/build/intermediates/cxx: RelWithDebInfo
Only in TMessagesProj/build/intermediates: data_binding_layout_info_type_merge
Only in TMessagesProj/build/intermediates: default_proguard_files
Only in TMessagesProj/build/intermediates: desugar_graph
Only in TMessagesProj/build/intermediates: desugar_lib_dex
Only in TMessagesProj/build/intermediates: desugar_lib_project_keep_rules
Only in TMessagesProj/build/intermediates: dex
Only in TMessagesProj/build/intermediates: dex_archive_input_jar_hashes
Only in TMessagesProj/build/intermediates: dex_number_of_buckets_file
Only in TMessagesProj/build/intermediates: duplicate_classes_check
Only in TMessagesProj/build/intermediates: external_file_lib_dex_archives
Only in TMessagesProj/build/intermediates: external_libs_dex_archive
Only in TMessagesProj/build/intermediates: external_libs_dex_archive_with_artifact_transforms
Only in TMessagesProj/build/intermediates: generated_proguard_file
Only in TMessagesProj/build/intermediates: incremental
Only in TMessagesProj/build/intermediates: javac
Only in TMessagesProj/build/intermediates: linked_res_for_bundle
Only in TMessagesProj/build/intermediates: manifest_merge_blame_file
Only in TMessagesProj/build/intermediates: merged_art_profile
Only in TMessagesProj/build/intermediates: merged_java_res
Only in TMessagesProj/build/intermediates: merged_jni_libs
Only in TMessagesProj/build/intermediates: merged_manifest
Only in TMessagesProj/build/intermediates: merged_manifests
Only in TMessagesProj/build/intermediates: merged_native_libs
Only in TMessagesProj/build/intermediates: merged_res
Only in TMessagesProj/build/intermediates: merged_res_blame_folder
Only in TMessagesProj/build/intermediates: merged_shaders
Only in TMessagesProj/build/intermediates: merged-not-compiled-resources
Only in TMessagesProj/build/intermediates: metadata_application_id
Only in TMessagesProj/build/intermediates: mixed_scope_dex_archive
Only in TMessagesProj/build/intermediates: navigation_json
Only in TMessagesProj/build/intermediates: optimized_processed_res
Only in TMessagesProj/build/intermediates: packaged_manifests
Only in TMessagesProj/build/intermediates: processed_res
Only in TMessagesProj/build/intermediates: project_dex_archive
Only in TMessagesProj/build/intermediates: runtime_symbol_list
Only in TMessagesProj/build/intermediates: shrunk_java_res
Only in TMessagesProj/build/intermediates: shrunk_processed_res
Only in TMessagesProj/build/intermediates: signing_config_versions
Only in TMessagesProj/build/intermediates: source_set_path_map
Only in TMessagesProj/build/intermediates: stripped_native_libs
Only in TMessagesProj/build/intermediates: sub_project_dex_archive
Only in TMessagesProj/build/intermediates: symbol_list_with_package_name
Only in TMessagesProj/build/intermediates: validate_signing_config
Only in TMessagesProj/build: kotlin
Only in TMessagesProj/build: kotlinToolingMetadata
Only in TMessagesProj/build: outputs
Only in TMessagesProj/build: snapshot
Only in TMessagesProj/build: tmp
Only in ../Tele/TMessagesProj: build.gradle
Only in TMessagesProj: build.gradle.kts
Only in ../Tele/TMessagesProj/config: debug
Only in ../Tele/TMessagesProj/config: release
Binary files TMessagesProj/config/release.keystore and ../Tele/TMessagesProj/config/release.keystore differ
Only in TMessagesProj: google-services.json
Only in TMessagesProj: icons
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/third_party/googletest/test/gtest_xml_outfiles_test.py ../Tele/TMessagesProj/jni/boringssl/third_party/googletest/test/gtest_xml_outfiles_test.py
35,36c35
< from xml.dom import minidom
< 
---
> from xml.dom import minidom, Node
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/third_party/googletest/test/gtest_xml_output_unittest.py ../Tele/TMessagesProj/jni/boringssl/third_party/googletest/test/gtest_xml_output_unittest.py
39c39
< from xml.dom import minidom
---
> from xml.dom import minidom, Node
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/third_party/googletest/test/gtest_xml_test_utils.py ../Tele/TMessagesProj/jni/boringssl/third_party/googletest/test/gtest_xml_test_utils.py
33,34c33
< from xml.dom import Node
< 
---
> from xml.dom import minidom, Node
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/third_party/googletest/xcode/Scripts/versiongenerate.py ../Tele/TMessagesProj/jni/boringssl/third_party/googletest/xcode/Scripts/versiongenerate.py
52d51
< import re
53a53
> import re
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/util/bot/extract.py ../Tele/TMessagesProj/jni/boringssl/util/bot/extract.py
21a22
> import tarfile
24d24
< import tarfile
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/util/bot/go/bootstrap.py ../Tele/TMessagesProj/jni/boringssl/util/bot/go/bootstrap.py
135,154c135
<       def is_within_directory(directory, target):
<           
<           abs_directory = os.path.abspath(directory)
<           abs_target = os.path.abspath(target)
<       
<           prefix = os.path.commonprefix([abs_directory, abs_target])
<           
<           return prefix == abs_directory
<       
<       def safe_extract(tar, path=".", members=None, *, numeric_owner=False):
<       
<           for member in tar.getmembers():
<               member_path = os.path.join(path, member.name)
<               if not is_within_directory(path, member_path):
<                   raise Exception("Attempted Path Traversal in Tar File")
<       
<           tar.extractall(path, members, numeric_owner=numeric_owner) 
<           
<       
<       safe_extract(f, toolset_root)
---
>       f.extractall(toolset_root)
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/util/bot/update_clang.py ../Tele/TMessagesProj/jni/boringssl/util/bot/update_clang.py
9a10
> import subprocess
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/util/bot/vs_env.py ../Tele/TMessagesProj/jni/boringssl/util/bot/vs_env.py
15,16d14
< # vs_toolchain adds gyp to sys.path.
< import gyp.MSVSVersion
20a19,20
> # vs_toolchain adds gyp to sys.path.
> import gyp.MSVSVersion
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/util/bot/vs_toolchain.py ../Tele/TMessagesProj/jni/boringssl/util/bot/vs_toolchain.py
7a8
> import shutil
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/boringssl/util/generate_build_files.py ../Tele/TMessagesProj/jni/boringssl/util/generate_build_files.py
20a21,22
> import json
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/CMakeLists.txt ../Tele/TMessagesProj/jni/CMakeLists.txt
2,9d1
< project(tmessages)
< 
< find_program(CCACHE ccache)
< 
< if (CCACHE)
<     set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})
<     set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE})
< endif ()
411a404,433
> #breakpad
> add_library(breakpad STATIC
>         third_party/breakpad/src/client/linux/crash_generation/crash_generation_client.cc
>         third_party/breakpad/src/client/linux/handler/exception_handler.cc
>         third_party/breakpad/src/client/linux/handler/minidump_descriptor.cc
>         third_party/breakpad/src/client/linux/log/log.cc
>         third_party/breakpad/src/client/linux/dump_writer_common/thread_info.cc
>         third_party/breakpad/src/client/linux/dump_writer_common/seccomp_unwinder.cc
>         third_party/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
>         third_party/breakpad/src/client/linux/microdump_writer/microdump_writer.cc
>         third_party/breakpad/src/client/linux/minidump_writer/linux_dumper.cc
>         third_party/breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.cc
>         third_party/breakpad/src/client/linux/minidump_writer/minidump_writer.cc
>         third_party/breakpad/src/client/minidump_file_writer.cc
>         third_party/breakpad/src/common/android/breakpad_getcontext.S
>         third_party/breakpad/src/common/convert_UTF.c
>         third_party/breakpad/src/common/md5.cc
>         third_party/breakpad/src/common/string_conversion.cc
>         third_party/breakpad/src/common/linux/elfutils.cc
>         third_party/breakpad/src/common/linux/file_id.cc
>         third_party/breakpad/src/common/linux/guid_creator.cc
>         third_party/breakpad/src/common/linux/linux_libc_support.cc
>         third_party/breakpad/src/common/linux/memory_mapped_file.cc
>         third_party/breakpad/src/common/linux/safe_readlink.cc)
> set_target_properties(breakpad PROPERTIES ANDROID_ARM_MODE arm)
> set_property(SOURCE third_party/breakpad/src/common/android/breakpad_getcontext.S PROPERTY LANGUAGE C)
> target_include_directories(breakpad PUBLIC
>         third_party/breakpad/src/common/android/include
>         third_party/breakpad/src)
> 
416,417d437
< include(${CMAKE_HOME_DIRECTORY}/integrity/CMakeLists.txt)
< 
721c741
<         checkSignature)
---
>         breakpad)
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/gifvideo.cpp ../Tele/TMessagesProj/jni/gifvideo.cpp
1215,1216c1215
<                 sws_scale(info->sws_ctx, info->frame->data, info->frame->linesize, 0,
<                           info->frame->height, dst_data, info->dst_linesize);
---
>                 sws_scale(info->sws_ctx, info->frame->data, info->frame->linesize, 0, info->frame->height, dst_data, info->dst_linesize);
Only in TMessagesProj/jni: integrity
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/jni.c ../Tele/TMessagesProj/jni/jni.c
12,15d11
< #include "v2sign.h"
< #include "log.h"
< #include <errno.h>
< 
29,32d24
< 
<     if (!checkSignature(env)) {
<         return JNI_ERR;
<     }
Only in TMessagesProj/jni: log.h
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/tgnet/ConnectionsManager.cpp ../Tele/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
152a153
>         default:
155,164d155
<         case 5:
<             static ConnectionsManager instance5(5);
<             return instance5;
<         case 6:
<             static ConnectionsManager instance6(6);
<             return instance6;
<         case 7:
<         default:
<            static ConnectionsManager instance7(7);
<            return instance7;
3594,3599c3585
<             if (proxyCheckInfo->address != "ping-test")
<                 connection->setOverrideProxy(proxyCheckInfo->address,
<                                              proxyCheckInfo->port,
<                                              proxyCheckInfo->username,
<                                              proxyCheckInfo->password,
<                                              proxyCheckInfo->secret);
---
>             connection->setOverrideProxy(proxyCheckInfo->address, proxyCheckInfo->port, proxyCheckInfo->username, proxyCheckInfo->password, proxyCheckInfo->secret);
3604,3614c3590
<             proxyCheckInfo->requestToken = sendRequest(request,
<                                                        nullptr,
<                                                        nullptr,
<                                                        RequestFlagEnableUnauthorized |
<                                                        RequestFlagWithoutLogin,
<                                                        proxyCheckInfo->address != "ping-test"
<                                                        ? DEFAULT_DATACENTER_ID
<                                                        : proxyCheckInfo->port,
<                                                        connectionType,
<                                                        true,
<                                                        0);
---
>             proxyCheckInfo->requestToken = sendRequest(request, nullptr, nullptr, RequestFlagEnableUnauthorized | RequestFlagWithoutLogin, DEFAULT_DATACENTER_ID, connectionType, true, 0);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/tgnet/ConnectionsManager.h ../Tele/TMessagesProj/jni/tgnet/ConnectionsManager.h
75,82c75
<     int64_t checkProxy(std::string address,
<                        uint16_t port,
<                        std::string username,
<                        std::string password,
<                        std::string secret,
<                        onRequestTimeFunc requestTimeFunc,
<                        jobject ptr1);
<   void moveToDatacenter(uint32_t datacenterId);
---
>     int64_t checkProxy(std::string address, uint16_t port, std::string username, std::string password, std::string secret, onRequestTimeFunc requestTimeFunc, jobject ptr1);
105a99
>     void moveToDatacenter(uint32_t datacenterId);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/tgnet/Defines.h ../Tele/TMessagesProj/jni/tgnet/Defines.h
30c30
< #define MAX_ACCOUNT_COUNT 8
---
> #define MAX_ACCOUNT_COUNT 5
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/tgnet/FileLog.cpp ../Tele/TMessagesProj/jni/tgnet/FileLog.cpp
22c22
< bool LOGS_ENABLED = true;
---
> bool LOGS_ENABLED = false;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/TgNetWrapper.cpp ../Tele/TMessagesProj/jni/TgNetWrapper.cpp
161,166c161
< void applyDatacenterAddress(JNIEnv *env,
<                             jclass c,
<                             jint instanceNum,
<                             jint datacenterId,
<                             jstring ipAddress,
<                             jint port) {
---
> void applyDatacenterAddress(JNIEnv *env, jclass c, jint instanceNum, jint datacenterId, jstring ipAddress, jint port) {
169,172c164
<     ConnectionsManager::getInstance(instanceNum).applyDatacenterAddress((uint32_t) datacenterId,
<                                                                         std::string(
<                                                                                 valueStr),
<                                                                         (uint32_t) port);
---
>     ConnectionsManager::getInstance(instanceNum).applyDatacenterAddress((uint32_t) datacenterId, std::string(valueStr), (uint32_t) port);
179,191c171
< void
< moveToDatacenter(JNIEnv *env, jclass c, jint instanceNum, jint datacenterId) {
<     ConnectionsManager::getInstance(instanceNum).moveToDatacenter((uint32_t) datacenterId);
< }
< 
< void setProxySettings(JNIEnv *env,
<                       jclass c,
<                       jint instanceNum,
<                       jstring address,
<                       jint port,
<                       jstring username,
<                       jstring password,
<                       jstring secret) {
---
> void setProxySettings(JNIEnv *env, jclass c, jint instanceNum, jstring address, jint port, jstring username, jstring password, jstring secret) {
197,201c177
<     ConnectionsManager::getInstance(instanceNum).setProxySettings(addressStr,
<                                                                   (uint16_t) port,
<                                                                   usernameStr,
<                                                                   passwordStr,
<                                                                   secretStr);
---
>     ConnectionsManager::getInstance(instanceNum).setProxySettings(addressStr, (uint16_t) port, usernameStr, passwordStr, secretStr);
344,346c320
<         jniEnv[instanceNum]->CallStaticVoidMethod(jclass_ConnectionsManager,
<                                                   jclass_ConnectionsManager_onProxyError,
<                                                   instanceNum);
---
>         jniEnv[instanceNum]->CallStaticVoidMethod(jclass_ConnectionsManager, jclass_ConnectionsManager_onProxyError);
466,467c440
<         {"native_getCurrentDatacenterId", "(I)I",
<          (void *) getCurrentDatacenterId},
---
>         {"native_getCurrentDatacenterId", "(I)I", (void *) getCurrentDatacenterId},
470,472c443
<         {"native_sendRequest",
<          "(IJLorg/telegram/tgnet/RequestDelegateInternal;Lorg/telegram/tgnet/QuickAckDelegate;Lorg/telegram/tgnet/WriteToSocketDelegate;IIIZI)V",
<          (void *) sendRequest},
---
>         {"native_sendRequest", "(IJLorg/telegram/tgnet/RequestDelegateInternal;Lorg/telegram/tgnet/QuickAckDelegate;Lorg/telegram/tgnet/WriteToSocketDelegate;IIIZI)V", (void *) sendRequest},
475,476c446
<         {"native_cancelRequestsForGuid", "(II)V",
<          (void *) cancelRequestsForGuid},
---
>         {"native_cancelRequestsForGuid", "(II)V", (void *) cancelRequestsForGuid},
478,483c448,449
<         {"native_applyDatacenterAddress", "(IILjava/lang/String;I)V",
<          (void *) applyDatacenterAddress},
<         {"native_moveToDatacenter", "(II)V", (void *) moveToDatacenter},
<         {"native_setProxySettings",
<          "(ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
<          (void *) setProxySettings},
---
>         {"native_applyDatacenterAddress", "(IILjava/lang/String;I)V", (void *) applyDatacenterAddress},
>         {"native_setProxySettings", "(ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void *) setProxySettings},
489,490c455
<         {"native_setSystemLangCode", "(ILjava/lang/String;)V",
<          (void *) setSystemLangCode},
---
>         {"native_setSystemLangCode", "(ILjava/lang/String;)V", (void *) setSystemLangCode},
611,614c576
<     jclass_ConnectionsManager_onProxyError = env->GetStaticMethodID(
<             jclass_ConnectionsManager,
<             "onProxyError",
<             "(I)V");
---
>     jclass_ConnectionsManager_onProxyError = env->GetStaticMethodID(jclass_ConnectionsManager, "onProxyError", "()V");
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/jni/utilities.cpp ../Tele/TMessagesProj/jni/utilities.cpp
7a8,9
> #include "breakpad/src/client/linux/handler/exception_handler.h"
> #include "breakpad/src/client/linux/handler/minidump_descriptor.h"
33a36,55
> }
> 
> bool dumpCallback(const google_breakpad::MinidumpDescriptor &descriptor,
>                   void *context,
>                   bool succeeded) {
> 
>     __android_log_print(ANDROID_LOG_DEBUG, "tmessages",
>                         "Wrote breakpad minidump at %s succeeded=%d\n", descriptor.path(),
>                         succeeded);
>     return false;
> }
> 
> extern "C"
> JNIEXPORT void JNICALL
> Java_org_telegram_messenger_Utilities_setupNativeCrashesListener(JNIEnv *env, jclass clazz,
>                                                                  jstring path) {
>     const char *dumpPath = (char *) env->GetStringUTFChars(path, NULL);
>     google_breakpad::MinidumpDescriptor descriptor(dumpPath);
>     new google_breakpad::ExceptionHandler(descriptor, NULL, dumpCallback, NULL, true, -1);
>     env->ReleaseStringUTFChars(path, dumpPath);
Only in TMessagesProj: proguard-dic.txt
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/proguard-rules.pro ../Tele/TMessagesProj/proguard-rules.pro
8a9,19
> -keep class org.telegram.messenger.* { *; }
> -keep class org.telegram.messenger.camera.* { *; }
> -keep class org.telegram.messenger.secretmedia.* { *; }
> -keep class org.telegram.messenger.support.* { *; }
> -keep class org.telegram.messenger.support.* { *; }
> -keep class org.telegram.messenger.time.* { *; }
> -keep class org.telegram.messenger.video.* { *; }
> -keep class org.telegram.messenger.voip.* { *; }
> -keep class org.telegram.SQLite.** { *; }
> -keep class org.telegram.tgnet.ConnectionsManager { *; }
> -keep class org.telegram.tgnet.NativeByteBuffer { *; }
17d27
< -keep class com.google.android.exoplayer2.decoder.SimpleOutputBuffer { *; }
20,30d29
< -keep public class * extends java.lang.Exception
< 
< -dontwarn org.bouncycastle.jsse.*
< -dontwarn org.bouncycastle.jsse.provider.BouncyCastleJsseProvider
< -dontwarn org.conscrypt.*
< -dontwarn org.openjsse.javax.net.ssl.SSLParameters
< -dontwarn org.openjsse.javax.net.ssl.SSLSocket
< -dontwarn org.openjsse.net.ssl.OpenJSSE
< -dontwarn org.slf4j.impl.StaticLoggerBinder
< 
< -keepnames class org.telegram.tgnet.TLRPC$TL_* {}
97,182c96,107
< -keepclassmembernames class com.microsoft.appcenter.AppCenter {
<     private com.microsoft.appcenter.channel.Channel mChannel;
<     private android.os.Handler mHandler;
< }
< -keepclassmembers class * implements com.microsoft.appcenter.AppCenterService {
<     public static ** getInstance();
< }
< 
< -keep class org.telegram.messenger.voip.* { *; }
< -keep class org.telegram.messenger.AnimatedFileDrawableStream { <methods>; }
< -keep class org.telegram.SQLite.SQLiteException { <methods>; }
< -keep class org.telegram.tgnet.ConnectionsManager { <methods>; }
< -keep class org.telegram.tgnet.NativeByteBuffer { <methods>; }
< -keepnames class org.telegram.tgnet.TLRPC$TL_* {}
< -keepclassmembernames class org.telegram.ui.* { <fields>; }
< -keepclassmembernames class org.telegram.ui.Cells.* { <fields>; }
< -keepclassmembernames class org.telegram.ui.Components.* { <fields>; }
< -keep class org.telegram.ui.Components.RLottieDrawable$LottieMetadata { <fields>; }
< -keep,allowshrinking,allowobfuscation class org.telegram.ui.Components.GroupCreateSpan {
<     public void updateColors();
<  }
<  -keep,allowshrinking,allowobfuscation class org.telegram.ui.Components.Premium.GLIcon.ObjLoader {
<      public <init>();
<   }
< -keepclassmembernames class top.qwq2333.nullgram.activity.DatacenterActivity$DatacenterCell { <fields>; }
< -keepclassmembernames class top.qwq2333.nullgram.activity.DatacenterActivity$DatacenterHeaderCell { <fields>; }
< -keepclassmembernames class top.qwq2333.nullgram.activity.MessageDetailsActivity$TextDetailSimpleCell { <fields>; }
< -keepclassmembernames class top.qwq2333.nullgram.activity.PasscodeSettingActivity$AccountCell {
< <fields>; }
< -keepclassmembernames class top.qwq2333.nullgram.activityChatSettingsActivity$StickerSizeCell { <fields>; }
< 
< -keepclassmembernames class androidx.core.widget.NestedScrollView {
<     private android.widget.OverScroller mScroller;
<     private void abortAnimatedScroll();
< }
< 
< -keepclasseswithmembernames,includedescriptorclasses class * {
<     native <methods>;
< }
< -keepclassmembers class * {
<     @android.webkit.JavascriptInterface <methods>;
< }
< 
< -assumenosideeffects class android.util.Log {
<     public static *** v(...);
<     public static *** d(...);
< }
< 
< 
< # Keep `Companion` object fields of serializable classes.
< # This avoids serializer lookup through `getDeclaredClasses` as done for named companion objects.
< -if @kotlinx.serialization.Serializable class **
< -keepclassmembers class <1> {
<    static <1>$Companion Companion;
< }
< 
< # Keep `serializer()` on companion objects (both default and named) of serializable classes.
< -if @kotlinx.serialization.Serializable class ** {
<    static **$* *;
< }
< -keepclassmembers class <2>$<3> {
<    kotlinx.serialization.KSerializer serializer(...);
< }
< 
< # Keep `INSTANCE.serializer()` of serializable objects.
< -if @kotlinx.serialization.Serializable class ** {
<    public static ** INSTANCE;
< }
< -keepclassmembers class <1> {
<    public static <1> INSTANCE;
<    kotlinx.serialization.KSerializer serializer(...);
< }
< 
< # @Serializable and @Polymorphic are used at runtime for polymorphic serialization.
< -keepattributes RuntimeVisibleAnnotations,AnnotationDefault
< 
< -dontwarn org.jetbrains.annotations.NotNull
< -dontwarn org.jetbrains.annotations.Nullable
< 
< -repackageclasses
< -allowaccessmodification
< -overloadaggressively
< -keepattributes SourceDir,SourceFile,LineNumberTable,LocalVariableTable
< -obfuscationdictionary          proguard-dic.txt
< -classobfuscationdictionary     proguard-dic.txt
< -packageobfuscationdictionary   proguard-dic.txt
---
> # Huawei Services
> -keep class com.huawei.hianalytics.**{ *; }
> -keep class com.huawei.updatesdk.**{ *; }
> -keep class com.huawei.hms.**{ *; }
> 
> # Don't warn about checkerframework and Kotlin annotations
> -dontwarn org.checkerframework.**
> -dontwarn javax.annotation.**
> 
> # Use -keep to explicitly keep any other classes shrinking would remove
> -dontoptimize
> -dontobfuscate
\ No newline at end of file
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/AndroidManifest.xml ../Tele/TMessagesProj/src/main/AndroidManifest.xml
21,24d20
<     <uses-feature android:name="android.hardware.location.gps" android:required="false" />
<     <uses-feature android:name="android.hardware.location.network" android:required="false" />
<     <uses-feature android:name="android.hardware.location" android:required="false" />
<     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
36,40c32
<     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
<     <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
<     <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
<     <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
<     <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
---
>     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
59c51
<     <uses-permission android:name="android.permission.BLUETOOTH" android:maxSdkVersion="30" />
---
>     <uses-permission android:name="android.permission.BLUETOOTH" />
63d54
<     <uses-permission android:name="android.permission.UPDATE_PACKAGES_WITHOUT_USER_ACTION" />
83c74
<     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="29" />
---
>     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" tools:node="replace" />
87,91d77
<     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<     <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>
<     <uses-permission android:name="android.permission.CALL_PHONE" />
<     <uses-permission android:name="android.permission.READ_CALL_LOG" />
106,107d91
<         android:icon="@mipmap/ic_launcher_icon"
<         android:roundIcon="@mipmap/ic_launcher_icon"
109d92
<         android:label="@string/AppName"
135c117
<             android:name="org.telegram.messenger.MainIcon"
---
>             android:name="org.telegram.messenger.VintageIcon"
137,138c119,120
<             android:icon="@mipmap/ic_launcher_mainicon"
<             android:roundIcon="@mipmap/ic_launcher_mainicon"
---
>             android:icon="@mipmap/icon_6_launcher"
>             android:roundIcon="@mipmap/icon_6_launcher_round"
152c133
<             android:name="org.telegram.messenger.ICON1"
---
>             android:name="org.telegram.messenger.AquaIcon"
154,155c135,136
<             android:icon="@mipmap/ic_launcher_icon_1"
<             android:roundIcon="@mipmap/ic_launcher_icon_1"
---
>             android:icon="@mipmap/icon_4_launcher"
>             android:roundIcon="@mipmap/icon_4_launcher_round"
169c149
<             android:name="org.telegram.messenger.ICON2"
---
>             android:name="org.telegram.messenger.PremiumIcon"
171,172c151,152
<             android:icon="@mipmap/ic_launcher_icon_2"
<             android:roundIcon="@mipmap/ic_launcher_icon_2"
---
>             android:icon="@mipmap/icon_3_launcher"
>             android:roundIcon="@mipmap/icon_3_launcher_round"
186c165
<             android:name="org.telegram.messenger.ICON3"
---
>             android:name="org.telegram.messenger.TurboIcon"
188,189c167,168
<             android:icon="@mipmap/ic_launcher_icon_3"
<             android:roundIcon="@mipmap/ic_launcher_icon_3"
---
>             android:icon="@mipmap/icon_5_launcher"
>             android:roundIcon="@mipmap/icon_5_launcher_round"
203,219c181
<             android:name="org.telegram.messenger.ICON4"
<             android:targetActivity="org.telegram.ui.LaunchActivity"
<             android:icon="@mipmap/ic_launcher_icon_4"
<             android:roundIcon="@mipmap/ic_launcher_icon_4"
<             android:exported="true">
< 
<             <intent-filter>
<                 <action android:name="android.intent.action.MAIN" />
< 
<                 <category android:name="android.intent.category.LAUNCHER" />
<                 <category android:name="android.intent.category.MULTIWINDOW_LAUNCHER" />
<             </intent-filter>
<         </activity-alias>
< 
<         <activity-alias
<             android:enabled="false"
<             android:name="org.telegram.messenger.ICON5"
---
>             android:name="org.telegram.messenger.NoxIcon"
221,222c183,184
<             android:icon="@mipmap/ic_launcher_icon_5"
<             android:roundIcon="@mipmap/ic_launcher_icon_5"
---
>             android:icon="@mipmap/icon_2_launcher"
>             android:roundIcon="@mipmap/icon_2_launcher_round"
277a239,243
>                 <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"/>
>             </intent-filter>
>             <intent-filter>
>                 <action android:name="android.intent.action.VIEW"/>
>                 <category android:name="android.intent.category.DEFAULT" />
286c252
<             <intent-filter android:icon="@drawable/icon" android:roundIcon="@drawable/icon" android:priority="1">
---
>             <intent-filter android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round" android:priority="1">
314d279
<             android:exported="true"
330c295
<             <intent-filter android:icon="@drawable/icon" android:roundIcon="@drawable/icon" android:priority="1">
---
>             <intent-filter android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round" android:priority="1">
341,343c306,308
<             android:exported="true"
<             android:windowSoftInputMode="adjustPan">
<             <intent-filter android:icon="@drawable/icon" android:roundIcon="@drawable/icon">
---
>             android:windowSoftInputMode="adjustPan"
>             android:exported="true">
>             <intent-filter android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round">
352,354c317,319
<             android:exported="true"
<             android:windowSoftInputMode="adjustPan">
<             <intent-filter android:icon="@drawable/icon" android:roundIcon="@drawable/icon">
---
>             android:windowSoftInputMode="adjustPan"
>             android:exported="true">
>             <intent-filter android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round">
362,364c327,329
<             android:exported="true"
<             android:windowSoftInputMode="adjustPan">
<             <intent-filter android:icon="@drawable/icon" android:roundIcon="@drawable/icon">
---
>             android:windowSoftInputMode="adjustPan"
>             android:exported="true">
>             <intent-filter android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round">
373c338
< <!--            <intent-filter android:icon="@drawable/icon" android:roundIcon="@drawable/icon_round">-->
---
> <!--            <intent-filter android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round">-->
390d354
<             android:exported="false"
393,401d356
<         <activity
<             android:name=".GoogleVoiceClientActivity"
<             android:exported="true">
<             <intent-filter>
<                 <action android:name="com.google.android.voicesearch.SEND_MESSAGE_TO_CONTACTS" />
<                 <category android:name="android.intent.category.DEFAULT" />
<                 <data android:mimeType="text/plain" />
<             </intent-filter>
<         </activity>
406d360
<                   android:exported="true"
412d365
<                   android:exported="true"
453,458d405
<         <receiver android:name="top.qwq2333.nullgram.utils.APKUtils$UpdateReceiver" android:exported="true">
<             <intent-filter>
<                 <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />
<             </intent-filter>
<         </receiver>
< 
490d436
<         <service android:name=".GoogleVoiceClientService" android:exported="false"/>
533c479
<         <receiver android:name=".WearReplyReceiver" android:enabled="true" android:exported="false"/>
---
>         <receiver android:name=".WearReplyReceiver" android:enabled="true"/>
535c481
<         <receiver android:name=".StopLiveLocationReceiver" android:enabled="true" android:exported="false"/>
---
>         <receiver android:name=".StopLiveLocationReceiver" android:enabled="true"/>
537c483
<         <receiver android:name=".PopupReplyReceiver" android:enabled="true" android:exported="false"/>
---
>         <receiver android:name=".PopupReplyReceiver" android:enabled="true"/>
541c487
<         <receiver android:name=".ShareBroadcastReceiver" android:enabled="true" android:exported="false"/>
---
>         <receiver android:name=".ShareBroadcastReceiver" android:enabled="true"/>
543c489
<         <receiver android:name=".CustomTabsCopyReceiver" android:enabled="true" android:exported="false"/>
---
>         <receiver android:name=".CustomTabsCopyReceiver" android:enabled="true"/>
607,615d552
<         <service
<             android:name=".GcmPushListenerService" android:exported="false">
<             <intent-filter>
<                 <action android:name="com.google.firebase.MESSAGING_EVENT" />
<             </intent-filter>
<         </service>
< 
<         <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyCGMAA5lSWvRAgaVtF1-Bh3Di07zePnUbA" />
< 
633,634d569
< 
<         <meta-data android:name="com.google.firebase.messaging.default_notification_icon" android:resource="@drawable/notification" />
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/assets/bluebubbles.attheme ../Tele/TMessagesProj/src/main/assets/bluebubbles.attheme
33d32
< switchTrackBlueChecked=-12940870
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/assets/countries.txt ../Tele/TMessagesProj/src/main/assets/countries.txt
22d21
< 999;YL;Test Number;XX X XXXX
Only in TMessagesProj/src/main/assets: monet_dark.attheme
Only in TMessagesProj/src/main/assets: monet_light.attheme
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/androidx/recyclerview/widget/ChildHelper.java ../Tele/TMessagesProj/src/main/java/androidx/recyclerview/widget/ChildHelper.java
22a23,24
> import org.telegram.messenger.BuildVars;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/androidx/recyclerview/widget/ItemTouchHelper.java ../Tele/TMessagesProj/src/main/java/androidx/recyclerview/widget/ItemTouchHelper.java
47,49d46
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
698d694
<                 if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/androidx/recyclerview/widget/LinearSmoothScrollerCustom.java ../Tele/TMessagesProj/src/main/java/androidx/recyclerview/widget/LinearSmoothScrollerCustom.java
12a13
> import androidx.annotation.Nullable;
16,17d16
< 
< import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/androidx/recyclerview/widget/LinearSmoothScrollerEnd.java ../Tele/TMessagesProj/src/main/java/androidx/recyclerview/widget/LinearSmoothScrollerEnd.java
12a13
> import androidx.annotation.Nullable;
16,17d16
< 
< import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/androidx/recyclerview/widget/RecyclerView.java ../Tele/TMessagesProj/src/main/java/androidx/recyclerview/widget/RecyclerView.java
61a62,65
> import org.telegram.messenger.AndroidUtilities;
> import org.telegram.messenger.BuildVars;
> import org.telegram.messenger.FileLog;
> 
87,90d90
< import org.telegram.messenger.AndroidUtilities;
< import org.telegram.messenger.BuildVars;
< import org.telegram.messenger.FileLog;
< 
100,103d99
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.VibrationUtils;
< 
7057,7058d7052
<                 if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
<                     VibrationUtils.disableHapticFeedback(holder.itemView);
11313,11316d11306
<         }
< 
<         public Object getPayload() {
<             return getUnmodifiedPayloads().isEmpty() ? null : getUnmodifiedPayloads().get(0);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/androidx/recyclerview/widget/ViewInfoStore.java ../Tele/TMessagesProj/src/main/java/androidx/recyclerview/widget/ViewInfoStore.java
17a18,19
> import org.telegram.messenger.FileLog;
> 
32,33d33
< 
< import org.telegram.messenger.FileLog;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/com/google/zxing/common/StringUtils.java ../Tele/TMessagesProj/src/main/java/com/google/zxing/common/StringUtils.java
19,20d18
< import com.google.zxing.DecodeHintType;
< 
22a21,22
> 
> import com.google.zxing.DecodeHintType;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/com/google/zxing/multi/qrcode/QRCodeMultiReader.java ../Tele/TMessagesProj/src/main/java/com/google/zxing/multi/qrcode/QRCodeMultiReader.java
37,38d36
< import java.util.Collections;
< import java.util.Comparator;
40a39,40
> import java.util.Collections;
> import java.util.Comparator;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/com/google/zxing/qrcode/QRCodeWriter.java ../Tele/TMessagesProj/src/main/java/com/google/zxing/qrcode/QRCodeWriter.java
30d29
< import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
31a31
> import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
198,202d197
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.AlertUtil;
< import top.qwq2333.nullgram.utils.AnalyticsUtils;
< import top.qwq2333.nullgram.utils.Defines;
< 
1187,1191c1182,1185
<     /**
<      * @deprecated Replaced with OpenStreet Map
<      */
<     @Deprecated
<     public static boolean isGoogleMapsInstalled(final BaseFragment fragment) {
---
>     public static boolean isMapsInstalled(BaseFragment fragment) {
>         String pkg = ApplicationLoader.getMapsProvider().getMapsAppPackageName();
>         try {
>             ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo(pkg, 0);
1192a1187,1203
>         } catch (PackageManager.NameNotFoundException e) {
>             if (fragment.getParentActivity() == null) {
>                 return false;
>             }
>             AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
>             builder.setMessage(LocaleController.getString(ApplicationLoader.getMapsProvider().getInstallMapsString()));
>             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
>                 try {
>                     Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + pkg));
>                     fragment.getParentActivity().startActivityForResult(intent, 500);
>                 } catch (Exception e1) {
>                     FileLog.e(e1);
>                 }
>             });
>             builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
>             fragment.showDialog(builder.create());
>             return false;
1194,1200d1204
< 
<     /**
<      * @deprecated Replaced with OpenStreet Map
<      */
<     @Deprecated
<     public static boolean isMapsInstalled(final BaseFragment fragment) {
<         return true;
1755,1774c1759,1770
<                     Typeface t = null;
<                     switch (assetPath) {
<                         case "fonts/rmedium.ttf":
<                             t = Typeface.create("sans-serif-medium", Typeface.NORMAL);
<                             break;
<                         case "fonts/ritalic.ttf":
<                             t = Typeface.create("sans-serif", Typeface.ITALIC);
<                             break;
<                         case "fonts/rmediumitalic.ttf":
<                             t = Typeface.create("sans-serif-medium", Typeface.ITALIC);
<                             break;
<                         case "fonts/rmono.ttf":
<                             t = Typeface.MONOSPACE;
<                             break;
<                         case "fonts/mw_bold.ttf":
<                             t = Typeface.create("serif", Typeface.BOLD);
<                             break;
<                         case "fonts/rcondensedbold.ttf":
<                             t = Typeface.create("sans-serif-condensed", Typeface.BOLD);
<                             break;
---
>                     Typeface t;
>                     if (Build.VERSION.SDK_INT >= 26) {
>                         Typeface.Builder builder = new Typeface.Builder(ApplicationLoader.applicationContext.getAssets(), assetPath);
>                         if (assetPath.contains("medium")) {
>                             builder.setWeight(700);
>                         }
>                         if (assetPath.contains("italic")) {
>                             builder.setItalic(true);
>                         }
>                         t = builder.build();
>                     } else {
>                         t = Typeface.createFromAsset(ApplicationLoader.applicationContext.getAssets(), assetPath);
2837c2833
<         AnalyticsUtils.trackCrashes(e);
---
>         ApplicationLoader.appCenterLog(e);
2841c2837
<         return Build.VERSION.SDK_INT < Build.VERSION_CODES.S || !OneUIUtilities.hasBuiltInClipboardToasts();
---
>         return (Build.VERSION.SDK_INT < Build.VERSION_CODES.S || !OneUIUtilities.hasBuiltInClipboardToasts()) && Build.VERSION.SDK_INT < 32 /* TODO: Update to TIRAMISU when compileSdkVersion would be 32 */;
3418,3426c3414,3417
<                     //if (Build.VERSION.SDK_INT >= 24) {
<                     intent.setDataAndType(FileProvider.getUriForFile(activity, BuildConfig.APPLICATION_ID + ".provider", f), realMimeType != null ? realMimeType : "text/plain");
<                     //} else {
<                     //    intent.setDataAndType(Uri.fromFile(f), realMimeType != null ? realMimeType : "text/plain");
<                     //}
<                     if (realMimeType != null) {
<                         if (BuildConfig.isPlay && realMimeType.equals("application/vnd.android.package-archive")) {
<                             AlertUtil.showSimpleAlert(activity, LocaleController.getString("InstallProhibitedPlay", R.string.InstallProhibitedPlay));
<                             return;
---
>                     if (Build.VERSION.SDK_INT >= 24) {
>                         intent.setDataAndType(FileProvider.getUriForFile(activity, ApplicationLoader.getApplicationId() + ".provider", f), realMimeType != null ? realMimeType : "text/plain");
>                     } else {
>                         intent.setDataAndType(Uri.fromFile(f), realMimeType != null ? realMimeType : "text/plain");
3427a3419
>                     if (realMimeType != null) {
3431,3435c3423,3427
<                             //if (Build.VERSION.SDK_INT >= 24) {
<                             intent.setDataAndType(FileProvider.getUriForFile(activity, BuildConfig.APPLICATION_ID + ".provider", f), "text/plain");
<                             //} else {
<                             //    intent.setDataAndType(Uri.fromFile(f), "text/plain");
<                             //}
---
>                             if (Build.VERSION.SDK_INT >= 24) {
>                                 intent.setDataAndType(FileProvider.getUriForFile(activity, ApplicationLoader.getApplicationId() + ".provider", f), "text/plain");
>                             } else {
>                                 intent.setDataAndType(Uri.fromFile(f), "text/plain");
>                             }
3480,3483d3471
<             if (BuildConfig.isPlay && realMimeType != null && realMimeType.equals("application/vnd.android.package-archive")) {
<                 AlertUtil.showSimpleAlert(activity, LocaleController.getString("InstallProhibitedPlay", R.string.InstallProhibitedPlay));
<                 return true;
<             }
3820a3809,3812
>         float scale = Settings.Global.getFloat(ApplicationLoader.applicationContext.getContentResolver(), Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);
>         if (scale <= 0.0f) {
>             return false;
>         }
3827a3820
>         builder.setApplyTopPadding(false);
4326,4328d4318
<         if (ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat)){
<             return;
<         }
4349,4388d4338
<     private static final HashMap<Window, ArrayList<Long>> flagSecureReasons = new HashMap<>();
< 
<     // Sets FLAG_SECURE to true, until it gets unregistered (when returned callback is run)
<     // Useful for having multiple reasons to have this flag on.
<     public static Runnable registerFlagSecure(Window window) {
<         final long reasonId = (long) (Math.random() * 999999999);
<         final ArrayList<Long> reasonIds;
<         if (flagSecureReasons.containsKey(window)) {
<             reasonIds = flagSecureReasons.get(window);
<         } else {
<             reasonIds = new ArrayList<>();
<             flagSecureReasons.put(window, reasonIds);
<         }
<         reasonIds.add(reasonId);
<         updateFlagSecure(window);
<         return () -> {
<             reasonIds.remove(reasonId);
<             updateFlagSecure(window);
<         };
<     }
< 
<     private static void updateFlagSecure(Window window) {
<         if (Build.VERSION.SDK_INT >= 23) {
<             if (ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat))
<                 return;
<             if (window == null) {
<                 return;
<             }
<             final boolean value = flagSecureReasons.containsKey(window) && flagSecureReasons.get(window).size() > 0;
<             try {
<                 if (value) {
<                     window.addFlags(WindowManager.LayoutParams.FLAG_SECURE);
<                 } else {
<                     window.clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
<                 }
<             } catch (Exception ignore) {
<             }
<         }
<     }
< 
4623,4625d4572
<         if (ConfigManager.getBooleanOrFalse(Defines.skipOpenLinkConfirm)) {
<             return false;
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
44,46d43
< import java.util.concurrent.CountDownLatch;
< 
< import top.qwq2333.nullgram.utils.AnalyticsUtils;
56d52
<     public static final CountDownLatch countDownLatch = new CountDownLatch(1);
98c94
<             mapsProvider = new OSMDroidMapsProvider();
---
>             mapsProvider = applicationLoaderInstance.onCreateMapsProvider();
104c100
<         return new OSMDroidMapsProvider();
---
>         return new GoogleMapsProvider();
123c119
<         return BuildConfig.APPLICATION_ID;
---
>         return null;
149c145
<         return new File("/data/data/top.qwq2333.nullgram/files");
---
>         return new File("/data/data/org.telegram.messenger/files");
237,239d232
< 
<         AnalyticsUtils.start(applicationLoaderInstance);
< 
287,290d279
<         org.osmdroid.config.Configuration.getInstance().setUserAgentValue("Nullgram" + BuildConfig.VERSION_NAME);
<         org.osmdroid.config.Configuration.getInstance().setOsmdroidBasePath(new File(ApplicationLoader.applicationContext.getCacheDir(), "osmdroid"));
< 
< 
292d280
<         countDownLatch.countDown();
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/AuthTokensHelper.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/AuthTokensHelper.java
5a6,7
> import com.google.android.exoplayer2.util.Log;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/BackupAgent.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/BackupAgent.java
3a4,5
> import android.app.backup.BackupDataInput;
> import android.app.backup.BackupDataOutput;
4a7,8
> import android.app.backup.FullBackupDataOutput;
> import android.app.backup.RestoreObserver;
6a11,17
> import android.os.ParcelFileDescriptor;
> import android.util.Log;
> 
> import org.telegram.tgnet.TLRPC;
> 
> import java.io.IOException;
> import java.util.ArrayList;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
21,24c21,23
<     public static boolean DEBUG_VERSION = true;
<     public static boolean DEBUG_PRIVATE_VERSION = false;
<     public static boolean CHECK_UPDATES = true;
<     public static boolean LOGS_ENABLED = true;
---
>     public static boolean DEBUG_VERSION = BuildConfig.DEBUG_VERSION;
>     public static boolean LOGS_ENABLED = BuildConfig.DEBUG_VERSION;
>     public static boolean DEBUG_PRIVATE_VERSION = BuildConfig.DEBUG_PRIVATE_VERSION;
25a25
>     public static boolean CHECK_UPDATES = true;
29,32c29,30
<     public static int APP_ID = 19797609;
<     public static String APP_HASH = "e8f1567dbbf38944a1391c4d23c34b60";
<     public static String APPCENTER_HASH = "e07b49da-11a5-46db-a780-f5cd7b9a1a5a";
<     public static String SAFETYNET_KEY = "";
---
>     public static int APP_ID = 4;
>     public static String APP_HASH = "014b35b6184100b085b0d0572f9b5103";
34,35c32,35
<     public static String SMS_HASH = "O2P2z+/jBpJ";
<     public static String PLAYSTORE_APP_URL = "https://play.google.com/store/apps/details?id=top.qwq2333.nullgram";
---
>     // SafetyNet key for Google Identity SDK, set it to empty to disable
>     public static String SAFETYNET_KEY = "AIzaSyDqt8P-7F7CPCseMkOiVRgb1LY8RN1bvH8";
>     public static String SMS_HASH = isStandaloneApp() ? "w0lkcmTZkKh" : (DEBUG_VERSION ? "O2P2z+/jBpJ" : "oLeq9AcOZkT");
>     public static String PLAYSTORE_APP_URL = "https://play.google.com/store/apps/details?id=org.telegram.messenger";
41c41
<     public static boolean IS_BILLING_UNAVAILABLE = BuildConfig.isPlay;
---
>     public static boolean IS_BILLING_UNAVAILABLE = false;
51c51
<         return BillingController.billingClientEmpty || hasDirectCurrency();
---
>         return BillingController.billingClientEmpty || DEBUG_VERSION || isStandaloneApp() || isBetaApp() || isHuaweiStoreApp() || hasDirectCurrency();
70c70
< 
---
>     private static Boolean standaloneApp;
72c72,75
<         return false;
---
>         if (standaloneApp == null) {
>             standaloneApp = ApplicationLoader.applicationContext != null && "org.telegram.messenger.web".equals(ApplicationLoader.applicationContext.getPackageName());
>         }
>         return standaloneApp;
74a78
>     private static Boolean betaApp;
76c80,83
<         return false;
---
>         if (betaApp == null) {
>             betaApp = ApplicationLoader.applicationContext != null && "org.telegram.messenger.beta".equals(ApplicationLoader.applicationContext.getPackageName());
>         }
>         return betaApp;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
46d45
< import java.util.concurrent.CountDownLatch;
47a47
> import java.util.concurrent.CountDownLatch;
66d65
<     private boolean previewStarted = false;
477d475
<                 session.previewStarted = true;
499d496
<                 session.previewStarted = false;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraSession.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraSession.java
54d53
<     public boolean previewStarted = false;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraView.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraView.java
43a44
> import android.util.Log;
63a65
> import org.telegram.ui.ActionBar.Theme;
85,87d86
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
751d749
<             if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/ContactsWidgetService.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/ContactsWidgetService.java
22a23,24
> import com.google.android.exoplayer2.util.Log;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/DatabaseMigrationHelper.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/DatabaseMigrationHelper.java
426c426
<             database.executeFast("CREATE TABLE IF NOT EXISTS dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT, emoticon TEXT)").stepThis().dispose();
---
>             database.executeFast("CREATE TABLE IF NOT EXISTS dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/DownloadController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/DownloadController.java
638,640d637
<                 if (message.from_id instanceof TLRPC.TL_peerUser && getMessagesController().blockePeers.indexOfKey(message.from_id.user_id) >= 0) {
<                     return 0;
<                 }
649,651d645
<                     if (message.from_id instanceof TLRPC.TL_peerUser && getMessagesController().blockePeers.indexOfKey(message.from_id.user_id) >= 0) {
<                         return 0;
<                     }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
39,42d38
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Utils;
< 
275d270
<         private static TextPaint textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
298c293
<             if (!ConfigManager.getBooleanOrFalse(Defines.useSystemEmoji) && !isLoaded()) {
---
>             if (!isLoaded()) {
311,319d305
<             }
< 
<             if (ConfigManager.getBooleanOrFalse(Defines.useSystemEmoji)) {
<                 String emoji = fixEmoji(EmojiData.data[info.page][info.emojiIndex]);
<                 textPaint.setTextSize(b.height() * 0.8f);
<                 textPaint.setTypeface(Utils.getSystemEmojiTypeface());
< 
<                 canvas.drawText(emoji, 0, emoji.length(), b.left, b.bottom - b.height() * 0.225f, textPaint);
<                 return;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/EmuDetector.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/EmuDetector.java
9a10,11
> import androidx.core.content.ContextCompat;
> 
13,14d14
< 
< import androidx.core.content.ContextCompat;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
904c904
<             if (DialogObject.isEncryptedDialog(dialogId)) {
---
>             if (getMessagesController().isChatNoForwards(getMessagesController().getChat(-dialogId)) || DialogObject.isEncryptedDialog(dialogId)) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
32,34d31
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
112,113c109
<     private int downloadChunkSizeBig = 1024 * ConfigManager.getIntOrDefault(Defines.modifyDownloadSpeed, 512);
<     ;
---
>     private int downloadChunkSizeBig = 1024 * 128;
242,244c234,242
<         downloadChunkSizeBig = 1024 * ConfigManager.getIntOrDefault(Defines.modifyDownloadSpeed, 512);
<         maxDownloadRequests = 12;
<         maxDownloadRequestsBig = 12;
---
>         if (MessagesController.getInstance(currentAccount).getfileExperimentalParams && !forceSmallChunk) {
>             downloadChunkSizeBig = 1024 * 512;
>             maxDownloadRequests = 8;
>             maxDownloadRequestsBig = 8;
>         } else {
>             downloadChunkSizeBig = 1024 * 128;
>             maxDownloadRequests = 4;
>             maxDownloadRequestsBig = 4;
>         }
1741a1740,1742
>                         if (BuildVars.DEBUG_VERSION) {
>                             FileLog.d("save file part " + fileName + " offset=" + requestInfo.offset + " chunk_size=" + currentDownloadChunkSize + " isCdn=" + isCdn);
>                         }
1984a1986,1988
>         if (BuildVars.LOGS_ENABLED) {
>             FileLog.d("debug_loading: " + cacheFileFinal.getName() + " file reference expired ");
>         }
2160a2165,2167
>                 if (BuildVars.LOGS_ENABLED) {
>                     FileLog.d("debug_loading: " + cacheFileFinal.getName() + " time=" + (System.currentTimeMillis() - requestInfo.requestStartTime) + " dcId=" + datacenterId + " cdn=" + isCdn + " conType=" + connectionType + " reqId" + requestInfo.requestToken);
>                 }
2270a2278,2280
>             if (BuildVars.LOGS_ENABLED) {
>                 FileLog.d("debug_loading: " + cacheFileFinal.getName() + " dc=" + datacenterId + " send reqId " + requestInfo.requestToken);
>             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
10a11,18
> import android.content.Context;
> import android.content.res.ColorStateList;
> import android.util.Log;
> 
> import com.google.gson.ExclusionStrategy;
> import com.google.gson.FieldAttributes;
> import com.google.gson.Gson;
> import com.google.gson.GsonBuilder;
15a24
> import org.telegram.ui.LaunchActivity;
17a27,28
> import java.io.FileOutputStream;
> import java.io.IOException;
18a30,32
> import java.util.ArrayList;
> import java.util.HashSet;
> import java.util.Locale;
20,25d33
< import top.qwq2333.nullgram.utils.Log;
< 
< /**
<  * @deprecated use {@link Log} instead
<  */
< @Deprecated
58a66
>         if (!BuildVars.LOGS_ENABLED) {
60a69,70
>         init();
>     }
62a73,75
>     private static Gson gson;
>     private static HashSet<String> excludeRequests;
> 
63a77,83
>         if (!BuildVars.DEBUG_PRIVATE_VERSION || !BuildVars.LOGS_ENABLED || request == null || SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
>             return;
>         }
>         String requestSimpleName = request.getClass().getSimpleName();
>         checkGson();
> 
>         if (excludeRequests.contains(requestSimpleName) && error == null) {
65a86,118
>         try {
>             String req = "req -> " + requestSimpleName + " : " + gson.toJson(request);
>             String res = "null";
>             if (response != null) {
>                 res = "res -> " + response.getClass().getSimpleName() + " : " + gson.toJson(response);
>             } else if (error != null) {
>                 res = "err -> " + error.getClass().getSimpleName() + " : " + gson.toJson(error);
>             }
>             String finalRes = res;
>             long time = System.currentTimeMillis();
>             FileLog.getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     String metadata = "requestMsgId=" + requestMsgId + " requestingTime=" + (System.currentTimeMillis() - startRequestTimeInMillis) +  " request_token=" + requestToken;
>                     FileLog.getInstance().tlStreamWriter.write(getInstance().dateFormat.format(time) + " " + metadata);
>                     FileLog.getInstance().tlStreamWriter.write("\n");
>                     FileLog.getInstance().tlStreamWriter.write(req);
>                     FileLog.getInstance().tlStreamWriter.write("\n");
>                     FileLog.getInstance().tlStreamWriter.write(finalRes);
>                     FileLog.getInstance().tlStreamWriter.write("\n\n");
>                     FileLog.getInstance().tlStreamWriter.flush();
> 
>                     Log.d(mtproto_tag, metadata);
>                     Log.d(mtproto_tag, req);
>                     Log.d(mtproto_tag, finalRes);
>                     Log.d(mtproto_tag, " ");
>                 } catch (Exception e) {
>                     e.printStackTrace();
>                 }
>             });
>         } catch (Throwable e) {
>             FileLog.e(e, BuildVars.DEBUG_PRIVATE_VERSION);
>         }
>     }
67a121
>         if (!BuildVars.DEBUG_PRIVATE_VERSION || !BuildVars.LOGS_ENABLED || message == null || SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
69a124,192
>         try {
>             checkGson();
>             getInstance().dateFormat.format(System.currentTimeMillis());
>             String messageStr = "receive message -> " + message.getClass().getSimpleName() + " : " + gson.toJson(message);
>             String res = "null";
>             long time = System.currentTimeMillis();
>             FileLog.getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     String metadata = getInstance().dateFormat.format(time);// + " msgId=" + messageId;
> 
>                     FileLog.getInstance().tlStreamWriter.write(metadata);
>                     FileLog.getInstance().tlStreamWriter.write("\n");
>                     FileLog.getInstance().tlStreamWriter.write(messageStr);
>                     FileLog.getInstance().tlStreamWriter.write("\n\n");
>                     FileLog.getInstance().tlStreamWriter.flush();
> 
>                     Log.d(mtproto_tag, "msgId=" + messageId);
>                     Log.d(mtproto_tag, messageStr);
>                     Log.d(mtproto_tag, " ");
>                 } catch (Exception e) {
>                     e.printStackTrace();
>                 }
>             });
>         } catch (Throwable e) {
>         }
>     }
> 
>     private static void checkGson() {
>         if (gson == null) {
>             HashSet<String> privateFields = new HashSet<>();
>             privateFields.add("message");
>             privateFields.add("phone");
>             privateFields.add("about");
>             privateFields.add("status_text");
>             privateFields.add("bytes");
>             privateFields.add("secret");
>             privateFields.add("stripped_thumb");
>             privateFields.add("strippedBitmap");
> 
>             privateFields.add("networkType");
>             privateFields.add("disableFree");
>             privateFields.add("mContext");
> 
>             //exclude file loading
>             excludeRequests = new HashSet<>();
>             excludeRequests.add("TL_upload_getFile");
>             excludeRequests.add("TL_upload_getWebFile");
> 
>             gson = new GsonBuilder().addSerializationExclusionStrategy(new ExclusionStrategy() {
> 
>                 @Override
>                 public boolean shouldSkipField(FieldAttributes f) {
>                     if (privateFields.contains(f.getName())) {
>                         return true;
>                     }
>                     return false;
>                 }
> 
>                 @Override
>                 public boolean shouldSkipClass(Class<?> clazz) {
>                     if (clazz.isInstance(ColorStateList.class) || clazz.isInstance(Context.class)) {
>                         return true;
>                     }
>                     return false;
>                 }
>             }).registerTypeAdapterFactory(RuntimeClassNameTypeAdapterFactory.of(TLObject.class, "type_")).create();
>         }
>     }
> 
72a196
>         if (initied) {
74a199,227
>         dateFormat = FastDateFormat.getInstance("dd_MM_yyyy_HH_mm_ss", Locale.US);
>         String date = dateFormat.format(System.currentTimeMillis());
>         try {
>             File dir = AndroidUtilities.getLogsDir();
>             if (dir == null) {
>                 return;
>             }
>             currentFile = new File(dir, date + ".txt");
>             tlRequestsFile = new File(dir, date + "_mtproto.txt");
>         } catch (Exception e) {
>             e.printStackTrace();
>         }
>         try {
>             logQueue = new DispatchQueue("logQueue");
>             currentFile.createNewFile();
>             FileOutputStream stream = new FileOutputStream(currentFile);
>             streamWriter = new OutputStreamWriter(stream);
>             streamWriter.write("-----start log " + date + "-----\n");
>             streamWriter.flush();
> 
>             FileOutputStream tlStream = new FileOutputStream(tlRequestsFile);
>             tlStreamWriter = new OutputStreamWriter(tlStream);
>             tlStreamWriter.write("-----start log " + date + "-----\n");
>             tlStreamWriter.flush();
>         } catch (Exception e) {
>             e.printStackTrace();
>         }
>         initied = true;
>     }
77c230
<         return;
---
>         getInstance().init();
80a234,246
>         if (!BuildVars.LOGS_ENABLED) {
>             return "";
>         }
>         try {
>             File dir = AndroidUtilities.getLogsDir();
>             if (dir == null) {
>                 return "";
>             }
>             getInstance().networkFile = new File(dir, getInstance().dateFormat.format(System.currentTimeMillis()) + "_net.txt");
>             return getInstance().networkFile.getAbsolutePath();
>         } catch (Throwable e) {
>             e.printStackTrace();
>         }
84a251,263
>         if (!BuildVars.LOGS_ENABLED) {
>             return "";
>         }
>         try {
>             File dir = AndroidUtilities.getLogsDir();
>             if (dir == null) {
>                 return "";
>             }
>             getInstance().tonlibFile = new File(dir, getInstance().dateFormat.format(System.currentTimeMillis()) + "_tonlib.txt");
>             return getInstance().tonlibFile.getAbsolutePath();
>         } catch (Throwable e) {
>             e.printStackTrace();
>         }
88,91d266
<     /**
<      * @deprecated use {@link Log#e(String, Throwable)} instead
<      */
<     @Deprecated
93c268,283
<         Log.e(message, exception);
---
>         if (!BuildVars.LOGS_ENABLED) {
>             return;
>         }
>         ensureInitied();
>         Log.e(tag, message, exception);
>         if (getInstance().streamWriter != null) {
>             getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/tmessages: " + message + "\n");
>                     getInstance().streamWriter.write(exception.toString());
>                     getInstance().streamWriter.flush();
>                 } catch (Exception e) {
>                     e.printStackTrace();
>                 }
>             });
>         }
96,99d285
<     /**
<      * @deprecated use {@link Log#e(String msg)} instead
<      */
<     @Deprecated
101c287,301
<         Log.e(message);
---
>         if (!BuildVars.LOGS_ENABLED) {
>             return;
>         }
>         ensureInitied();
>         Log.e(tag, message);
>         if (getInstance().streamWriter != null) {
>             getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/tmessages: " + message + "\n");
>                     getInstance().streamWriter.flush();
>                 } catch (Exception e) {
>                     e.printStackTrace();
>                 }
>             });
>         }
104,107d303
<     /**
<      * @deprecated use {@link Log#e(String, Throwable)} instead
<      */
<     @Deprecated
112,115d307
<     /**
<      * @deprecated use {@link Log#e(String, Throwable)} instead
<      */
<     @Deprecated
117,118c309,312
<         Log.e(e);
<         if (needSent(e) && logToAppCenter) {
---
>         if (!BuildVars.LOGS_ENABLED) {
>             return;
>         }
>         if (BuildVars.DEBUG_VERSION && needSent(e) && logToAppCenter) {
120a315,348
>         if (BuildVars.DEBUG_VERSION && e.getMessage() != null && e.getMessage().contains("disk image is malformed") && !databaseIsMalformed) {
>             FileLog.d("copy malformed files");
>             databaseIsMalformed = true;
>             File filesDir = ApplicationLoader.getFilesDirFixed();
>             filesDir = new File(filesDir, "malformed_database/");
>             filesDir.mkdirs();
>             ArrayList<File> malformedFiles = MessagesStorage.getInstance(UserConfig.selectedAccount).getDatabaseFiles();
>             for (int i = 0; i < malformedFiles.size(); i++) {
>                 try {
>                     AndroidUtilities.copyFile(malformedFiles.get(i), new File(filesDir, malformedFiles.get(i).getName()));
>                 } catch (IOException ex) {
>                     FileLog.e(ex);
>                 }
>             }
>         }
>         ensureInitied();
>         e.printStackTrace();
>         if (getInstance().streamWriter != null) {
>             getInstance().logQueue.postRunnable(() -> {
> 
>                 try {
>                     getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/tmessages: " + e + "\n");
>                     StackTraceElement[] stack = e.getStackTrace();
>                     for (int a = 0; a < stack.length; a++) {
>                         getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/tmessages: " + stack[a] + "\n");
>                     }
>                     getInstance().streamWriter.flush();
>                 } catch (Exception e1) {
>                     e1.printStackTrace();
>                 }
>             });
>         } else {
>             e.printStackTrace();
>         }
128c356,359
<         if (needSent(e) && logToAppCenter) {
---
>         if (!BuildVars.LOGS_ENABLED) {
>             return;
>         }
>         if (BuildVars.DEBUG_VERSION && needSent(e) && logToAppCenter) {
130a362,386
>         ensureInitied();
>         e.printStackTrace();
>         if (getInstance().streamWriter != null) {
>             getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/tmessages: " + e + "\n");
>                     StackTraceElement[] stack = e.getStackTrace();
>                     for (int a = 0; a < stack.length; a++) {
>                         getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/tmessages: " + stack[a] + "\n");
>                     }
>                     getInstance().streamWriter.flush();
>                 } catch (Exception e1) {
>                     e1.printStackTrace();
>                 }
> 
>                 if (BuildVars.DEBUG_PRIVATE_VERSION) {
>                     System.exit(2);
>                 }
>             });
>         } else {
>             e.printStackTrace();
>             if (BuildVars.DEBUG_PRIVATE_VERSION) {
>                 System.exit(2);
>             }
>         }
140,144d395
<     /**
<      * @deprecated use {@link #e(String)} instead
<      * @param message
<      */
<     @Deprecated
146c397,414
<         Log.d(message);
---
>         if (!BuildVars.LOGS_ENABLED) {
>             return;
>         }
>         ensureInitied();
>         Log.d(tag, message);
>         if (getInstance().streamWriter != null) {
>             getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " D/tmessages: " + message + "\n");
>                     getInstance().streamWriter.flush();
>                 } catch (Exception e) {
>                     e.printStackTrace();
>                     if (AndroidUtilities.isENOSPC(e)) {
>                         LaunchActivity.checkFreeDiscSpaceStatic(1);
>                     }
>                 }
>             });
>         }
149,152d416
<     /**
<      * @deprecated use {@link Log#w(String msg)} instead
<      */
<     @Deprecated
154c418,432
<         Log.w(message);
---
>         if (!BuildVars.LOGS_ENABLED) {
>             return;
>         }
>         ensureInitied();
>         Log.w(tag, message);
>         if (getInstance().streamWriter != null) {
>             getInstance().logQueue.postRunnable(() -> {
>                 try {
>                     getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " W/tmessages: " + message + "\n");
>                     getInstance().streamWriter.flush();
>                 } catch (Exception e) {
>                     e.printStackTrace();
>                 }
>             });
>         }
157,160d434
<     /**
<      * @deprecated
<      */
<     @Deprecated
161a436,456
>         ensureInitied();
>         File dir = AndroidUtilities.getLogsDir();
>         if (dir == null) {
>             return;
>         }
>         File[] files = dir.listFiles();
>         if (files != null) {
>             for (int a = 0; a < files.length; a++) {
>                 File file = files[a];
>                 if (getInstance().currentFile != null && file.getAbsolutePath().equals(getInstance().currentFile.getAbsolutePath())) {
>                     continue;
>                 }
>                 if (getInstance().networkFile != null && file.getAbsolutePath().equals(getInstance().networkFile.getAbsolutePath())) {
>                     continue;
>                 }
>                 if (getInstance().tonlibFile != null && file.getAbsolutePath().equals(getInstance().tonlibFile.getAbsolutePath())) {
>                     continue;
>                 }
>                 file.delete();
>             }
>         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FilePathDatabase.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FilePathDatabase.java
170c170
<                                 // FileLog.d("get file path id=" + documentId + " dc=" + dc + " type=" + type + " path=" + res[0]);
---
>                                 FileLog.d("get file path id=" + documentId + " dc=" + dc + " type=" + type + " path=" + res[0]);
198,199c198,200
<                     // FileLog.d("get file path id=" + documentId + " dc=" + dc + " type=" + type + " path=" + res);
<                     
---
>                     if (BuildVars.DEBUG_VERSION) {
>                         FileLog.d("get file path id=" + documentId + " dc=" + dc + " type=" + type + " path=" + res);
>                     }
234a236,238
>             if (BuildVars.DEBUG_VERSION) {
>                 FileLog.d("put file path id=" + id + " dc=" + dc + " type=" + type + " path=" + path);
>             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FileRefController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FileRefController.java
664a665,667
>             if (BuildVars.LOGS_ENABLED) {
>                 FileLog.d("debug_loading: " + fileLoadOperation.getCacheFileFinal().getName() + " " + oldRef + " " + newRef + " reference updated resume download");
>             }
696a700
>                 FileLog.e("debug_loading: " + fileLoadOperation.getCacheFileFinal().getName() + "reference can't update: fail operation ");
749a754
>                     FileLog.e("debug_loading: " + operation.getCacheFileFinal().getName() + " can't update file reference: " + error.code + " " + error.text);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FilesMigrationService.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FilesMigrationService.java
193c193
<         if (Build.VERSION.SDK_INT >= 24) {
---
>         if (Build.VERSION.SDK_INT >= 30) {
207c207
<             File oldDirectory = new File(path, "Nullgram");
---
>             File oldDirectory = new File(path, "Telegram");
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
28,30d27
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
43d39
<     private static final int minUploadChunkSizeBoost = 512;
292,293c288
<                 if ((AccountInstance.getInstance(currentAccount).getUserConfig().isPremium() && totalFileSize > FileLoader.DEFAULT_MAX_FILE_SIZE)
<                     || ConfigManager.getBooleanOrFalse(Defines.fastSpeedUpload)) {
---
>                 if (AccountInstance.getInstance(currentAccount).getUserConfig().isPremium() && totalFileSize > FileLoader.DEFAULT_MAX_FILE_SIZE) {
296,298c291
<                 uploadChunkSize = (int) Math.max(slowNetwork ? minUploadChunkSlowNetworkSize : ConfigManager.getBooleanOrFalse(Defines.fastSpeedUpload) ? minUploadChunkSizeBoost :
<                         minUploadChunkSize,
<                     (totalFileSize + 1024L * maxUploadParts - 1) / (1024L * maxUploadParts));
---
>                 uploadChunkSize = (int) Math.max(slowNetwork ? minUploadChunkSlowNetworkSize : minUploadChunkSize, (totalFileSize + 1024L * maxUploadParts - 1) / (1024L * maxUploadParts));
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/GoogleMapsProvider.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/GoogleMapsProvider.java
5d4
< import android.content.res.Resources;
85c84
<     public IMarkerOptions onCreateMarkerOptions(IMapView imapView) {
---
>     public IMarkerOptions onCreateMarkerOptions() {
293c292
<             public void setIcon(Resources resources, Bitmap bitmap) {
---
>             public void setIcon(Bitmap bitmap) {
298c297
<             public void setIcon(Resources resources, int resId) {
---
>             public void setIcon(int resId) {
451c450
<         public IMarkerOptions icon(Resources resources, Bitmap bitmap) {
---
>         public IMarkerOptions icon(Bitmap bitmap) {
457c456
<         public IMarkerOptions icon(Resources resources, int resId) {
---
>         public IMarkerOptions icon(int resId) {
577,581c576
< /*            mapView.getMapAsync(googleMap -> {
<                 if (NekoConfig.fixDriftingForGoogleMaps())
<                     googleMap.setLocationSource(new NekoLocationSource(mapView.getContext()));
<                 callback.accept(new GoogleMapImpl(googleMap));
<             });*/
---
>             mapView.getMapAsync(googleMap -> callback.accept(new GoogleMapImpl(googleMap)));
Only in TMessagesProj/src/main/java/org/telegram/messenger: GoogleVoiceClientActivity.java
Only in TMessagesProj/src/main/java/org/telegram/messenger: GoogleVoiceClientService.java
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
38a39
> import androidx.exifinterface.media.ExifInterface;
2310c2311
<                 if (Build.VERSION.SDK_INT >= 24) {
---
>                 if (Build.VERSION.SDK_INT >= 30) {
2315c2316
<                             publicMediaDir = new File(publicMediaDir, "Nullgram");
---
>                             publicMediaDir = new File(publicMediaDir, "Telegram");
2322c2323
<                     telegramPath = new File(newPath, "Nullgram");
---
>                     telegramPath = new File(newPath, "Telegram");
2331c2332
<                     telegramPath = new File(path, "Nullgram");
---
>                     telegramPath = new File(path, "Telegram");
2341c2342
<                             telegramPath = new File(path, "Nullgram");
---
>                             telegramPath = new File(path, "Telegram");
2350c2351
<                         File imagePath = new File(telegramPath, "Nullgram Images");
---
>                         File imagePath = new File(telegramPath, "Telegram Images");
2363c2364
<                         File videoPath = new File(telegramPath, "Nullgram Video");
---
>                         File videoPath = new File(telegramPath, "Telegram Video");
2376c2377
<                         File audioPath = new File(telegramPath, "Nullgram Audio");
---
>                         File audioPath = new File(telegramPath, "Telegram Audio");
2390c2391
<                         File documentPath = new File(telegramPath, "Nullgram Documents");
---
>                         File documentPath = new File(telegramPath, "Telegram Documents");
2404c2405
<                         File normalNamesPath = new File(telegramPath, "Nullgram Files");
---
>                         File normalNamesPath = new File(telegramPath, "Telegram Files");
2419c2420
<                         File imagePath = new File(publicMediaDir, "Nullgram Images");
---
>                         File imagePath = new File(publicMediaDir, "Telegram Images");
2432c2433
<                         File videoPath = new File(publicMediaDir, "Nullgram Video");
---
>                         File videoPath = new File(publicMediaDir, "Telegram Video");
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
28a29
> import android.util.Log;
775,778d775
<         setImageBitmap(bitmap, true);
<     }
< 
<     public void setImageBitmap(Drawable bitmap, boolean notify) {
1226,1228d1222
<                 }
<                 if (parentView != null) {
<                     parentView.invalidate();
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/IMapsProvider.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/IMapsProvider.java
4d3
< import android.content.res.Resources;
24c23
<     IMarkerOptions onCreateMarkerOptions(IMapView imapView);
---
>     IMarkerOptions onCreateMarkerOptions();
84,85c83,84
<         void setIcon(Resources resources, Bitmap bitmap);
<         void setIcon(Resources resources, int resId);
---
>         void setIcon(Bitmap bitmap);
>         void setIcon(int resId);
91,92c90,91
<         IMarkerOptions icon(Resources resources, Bitmap bitmap);
<         IMarkerOptions icon(Resources resources, int resId);
---
>         IMarkerOptions icon(Bitmap bitmap);
>         IMarkerOptions icon(int resId);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/LinkifyPort.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/LinkifyPort.java
189d188
<     public static final String WEB_URL_REGEX = "(" + WEB_URL_WITH_PROTOCOL + "|" + WEB_URL_WITHOUT_PROTOCOL + ")";
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
20a21
> import android.util.Log;
44a46
> import java.util.Map;
47,49d48
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
71d69
<     public FastDateFormat formatterDayWithSeconds;
226c224
<     private final ArrayList<LocaleInfo> otherLanguages = new ArrayList<>();
---
>     private ArrayList<LocaleInfo> otherLanguages = new ArrayList<>();
340,381d337
<         localeInfo = new LocaleInfo();
<         localeInfo.name = "简体中文";
<         localeInfo.nameEnglish = "Simplified Chinese";
<         localeInfo.shortName = "moecn";
<         localeInfo.baseLangCode = "zh_hans_raw";
<         localeInfo.isRtl = false;
<         localeInfo.pathToFile = "unofficial";
<         localeInfo.pluralLangCode = "zh_cn";
<         localeInfo.builtIn = true;
<         languages.add(localeInfo);
<         languagesDict.put(localeInfo.getKey(), localeInfo);
<         languagesDict.put("zh_cn", localeInfo);
<         languagesDict.put("zh_sg", localeInfo);
< 
<         localeInfo = new LocaleInfo();
<         localeInfo.name = "正體中文";
<         localeInfo.nameEnglish = "Chinese (zh-Hant-TW)";
<         localeInfo.shortName = "taiwan";
<         localeInfo.baseLangCode = "zh_hant_raw";
<         localeInfo.isRtl = false;
<         localeInfo.pathToFile = "unofficial";
<         localeInfo.pluralLangCode = "zh_tw";
<         localeInfo.builtIn = true;
<         languages.add(localeInfo);
<         languagesDict.put(localeInfo.getKey(), localeInfo);
<         languagesDict.put("zh_tw", localeInfo);
<         languagesDict.put("zh_hk", localeInfo);
<         languagesDict.put("zh_mo", localeInfo);
< 
<         localeInfo = new LocaleInfo();
<         localeInfo.name = "日本語";
<         localeInfo.nameEnglish = "Japanese";
<         localeInfo.shortName = "ja_raw";
<         localeInfo.baseLangCode = null;
<         localeInfo.isRtl = false;
<         localeInfo.pathToFile = "unofficial";
<         localeInfo.pluralLangCode = "ja";
<         localeInfo.builtIn = true;
<         languages.add(localeInfo);
<         languagesDict.put(localeInfo.getKey(), localeInfo);
<         languagesDict.put("ja", localeInfo);
< 
1110,1130d1065
<         if (key.equals("AppName")) {
<             try {
<                 return ApplicationLoader.applicationContext.getString(R.string.NullgramName);
<             } catch (Exception e) {
<                 FileLog.e(e);
<             }
<         }
<         if (key.equals("AppNameBeta")) {
<             try {
<                 return ApplicationLoader.applicationContext.getString(R.string.NullgramName);
<             } catch (Exception e) {
<                 FileLog.e(e);
<             }
<         }
<         if (key.equals("TelegramFeaturesUrl")) {
<             try {
<                 return ApplicationLoader.applicationContext.getString(R.string.TelegramFeaturesUrl);
<             } catch (Exception e) {
<                 FileLog.e(e);
<             }
<         }
1147,1151d1081
< 
<         if (value.contains("Telegram"))
<             value = value.replace("Telegram", "Nullgram");
<         if (value.contains("TELEOFFICIAL"))
<             value = value.replace("TELEOFFICIAL", "Telegram");
1286,1292d1215
<             if (value.contains("Telegram")) {
<                 value = value.replace("Telegram", "Nullgram");
<             }
<             if (value.contains("TELEOFFICIAL")) {
<                 value = value.replace("TELEOFFICIAL", "Telegram");
<             }
< 
1318,1320c1241
<                 return String.format("%s %s",
<                     LocaleController.formatPluralString("Weeks", days / 7),
<                     LocaleController.formatPluralString("Days", days % 7));
---
>                 return String.format("%s %s", LocaleController.formatPluralString("Weeks", days / 7), LocaleController.formatPluralString("Days", days % 7));
1327,1329c1248,1249
<     private static final char[] defaultNumbers = new char[]{'0', '1', '2', '3', '4', '5', '6', '7',
<         '8', '9'};
<     private static final char[][] otherNumbers = new char[][]{
---
>     private static char[] defaultNumbers = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
>     private static char[][] otherNumbers = new char[][]{
1957,1960c1877,1878
<         isRTL = lang.length() == 2 && (lang.equals("ar") || lang.equals("fa") || lang.equals("he")
<             || lang.equals("iw")) ||
<             lang.startsWith("ar_") || lang.startsWith("fa_") || lang.startsWith("he_")
<             || lang.startsWith("iw_")
---
>         isRTL = lang.length() == 2 && (lang.equals("ar") || lang.equals("fa") || lang.equals("he") || lang.equals("iw")) ||
>                 lang.startsWith("ar_") || lang.startsWith("fa_") || lang.startsWith("he_") || lang.startsWith("iw_")
1964,2044c1882,1910
<         formatterMonthYear = createFormatter(locale,
<             getStringInternal("formatterMonthYear", R.string.formatterMonthYear), "MMM yyyy");
<         formatterDayMonth = createFormatter(locale,
<             getStringInternal("formatterMonth", R.string.formatterMonth), "dd MMM");
<         formatterYear = createFormatter(locale,
<             getStringInternal("formatterYear", R.string.formatterYear), "dd.MM.yy");
<         formatterYearMax = createFormatter(locale,
<             getStringInternal("formatterYearMax", R.string.formatterYearMax), "dd.MM.yyyy");
<         chatDate = createFormatter(locale, getStringInternal("chatDate", R.string.chatDate),
<             "d MMMM");
<         chatFullDate = createFormatter(locale,
<             getStringInternal("chatFullDate", R.string.chatFullDate), "d MMMM yyyy");
<         formatterWeek = createFormatter(locale,
<             getStringInternal("formatterWeek", R.string.formatterWeek), "EEE");
<         formatterWeekLong = createFormatter(locale,
<             getStringInternal("formatterWeekLong", R.string.formatterWeekLong), "EEEE");
<         formatterScheduleDay = createFormatter(locale,
<             getStringInternal("formatDateSchedule", R.string.formatDateSchedule), "MMM d");
<         formatterScheduleYear = createFormatter(locale,
<             getStringInternal("formatDateScheduleYear", R.string.formatDateScheduleYear),
<             "MMM d yyyy");
<         formatterDay = createFormatter(
<             lang.equalsIgnoreCase("ar") || lang.equalsIgnoreCase("ko") ? locale : Locale.US,
<             is24HourFormat ? getStringInternal("formatterDay24H", R.string.formatterDay24H)
<                 : getStringInternal("formatterDay12H", R.string.formatterDay12H),
<             is24HourFormat ? "HH:mm" : "h:mm a");
<         formatterDayWithSeconds = createFormatter(
<             lang.equalsIgnoreCase("ar") || lang.equalsIgnoreCase("ko") ? locale : Locale.US,
<             is24HourFormat ? getStringInternal("formatterDay24HSec", R.string.formatterDay24HSec)
<                 : getStringInternal("formatterDay12HSec", R.string.formatterDay12HSec),
<             is24HourFormat ? "HH:mm:ss" : "h:mm:ss a");
<         formatterStats = createFormatter(locale,
<             is24HourFormat ? getStringInternal("formatterStats24H", R.string.formatterStats24H)
<                 : getStringInternal("formatterStats12H", R.string.formatterStats12H),
<             is24HourFormat ? "MMM dd yyyy, HH:mm" : "MMM dd yyyy, h:mm a");
<         formatterBannedUntil = createFormatter(locale,
<             is24HourFormat ? getStringInternal("formatterBannedUntil24H",
<                 R.string.formatterBannedUntil24H)
<                 : getStringInternal("formatterBannedUntil12H", R.string.formatterBannedUntil12H),
<             is24HourFormat ? "MMM dd yyyy, HH:mm" : "MMM dd yyyy, h:mm a");
<         formatterBannedUntilThisYear = createFormatter(locale,
<             is24HourFormat ? getStringInternal("formatterBannedUntilThisYear24H",
<                 R.string.formatterBannedUntilThisYear24H)
<                 : getStringInternal("formatterBannedUntilThisYear12H",
<                     R.string.formatterBannedUntilThisYear12H),
<             is24HourFormat ? "MMM dd, HH:mm" : "MMM dd, h:mm a");
<         formatterScheduleSend[0] = createFormatter(locale,
<             getStringInternal("SendTodayAt", R.string.SendTodayAt), "'Send today at' HH:mm");
<         formatterScheduleSend[1] = createFormatter(locale,
<             getStringInternal("SendDayAt", R.string.SendDayAt), "'Send on' MMM d 'at' HH:mm");
<         formatterScheduleSend[2] = createFormatter(locale,
<             getStringInternal("SendDayYearAt", R.string.SendDayYearAt),
<             "'Send on' MMM d yyyy 'at' HH:mm");
<         formatterScheduleSend[3] = createFormatter(locale,
<             getStringInternal("RemindTodayAt", R.string.RemindTodayAt), "'Remind today at' HH:mm");
<         formatterScheduleSend[4] = createFormatter(locale,
<             getStringInternal("RemindDayAt", R.string.RemindDayAt), "'Remind on' MMM d 'at' HH:mm");
<         formatterScheduleSend[5] = createFormatter(locale,
<             getStringInternal("RemindDayYearAt", R.string.RemindDayYearAt),
<             "'Remind on' MMM d yyyy 'at' HH:mm");
<         formatterScheduleSend[6] = createFormatter(locale,
<             getStringInternal("StartTodayAt", R.string.StartTodayAt), "'Start today at' HH:mm");
<         formatterScheduleSend[7] = createFormatter(locale,
<             getStringInternal("StartDayAt", R.string.StartDayAt), "'Start on' MMM d 'at' HH:mm");
<         formatterScheduleSend[8] = createFormatter(locale,
<             getStringInternal("StartDayYearAt", R.string.StartDayYearAt),
<             "'Start on' MMM d yyyy 'at' HH:mm");
<         formatterScheduleSend[9] = createFormatter(locale,
<             getStringInternal("StartShortTodayAt", R.string.StartShortTodayAt), "'Today,' HH:mm");
<         formatterScheduleSend[10] = createFormatter(locale,
<             getStringInternal("StartShortDayAt", R.string.StartShortDayAt), "MMM d',' HH:mm");
<         formatterScheduleSend[11] = createFormatter(locale,
<             getStringInternal("StartShortDayYearAt", R.string.StartShortDayYearAt),
<             "MMM d yyyy, HH:mm");
<         formatterScheduleSend[12] = createFormatter(locale,
<             getStringInternal("StartsTodayAt", R.string.StartsTodayAt), "'Starts today at' HH:mm");
<         formatterScheduleSend[13] = createFormatter(locale,
<             getStringInternal("StartsDayAt", R.string.StartsDayAt), "'Starts on' MMM d 'at' HH:mm");
<         formatterScheduleSend[14] = createFormatter(locale,
<             getStringInternal("StartsDayYearAt", R.string.StartsDayYearAt),
<             "'Starts on' MMM d yyyy 'at' HH:mm");
---
>         formatterMonthYear = createFormatter(locale, getStringInternal("formatterMonthYear", R.string.formatterMonthYear), "MMM yyyy");
>         formatterDayMonth = createFormatter(locale, getStringInternal("formatterMonth", R.string.formatterMonth), "dd MMM");
>         formatterYear = createFormatter(locale, getStringInternal("formatterYear", R.string.formatterYear), "dd.MM.yy");
>         formatterYearMax = createFormatter(locale, getStringInternal("formatterYearMax", R.string.formatterYearMax), "dd.MM.yyyy");
>         chatDate = createFormatter(locale, getStringInternal("chatDate", R.string.chatDate), "d MMMM");
>         chatFullDate = createFormatter(locale, getStringInternal("chatFullDate", R.string.chatFullDate), "d MMMM yyyy");
>         formatterWeek = createFormatter(locale, getStringInternal("formatterWeek", R.string.formatterWeek), "EEE");
>         formatterWeekLong = createFormatter(locale, getStringInternal("formatterWeekLong", R.string.formatterWeekLong), "EEEE");
>         formatterScheduleDay = createFormatter(locale, getStringInternal("formatDateSchedule", R.string.formatDateSchedule), "MMM d");
>         formatterScheduleYear = createFormatter(locale, getStringInternal("formatDateScheduleYear", R.string.formatDateScheduleYear), "MMM d yyyy");
>         formatterDay = createFormatter(lang.toLowerCase().equals("ar") || lang.toLowerCase().equals("ko") ? locale : Locale.US, is24HourFormat ? getStringInternal("formatterDay24H", R.string.formatterDay24H) : getStringInternal("formatterDay12H", R.string.formatterDay12H), is24HourFormat ? "HH:mm" : "h:mm a");
>         formatterStats = createFormatter(locale, is24HourFormat ? getStringInternal("formatterStats24H", R.string.formatterStats24H) : getStringInternal("formatterStats12H", R.string.formatterStats12H), is24HourFormat ? "MMM dd yyyy, HH:mm" : "MMM dd yyyy, h:mm a");
>         formatterBannedUntil = createFormatter(locale, is24HourFormat ? getStringInternal("formatterBannedUntil24H", R.string.formatterBannedUntil24H) : getStringInternal("formatterBannedUntil12H", R.string.formatterBannedUntil12H), is24HourFormat ? "MMM dd yyyy, HH:mm" : "MMM dd yyyy, h:mm a");
>         formatterBannedUntilThisYear = createFormatter(locale, is24HourFormat ? getStringInternal("formatterBannedUntilThisYear24H", R.string.formatterBannedUntilThisYear24H) : getStringInternal("formatterBannedUntilThisYear12H", R.string.formatterBannedUntilThisYear12H), is24HourFormat ? "MMM dd, HH:mm" : "MMM dd, h:mm a");
>         formatterScheduleSend[0] = createFormatter(locale, getStringInternal("SendTodayAt", R.string.SendTodayAt), "'Send today at' HH:mm");
>         formatterScheduleSend[1] = createFormatter(locale, getStringInternal("SendDayAt", R.string.SendDayAt), "'Send on' MMM d 'at' HH:mm");
>         formatterScheduleSend[2] = createFormatter(locale, getStringInternal("SendDayYearAt", R.string.SendDayYearAt), "'Send on' MMM d yyyy 'at' HH:mm");
>         formatterScheduleSend[3] = createFormatter(locale, getStringInternal("RemindTodayAt", R.string.RemindTodayAt), "'Remind today at' HH:mm");
>         formatterScheduleSend[4] = createFormatter(locale, getStringInternal("RemindDayAt", R.string.RemindDayAt), "'Remind on' MMM d 'at' HH:mm");
>         formatterScheduleSend[5] = createFormatter(locale, getStringInternal("RemindDayYearAt", R.string.RemindDayYearAt), "'Remind on' MMM d yyyy 'at' HH:mm");
>         formatterScheduleSend[6] = createFormatter(locale, getStringInternal("StartTodayAt", R.string.StartTodayAt), "'Start today at' HH:mm");
>         formatterScheduleSend[7] = createFormatter(locale, getStringInternal("StartDayAt", R.string.StartDayAt), "'Start on' MMM d 'at' HH:mm");
>         formatterScheduleSend[8] = createFormatter(locale, getStringInternal("StartDayYearAt", R.string.StartDayYearAt), "'Start on' MMM d yyyy 'at' HH:mm");
>         formatterScheduleSend[9] = createFormatter(locale, getStringInternal("StartShortTodayAt", R.string.StartShortTodayAt), "'Today,' HH:mm");
>         formatterScheduleSend[10] = createFormatter(locale, getStringInternal("StartShortDayAt", R.string.StartShortDayAt), "MMM d',' HH:mm");
>         formatterScheduleSend[11] = createFormatter(locale, getStringInternal("StartShortDayYearAt", R.string.StartShortDayYearAt), "MMM d yyyy, HH:mm");
>         formatterScheduleSend[12] = createFormatter(locale, getStringInternal("StartsTodayAt", R.string.StartsTodayAt), "'Starts today at' HH:mm");
>         formatterScheduleSend[13] = createFormatter(locale, getStringInternal("StartsDayAt", R.string.StartsDayAt), "'Starts on' MMM d 'at' HH:mm");
>         formatterScheduleSend[14] = createFormatter(locale, getStringInternal("StartsDayYearAt", R.string.StartsDayYearAt), "'Starts on' MMM d yyyy 'at' HH:mm");
2172,2177d2037
<         if (ConfigManager.getBooleanOrFalse(Defines.showExactNumber)) {
<             if (rounded != null) {
<                 rounded[0] = number;
<             }
<             return String.valueOf(number);
<         }
2197c2057
<                 return String.format(Locale.US, "%d.%d%s", number, lastDec, K);
---
>                 return String.format(Locale.US, "%d.%d%s", number, lastDec, K.toString());
2203c2063
<             return String.format(Locale.US, "%d%s", number, K);
---
>             return String.format(Locale.US, "%d%s", number, K.toString());
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/LocationController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/LocationController.java
23,24d22
< import android.util.LongSparseArray;
< import android.util.SparseArray;
26a25,26
> import androidx.collection.LongSparseArray;
> 
82c82
<     private static SparseArray<LocationController> Instance = new SparseArray<>();
---
>     private static volatile LocationController[] Instance = new LocationController[UserConfig.MAX_ACCOUNT_COUNT];
85c85
<         LocationController localInstance = Instance.get(num);
---
>         LocationController localInstance = Instance[num];
88c88
<                 localInstance = Instance.get(num);
---
>                 localInstance = Instance[num];
90c90
<                     Instance.put(num, localInstance = new LocationController(num));
---
>                     Instance[num] = localInstance = new LocationController(num);
549c549
<         if (location != null && (SystemClock.elapsedRealtimeNanos() - location.getElapsedRealtimeNanos()) / 1000000000 > 60 * 5) {
---
>         if (location != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 && (SystemClock.elapsedRealtimeNanos() - location.getElapsedRealtimeNanos()) / 1000000000 > 60 * 5) {
845,846d844
<     // TFOSS it asks properly anyway
<     @SuppressLint("MissingPermission")
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
10a11
> import android.Manifest;
23a25
> import android.content.pm.PackageManager;
33a36
> import android.media.AudioDeviceInfo;
52a56
> import android.util.Log;
61a66,67
> import androidx.annotation.RequiresApi;
> 
97a104
> import java.util.List;
103,108d109
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.AudioUtils;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.PermissionUtils;
< 
565d565
<     private boolean currentPlaybackSpeed2xFake = false;
567d566
<     private boolean currentMusicPlaybackSpeed2xFake = false;
824c823
<                 if (PermissionUtils.isImagesPermissionGranted()) {
---
>                 if (ApplicationLoader.applicationContext.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
840c839
<                 if (PermissionUtils.isVideoPermissionGranted()) {
---
>                 if (ApplicationLoader.applicationContext.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
949d947
<                 currentPlaybackSpeed2xFake = MessagesController.getGlobalMainSettings().getBoolean("playbackSpeedFake2x", false);
951d948
<                 currentMusicPlaybackSpeed2xFake = MessagesController.getGlobalMainSettings().getBoolean("musicPlaybackSpeedFake2x", false);
2604,2607d2600
<         setPlaybackSpeed(music, speed, false);
<     }
< 
<     public void setPlaybackSpeed(boolean music, float speed, boolean fake2x) {
2609d2601
<             currentMusicPlaybackSpeed2xFake = fake2x;
2628d2619
<             currentPlaybackSpeed2xFake = fake2x;
2647,2651c2638
<         final float speed = music ? currentMusicPlaybackSpeed : currentPlaybackSpeed;
<         if (Math.abs(speed - 1.8f) < 0.01f && (music ? currentMusicPlaybackSpeed2xFake : currentPlaybackSpeed2xFake)) {
<             return 2f;
<         }
<         return speed;
---
>         return music ? currentMusicPlaybackSpeed : currentPlaybackSpeed;
2655,2659c2642
<         final float speed = music ? fastMusicPlaybackSpeed : fastPlaybackSpeed;
<         if (Math.abs(speed - 1.8f) < 0.01f && (music ? currentPlaybackSpeed2xFake : currentMusicPlaybackSpeed2xFake)) {
<             return 2f;
<         }
<         return speed;
---
>         return music ? fastMusicPlaybackSpeed : fastPlaybackSpeed;
3623d3605
<             if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
3625,3626c3607,3608
<         } catch (Exception e) {
<             Log.e(e);
---
>         } catch (Exception ignore) {
> 
3688d3669
<                 AudioUtils.INSTANCE.initVoiceEnhance(audioRecorder);
3699d3679
<                     AudioUtils.INSTANCE.releaseVoiceEnhance();
3814d3793
<             AudioUtils.INSTANCE.releaseVoiceEnhance();
3860d3838
<                 if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
3862,3863c3840,3841
<             } catch (Exception e) {
<                 Log.e(e);
---
>             } catch (Exception ignore) {
> 
4201c4179
<                             destFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), "Nullgram");
---
>                             destFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), "Telegram");
4205c4183
<                             destFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), "Nullgram");
---
>                             destFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), "Telegram");
4215c4193
<                             dir = new File(dir, "Nullgram");
---
>                             dir = new File(dir, "Telegram");
4340c4318
<                 File dirDest = new File(Environment.DIRECTORY_PICTURES, "Nullgram");
---
>                 File dirDest = new File(Environment.DIRECTORY_PICTURES, "Telegram");
4348c4326
<                 File dirDest = new File(Environment.DIRECTORY_MOVIES, "Nullgram");
---
>                 File dirDest = new File(Environment.DIRECTORY_MOVIES, "Telegram");
4356c4334
<                 File dirDest = new File(Environment.DIRECTORY_DOWNLOADS, "Nullgram");
---
>                 File dirDest = new File(Environment.DIRECTORY_DOWNLOADS, "Telegram");
4364c4342
<                 File dirDest = new File(Environment.DIRECTORY_MUSIC, "Nullgram");
---
>                 File dirDest = new File(Environment.DIRECTORY_MUSIC, "Telegram");
4616c4594
<                 if (Build.VERSION.SDK_INT < 23 || PermissionUtils.isImagesPermissionGranted()) {
---
>                 if (Build.VERSION.SDK_INT < 23 || ApplicationLoader.applicationContext.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
4698c4676
<                 if (Build.VERSION.SDK_INT < 23 || PermissionUtils.isVideoPermissionGranted()) {
---
>                 if (Build.VERSION.SDK_INT < 23 || ApplicationLoader.applicationContext.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java
36a37
> import android.util.Log;
68d68
< import org.telegram.ui.Components.EditTextBoldCursor;
93,96d92
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.EntitiesHelper;
< import top.qwq2333.nullgram.utils.Defines;
< 
809,812d804
<         return getRecentStickers(type, 0);
<     }
< 
<     public ArrayList<TLRPC.Document> getRecentStickers(int type, int padding) {
815,817d806
<             if (ConfigManager.getBooleanOrFalse(Defines.disablePremiumSticker)) {
<                 return new ArrayList<>();
<             } else {
820,821c809
<         }
<         return new ArrayList<>(arrayList.subList(0, Math.min(arrayList.size(), ConfigManager.getIntOrDefault(Defines.maxRecentSticker, 20))));
---
>         return new ArrayList<>(arrayList.subList(0, Math.min(arrayList.size(), 20)));
1919c1907
<         if (ConfigManager.getBooleanOrFalse(Defines.disableTrendingSticker) || (getUserConfig().getCurrentUser() != null && getUserConfig().getCurrentUser().bot) || loadingFeaturedStickers[emoji ? 1 : 0]) {
---
>         if (loadingFeaturedStickers[emoji ? 1 : 0]) {
6070,6071c6058
<     public void addStyle(TextStyleSpan.TextStyleRun styleRun, int spanStart, int spanEnd, ArrayList<TLRPC.MessageEntity> entities) {
<         int flags = styleRun.flags;
---
>     public void addStyle(int flags, int spanStart, int spanEnd, ArrayList<TLRPC.MessageEntity> entities) {
6078,6081c6065
<         if ((flags & TextStyleSpan.FLAG_STYLE_MONO) != 0) {
<             if (styleRun.urlEntity != null) {
<                 entities.add(setEntityStartEnd(styleRun.urlEntity, spanStart, spanEnd));
<             } else {
---
>         if ((flags & TextStyleSpan.FLAG_STYLE_MONO) != 0)
6083,6084d6066
<             }
<         }
6111c6092
<         while (!(ConfigManager.getBooleanOrDefault(Defines.newMarkdownParser, true) || EditTextBoldCursor.disableMarkdown) && (index = TextUtils.indexOf(message[0], !isPre ? mono : pre, lastIndex)) != -1) {
---
>         while ((index = TextUtils.indexOf(message[0], !isPre ? mono : pre, lastIndex)) != -1) {
6177,6178d6157
<         if (!EditTextBoldCursor.disableMarkdown && ConfigManager.getBooleanOrDefault(Defines.newMarkdownParser, true)) EntitiesHelper.parseMarkdown(message, allowStrike);
< 
6193c6172
<                     addStyle(span.getTextStyleRun(), spanStart, spanEnd, entities);
---
>                     addStyle(span.getStyleFlags(), spanStart, spanEnd, entities);
6229c6208
<                         addStyle(style, entity.offset, entity.offset + entity.length, entities);
---
>                         addStyle(style.flags, entity.offset, entity.offset + entity.length, entities);
6279d6257
<         if (ConfigManager.getBooleanOrDefault(Defines.newMarkdownParser, true) || EditTextBoldCursor.disableMarkdown) return entities;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
30,31c30
< import android.util.Pair;
< import android.view.View;
---
> import android.util.Log;
65d63
< import java.lang.ref.WeakReference;
79,82d76
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.ui.syntaxhighlight.SyntaxHighlight;
< import top.qwq2333.nullgram.utils.Defines;
< 
179,181c173
<     public AtomicReference<WeakReference<View>> viewRef = new AtomicReference<>(null);
< 
<     public boolean isSpoilersRevealed = ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly);
---
>     public boolean isSpoilersRevealed;
271,275d262
<     public boolean translating;
<     public boolean translated;
<     public Pair<String, String> translatedLanguage;
<     public Object originalMessage;
< 
320,321d306
<         if (ConfigManager.getBooleanOrFalse(Defines.hidePremiumStickerAnim))
<             return false;
377c362
<         return messageOwner.media != null && messageOwner.media.spoiler && !ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly);
---
>         return messageOwner.media != null && messageOwner.media.spoiler;
479,480c464,465
<         private final ArrayList<String> emails = new ArrayList<>();
<         private final ArrayList<String> phones = new ArrayList<>();
---
>         private ArrayList<String> emails = new ArrayList<>();
>         private ArrayList<String> phones = new ArrayList<>();
1260,1261c1245
<                     emoji =
<                         emoji.toString() + messageText.subSequence(index + 2, messageText.length());
---
>                     emoji = emoji.toString() + messageText.subSequence(index + 2, messageText.length()).toString();
1755,1757c1739
<                     bannedDuration = new StringBuilder(
<                         LocaleController.getString("UserRestrictionsUntilForever",
<                             R.string.UserRestrictionsUntilForever));
---
>                     bannedDuration = new StringBuilder(LocaleController.getString("UserRestrictionsUntilForever", R.string.UserRestrictionsUntilForever));
1759,1760c1741
<                 String str = LocaleController.getString("EventLogRestrictedUntil",
<                     R.string.EventLogRestrictedUntil);
---
>                 String str = LocaleController.getString("EventLogRestrictedUntil", R.string.EventLogRestrictedUntil);
1762,1764c1743
<                 rights = new StringBuilder(
<                     String.format(str, getUserName(whoUser, messageOwner.entities, offset),
<                         bannedDuration));
---
>                 rights = new StringBuilder(String.format(str, getUserName(whoUser, messageOwner.entities, offset), bannedDuration.toString()));
2036,2038c2015
<                     messageText = replaceWithLink(
<                         LocaleController.getString("EventLogEditedMediaCaption",
<                             R.string.EventLogEditedMediaCaption), "un1", fromUser);
---
>                     messageText = replaceWithLink(LocaleController.getString("EventLogEditedMediaCaption", R.string.EventLogEditedMediaCaption), "un1", fromUser);
2040,2042c2017
<                     messageText = replaceWithLink(
<                         LocaleController.getString("EventLogEditedCaption",
<                             R.string.EventLogEditedCaption), "un1", fromUser);
---
>                     messageText = replaceWithLink(LocaleController.getString("EventLogEditedCaption", R.string.EventLogEditedCaption), "un1", fromUser);
2044,2045c2019
<                     messageText = replaceWithLink(LocaleController.getString("EventLogEditedMedia",
<                         R.string.EventLogEditedMedia), "un1", fromUser);
---
>                     messageText = replaceWithLink(LocaleController.getString("EventLogEditedMedia", R.string.EventLogEditedMedia), "un1", fromUser);
2583a2558
>     public boolean translated = false;
2585c2560,2561
< /*        boolean replyUpdated = replyMessageObject != null && replyMessageObject.updateTranslation(force);
---
>         boolean replyUpdated = replyMessageObject != null && replyMessageObject.updateTranslation(force);
>         TranslateController translateController = MessagesController.getInstance(currentAccount).getTranslateController();
2606,2607c2582
<         return replyUpdated || false;*/
<         return true;
---
>         return replyUpdated || false;
2611c2586
< //        translated = false;
---
>         translated = false;
3174,3180c3149
<     public boolean isSenderChannel() {
<         return messageOwner.from_id instanceof TLRPC.TL_peerChannel;
<     }
< 
< 
<     private TLRPC.Chat getChat(AbstractMap<Long, TLRPC.Chat> chats,
<         LongSparseArray<TLRPC.Chat> sChats, long chatId) {
---
>     private TLRPC.Chat getChat(AbstractMap<Long, TLRPC.Chat> chats, LongSparseArray<TLRPC.Chat> sChats, long chatId) {
4232,4233c4201,4202
<                 } else {
<                     return fileName.endsWith(".svg");
---
>                 } else if (fileName.endsWith(".svg")) {
>                     return true;
4253c4222,4224
<             return round && width <= 1280 && height <= 1280;
---
>             if (round && width <= 1280 && height <= 1280) {
>                 return true;
>             }
4272,4273c4243,4245
<             /*animated && */
<             return width <= 1280 && height <= 1280;
---
>             if (/*animated && */width <= 1280 && height <= 1280) {
>                 return true;
>             }
4292c4264,4266
<             return animated && width <= 1280 && height <= 1280;
---
>             if (animated && width <= 1280 && height <= 1280) {
>                 return true;
>             }
4742c4716
<         if (caption != null && false == captionTranslated || isRoundVideo()) {
---
>         if (caption != null && translated == captionTranslated || isRoundVideo()) {
4750c4724
<         if (captionTranslated = false) {
---
>         if (captionTranslated = translated) {
4878,4880c4852
<                             url = new URLSpanNoUnderline(
<                                 "https://instagram.com/" + charSequence.subSequence(start + 1,
<                                     end));
---
>                             url = new URLSpanNoUnderline("https://instagram.com/" + charSequence.subSequence(start + 1, end).toString());
4882,4883c4854
<                             url = new URLSpanNoUnderline("https://www.instagram.com/explore/tags/"
<                                 + charSequence.subSequence(start + 1, end));
---
>                             url = new URLSpanNoUnderline("https://www.instagram.com/explore/tags/" + charSequence.subSequence(start + 1, end).toString());
4887,4888c4858
<                             url = new URLSpanNoUnderline(
<                                 "https://twitter.com/" + charSequence.subSequence(start + 1, end));
---
>                             url = new URLSpanNoUnderline("https://twitter.com/" + charSequence.subSequence(start + 1, end).toString());
4890,4892c4860
<                             url = new URLSpanNoUnderline(
<                                 "https://twitter.com/hashtag/" + charSequence.subSequence(start + 1,
<                                     end));
---
>                             url = new URLSpanNoUnderline("https://twitter.com/hashtag/" + charSequence.subSequence(start + 1, end).toString());
4901,4907d4868
<                             if (charSequence.charAt(start) == '#') {
<                                 var run = new TextStyleSpan.TextStyleRun();
<                                 run.start = start;
<                                 run.end = end;
<                                 run.urlEntity = new TLRPC.TL_messageEntityHashtag();
<                                 SyntaxHighlight.highlight(run, spannable);
<                             }
5051c5012
<         if (!(text instanceof Spannable) || ConfigManager.getBooleanOrFalse(Defines.useSystemEmoji)) {
---
>         if (!(text instanceof Spannable)) {
5215d5175
<                 newRun.urlEntity = entity;
5324,5326d5283
<                 if (run.urlEntity instanceof TLRPC.TL_messageEntityHashtag) {
<                     SyntaxHighlight.highlight(run, spannable);
<                 }
5355,5357d5311
<                 if (run.urlEntity instanceof TLRPC.TL_messageEntityPre) {
<                     SyntaxHighlight.highlight(run, spannable);
<                 }
6099c6053,6056
<         return SharedConfig.streamMkv && "video/x-matroska".equals(document.mime_type);
---
>         if (SharedConfig.streamMkv && "video/x-matroska".equals(document.mime_type)) {
>             return true;
>         }
>         return false;
6284,6285c6241,6243
<                 if (mime.equals("audio/flac") || mime.equals("audio/ogg") || mime.equals(
<                     "audio/opus") || mime.equals("audio/x-opus+ogg")) {
---
>                 if (mime.equals("audio/flac") || mime.equals("audio/ogg") || mime.equals("audio/opus") || mime.equals("audio/x-opus+ogg")) {
>                     return true;
>                 } else if (mime.equals("application/octet-stream") && FileLoader.getDocumentFileName(document).endsWith(".opus")) {
6287,6289d6244
<                 } else {
<                     return mime.equals("application/octet-stream")
<                         && FileLoader.getDocumentFileName(document).endsWith(".opus");
7183,7184c7138
<             chat = MessagesController.getInstance(UserConfig.selectedAccount)
<                 .getChat(message.peer_id.channel_id);
---
>             chat = MessagesController.getInstance(UserConfig.selectedAccount).getChat(message.peer_id.channel_id);
7189,7190c7143,7146
<         if (ChatObject.isChannel(chat) && !chat.megagroup && (chat.creator
<             || chat.admin_rights != null && chat.admin_rights.edit_messages)) {
---
>         if (ChatObject.isChannel(chat) && !chat.megagroup && (chat.creator || chat.admin_rights != null && chat.admin_rights.edit_messages)) {
>             return true;
>         }
>         if (message.out && chat != null && chat.megagroup && (chat.creator || chat.admin_rights != null && chat.admin_rights.pin_messages || chat.default_banned_rights != null && !chat.default_banned_rights.pin_messages)) {
7193,7195d7148
<         return message.out && chat != null && chat.megagroup && (chat.creator
<             || chat.admin_rights != null && chat.admin_rights.pin_messages
<             || chat.default_banned_rights != null && !chat.default_banned_rights.pin_messages);
7196a7150
>         return false;
7209c7163,7166
<         return chat.admin_rights != null && (chat.admin_rights.edit_messages || message.out);
---
>         if (chat.admin_rights != null && (chat.admin_rights.edit_messages || message.out)) {
>             return true;
>         }
>         return false;
7782,7801d7738
<     }
< 
<     public boolean isBlockedMessage() {
<         var messagesController = MessagesController.getInstance(UserConfig.selectedAccount);
<         if (isSponsored() && ConfigManager.getBooleanOrFalse(Defines.blockSponsorAds))
<             return true;
<         if (ConfigManager.getBooleanOrFalse(Defines.ignoreBlockedUser)) {
<             var chatFull = messagesController.getChatFull(getFromChatId());
<             if (chatFull != null && chatFull.blocked) {
<                 return true;
<             }
<             if (messagesController.blockePeers.indexOfKey(getFromChatId()) >= 0) {
<                 return true;
<             }
<             if (messageOwner.fwd_from != null && messageOwner.fwd_from.from_id != null
<                 && messagesController.blockePeers.indexOfKey(MessageObject.getPeerId(messageOwner.fwd_from.from_id)) >= 0) {
<                 return true;
<             }
<         }
<         return false;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
29a30
> import android.util.Log;
91,93d91
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
963d960
<         public String emoticon;
7293,7297d7289
<                 SharedConfig.ProxyInfo proxy = SharedConfig.currentProxy;
<                 if (res.proxy && (ConfigManager.getBooleanOrFalse(Defines.hideProxySponsorChannel) || (proxy != null && proxy.subId == 1L))) {
<                     nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 60 * 60;
<                     noDialog = true;
<                 } else {
7473a7466
>                                             getTranslateController().checkDialogMessage(did);
7500d7492
<                 }
7759,7761d7749
<         if (ConfigManager.getBooleanOrFalse(Defines.disableSendTyping)) {
<             return false;
<         }
16431,16437d16418
< 
<         if (ConfigManager.getBooleanOrFalse(Defines.ignoreReactionMention)) {
<             for (int i = 0; i < unreadReactions.size(); i++) {
<                 markReactionsAsRead(unreadReactions.keyAt(i), topicId);
<             }
<             return;
<         }
16596,16614d16576
<         if (chat != null && !ChatObject.canSendAsPeers(chat) && ConfigManager.getBooleanOrFalse(Defines.quickToggleAnonymous)) {
<             var result = new TLRPC.TL_channels_sendAsPeers();
<             var userID = UserConfig.getInstance(UserConfig.selectedAccount).getCurrentUser().id;
< 
<             result.isModifiedByQuickToggleAnonymous = true;
< 
<             result.peers.add(0, new TLRPC.TL_sendAsPeer() {{
<                 peer = new TLRPC.TL_peerChannel() {{
<                     channel_id = chat.id;
<                 }};
<             }});
<             result.peers.add(1, new TLRPC.TL_sendAsPeer() {{
<                 peer = new TLRPC.TL_peerUser() {{
<                     user_id = userID;
<                 }};
<             }});
< 
<             return result;
<         }
17257c17219
<         if (reasons.isEmpty() || ConfigManager.getBooleanOrFalse(Defines.showHiddenSettings)) {
---
>         if (reasons.isEmpty()) {
17262c17224
<             if ("all".equals(reason.platform) || ("android".equals(reason.platform) && BuildConfig.isPlay)) {
---
>             if ("all".equals(reason.platform) || !BuildVars.isStandaloneApp() && !BuildVars.isBetaApp() && "android".equals(reason.platform)) {
17794,17815d17755
<     }
< 
< 
<     public void loadTabDialogs(MessagesController.DialogFilter dialogFilter) {
<         sortingDialogFilter = dialogFilter;
<         Collections.sort(allDialogs, dialogDateComparator);
<         ArrayList<TLRPC.Dialog> dialogsByFilter = sortingDialogFilter.dialogs;
<         for (int a = 0, N = allDialogs.size(); a < N; a++) {
<             TLRPC.Dialog d = allDialogs.get(a);
<             if (d instanceof TLRPC.TL_dialog) {
<                 long dialogId = d.id;
<                 if (DialogObject.isEncryptedDialog(dialogId)) {
<                     TLRPC.EncryptedChat encryptedChat = getEncryptedChat(DialogObject.getEncryptedChatId(dialogId));
<                     if (encryptedChat != null) {
<                         dialogId = encryptedChat.user_id;
<                     }
<                 }
<                 if (sortingDialogFilter.includesDialog(getAccountInstance(), dialogId, d)) {
<                     dialogsByFilter.add(d);
<                 }
<             }
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
56,59d55
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< 
349c345
<                 if (version < LAST_DB_VERSION || !ConfigManager.getBooleanOrFalse(Defines.hasUpdateDialogFilterDatabase)) {
---
>                 if (version < LAST_DB_VERSION) {
547c543
<         database.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT, emoticon TEXT)").stepThis().dispose();
---
>         database.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
692,705d687
<         try {
<             var result = database.queryFinalized("SELECT COUNT(*) FROM pragma_table_info('dialog_filter') WHERE name = 'emoticon';");
<             if (result.next()) {
<                 var count = result.intValue(0);
<                 Log.i("emoticon column count = " + count);
<                 if (count == 0) {
<                     database.executeFast("ALTER TABLE dialog_filter ADD COLUMN emoticon TEXT").stepThis().dispose();
<                 }
<             }
<             ConfigManager.putBoolean(Defines.hasUpdateDialogFilterDatabase, true);
<         } catch (Exception e) {
<             Log.e(e);
<         }
< 
2203c2185
<                 filtersCursor = database.queryFinalized("SELECT id, ord, unread_count, flags, title, emoticon FROM dialog_filter WHERE 1");
---
>                 filtersCursor = database.queryFinalized("SELECT id, ord, unread_count, flags, title FROM dialog_filter WHERE 1");
2214d2195
<                     filter.emoticon = filtersCursor.stringValue(5);
2283c2264
<                     state = database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
---
>                     state = database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?)");
2289,2293d2269
<                     if (filter.emoticon != null) {
<                         state.bindString(6, filter.emoticon);
<                     } else {
<                         state.bindNull(6);
<                     }
2535,2537d2510
<                     if (ConfigManager.getBooleanOrFalse(Defines.ignoreMutedCount) && (flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
<                         flags |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
<                     }
2768c2741
<             state = database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
---
>             state = database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?)");
2774,2778d2746
<             if (filter.emoticon != null) {
<                 state.bindString(6, filter.emoticon);
<             } else {
<                 state.bindNull(6);
<             }
2918,2922d2885
<                         if (!TextUtils.equals(filter.emoticon, newFilter.emoticon)) {
<                             changed = true;
<                             filter.emoticon = newFilter.emoticon;
<                         }
< 
3057d3019
<                         filter.emoticon = newFilter.emoticon;
5250,5252d5211
<                 if (ConfigManager.getBooleanOrFalse(Defines.ignoreMutedCount) && (flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
<                     flags |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
<                 }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
21a22
> import java.util.HashMap;
29d29
<     public static final int onUpdateLoginToken = totalEvents++;
319,320c319,320
<         private final int id;
<         private final Object[] args;
---
>         private int id;
>         private Object[] args;
323c323
<     private final int currentAccount;
---
>     private int currentAccount;
325c325
<     private static final NotificationCenter[] Instance = new NotificationCenter[UserConfig.MAX_ACCOUNT_COUNT];
---
>     private static volatile NotificationCenter[] Instance = new NotificationCenter[UserConfig.MAX_ACCOUNT_COUNT];
549a550,554
>         if (BuildVars.DEBUG_VERSION) {
>             if (Thread.currentThread() != ApplicationLoader.applicationHandler.getLooper().getThread()) {
>                 throw new RuntimeException("postNotificationName allowed only from MAIN thread");
>             }
>         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/NotificationImageProvider.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/NotificationImageProvider.java
109,116d108
<             if (ApplicationLoader.applicationContext == null) {
<                 try {
<                     ApplicationLoader.countDownLatch.await();
<                 } catch (InterruptedException e) {
<                     e.printStackTrace();
<                 }
<             }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
59a60,61
> import com.google.android.exoplayer2.util.Log;
> 
71a74
> import java.util.HashMap;
79,81d81
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
87,92c87,92
<     private static final DispatchQueue notificationsQueue = new DispatchQueue("notificationsQueue");
<     private final ArrayList<MessageObject> pushMessages = new ArrayList<>();
<     private final ArrayList<MessageObject> delayedPushMessages = new ArrayList<>();
<     private final LongSparseArray<SparseArray<MessageObject>> pushMessagesDict = new LongSparseArray<>();
<     private final LongSparseArray<MessageObject> fcmRandomMessagesDict = new LongSparseArray<>();
<     private final LongSparseArray<Point> smartNotificationsDialogs = new LongSparseArray<>();
---
>     private static DispatchQueue notificationsQueue = new DispatchQueue("notificationsQueue");
>     private ArrayList<MessageObject> pushMessages = new ArrayList<>();
>     private ArrayList<MessageObject> delayedPushMessages = new ArrayList<>();
>     private LongSparseArray<SparseArray<MessageObject>> pushMessagesDict = new LongSparseArray<>();
>     private LongSparseArray<MessageObject> fcmRandomMessagesDict = new LongSparseArray<>();
>     private LongSparseArray<Point> smartNotificationsDialogs = new LongSparseArray<>();
95,98c95,98
<     private final LongSparseArray<Integer> pushDialogs = new LongSparseArray<>();
<     private final LongSparseArray<Integer> wearNotificationsIds = new LongSparseArray<>();
<     private final LongSparseArray<Integer> lastWearNotifiedMessageId = new LongSparseArray<>();
<     private final LongSparseArray<Integer> pushDialogsOverrideMention = new LongSparseArray<>();
---
>     private LongSparseArray<Integer> pushDialogs = new LongSparseArray<>();
>     private LongSparseArray<Integer> wearNotificationsIds = new LongSparseArray<>();
>     private LongSparseArray<Integer> lastWearNotifiedMessageId = new LongSparseArray<>();
>     private LongSparseArray<Integer> pushDialogsOverrideMention = new LongSparseArray<>();
101c101
<     private final HashSet<Long> openedInBubbleDialogs = new HashSet<>();
---
>     private HashSet<Long> openedInBubbleDialogs = new HashSet<>();
124c124
<     private final Runnable notificationDelayRunnable;
---
>     private Runnable notificationDelayRunnable;
139,140c139,140
<     private final int notificationId;
<     private final String notificationGroup;
---
>     private int notificationId;
>     private String notificationGroup;
924c924
<                 if (messageObject.isReactionPush && ConfigManager.getBooleanOrFalse(Defines.ignoreReactionMention)) {
---
>                 if (messageObject.isReactionPush) {
2001,2003d2000
<         if (ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly)) {
<             return stringBuilder.toString();
<         }
3266c3263
<                         newSettings.append(channelSound);
---
>                         newSettings.append(channelSound.toString());
3384c3381
<                 newSettings.append(sound);
---
>                 newSettings.append(sound.toString());
4095a4092,4094
>                 if (BuildVars.LOGS_ENABLED) {
>                     FileLog.w("show dialog notification with id " + id + " " + dialogId +  " user=" + user + " chat=" + chat);
>                 }
Only in TMessagesProj/src/main/java/org/telegram/messenger: OSMDroidMapsProvider.java
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileDataSource.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/secretmedia/EncryptedFileDataSource.java
22a22,23
> import com.google.android.exoplayer2.util.Assertions;
> import com.google.android.exoplayer2.util.Log;
24a26,27
> import org.telegram.messenger.FileLog;
> import org.telegram.messenger.Utilities;
25a29
> import java.io.EOFException;
26a31
> import java.io.FileInputStream;
27a33,35
> import java.io.RandomAccessFile;
> import java.nio.charset.StandardCharsets;
> import java.util.Base64;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
94,96d93
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
3928c3925
<                     if (!ConfigManager.getBooleanOrDefault(Defines.disableStickersAutoReorder, true) && updateStickersOrder && SharedConfig.updateStickersOrderOnSend) {
---
>                     if (updateStickersOrder && SharedConfig.updateStickersOrderOnSend) {
4322c4319
<                         if (!ConfigManager.getBooleanOrDefault(Defines.disableStickersAutoReorder, true) && updateStickersOrder && SharedConfig.updateStickersOrderOnSend) {
---
>                         if (updateStickersOrder && SharedConfig.updateStickersOrderOnSend) {
8207c8204
<                 } catch (Exception ignore) {
---
>                 } catch (Throwable ex) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/SharedConfig.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/SharedConfig.java
15a16
> import android.content.pm.PackageInfo;
24d24
< import androidx.annotation.Nullable;
27d26
< import org.json.JSONException;
47d45
< import java.util.LinkedList;
51,58d48
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.WebSocketHelper;
< import top.qwq2333.nullgram.utils.AlertUtil;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.StringUtils;
< import top.qwq2333.nullgram.utils.UIUtil;
< 
149,150d138
<     public static boolean playEmojiInKeyboard;
<     public static boolean loopStickers;
164,165c152
<     public static boolean useLNavigation;
<     public static boolean updateStickersOrderOnSend = ConfigManager.getBooleanOrFalse(Defines.disableStickersAutoReorder);
---
>     public static boolean updateStickersOrderOnSend = true;
264,266c251
<     public static class ProxyInfo implements Comparable<ProxyInfo> {
< 
<         public int group;
---
>     public static class ProxyInfo {
280,303d264
<         @Override
<         public int compareTo(ProxyInfo info) {
< 
<             if (available && !info.available) {
<                 return -1;
<             } else if (!available && info.available) {
<                 return 1;
<             } else if (available && info.available) {
<                 return (int) (ping - info.ping);
<             } else {
<                 return hashCode() + "".compareTo(info.hashCode() + "");
<             }
< 
<         }
< 
<         public long subId;
< 
<         public ProxyInfo() {
<             address = "";
<             password = "";
<             username = "";
<             secret = "";
<         }
< 
324,458d284
<         public String getAddress() {
< 
<             return address + ":" + port;
< 
<         }
< 
<         public String getType() {
< 
<             if (!StringUtils.isBlank(secret)) {
< 
<                 return "MTProto";
< 
<             } else {
< 
<                 return "Socks5";
< 
<             }
< 
<         }
< 
<         private String remarks;
< 
<         public String getRemarks() {
< 
<             return remarks;
< 
<         }
< 
<         public void setRemarks(String remarks) {
<             this.remarks = remarks;
<             if (StringUtils.isBlank(remarks)) {
<                 this.remarks = null;
<             }
<         }
< 
<         public JSONObject toJsonInternal() throws JSONException {
< 
<             JSONObject obj = new JSONObject();
< 
<             if (!StringUtils.isBlank(remarks)) {
<                 obj.put("remarks", remarks);
<             }
< 
<             if (group != 0) {
<                 obj.put("group", group);
<             }
< 
<             obj.put("address", address);
<             obj.put("port", port);
<             if (StringUtils.isBlank(secret)) {
<                 obj.put("type", "socks5");
<                 if (!username.isEmpty()) {
<                     obj.put("username", username);
<                 }
<                 if (!password.isEmpty()) {
<                     obj.put("password", password);
<                 }
<             } else {
<                 obj.put("type", "mtproto");
<                 obj.put("secret", secret);
<             }
< 
<             return obj;
< 
<         }
< 
<         public static ProxyInfo fromJson(JSONObject obj) {
< 
<             ProxyInfo info;
< 
<             switch (obj.optString("type", "null")) {
< 
<                 case "socks5": {
< 
<                     info = new ProxyInfo();
< 
<                     info.group = obj.optInt("group", 0);
<                     info.address = obj.optString("address", "");
<                     info.port = obj.optInt("port", 443);
<                     info.username = obj.optString("username", "");
<                     info.password = obj.optString("password", "");
< 
<                     info.remarks = obj.optString("remarks");
< 
<                     if (StringUtils.isBlank(info.remarks)) info.remarks = null;
< 
<                     info.group = obj.optInt("group", 0);
< 
<                     break;
< 
<                 }
< 
<                 case "mtproto": {
< 
<                     info = new ProxyInfo();
< 
<                     info.address = obj.optString("address", "");
<                     info.port = obj.optInt("port", 443);
<                     info.secret = obj.optString("secret", "");
< 
<                     info.remarks = obj.optString("remarks");
< 
<                     if (StringUtils.isBlank(info.remarks)) info.remarks = null;
< 
<                     info.group = obj.optInt("group", 0);
< 
<                     break;
< 
<                 }
< 
< 
<                 default: {
< 
<                     throw new IllegalStateException("invalid proxy type " + obj.optString("type", "null"));
< 
<                 }
< 
<             }
< 
<             return info;
< 
<         }
< 
<         @Override
<         public int hashCode() {
< 
<             return (address + port + username + password + secret).hashCode();
< 
<         }
< 
<         @Override
<         public boolean equals(@Nullable Object obj) {
<             return super.equals(obj) || (obj instanceof ProxyInfo && hashCode() == obj.hashCode());
<         }
< 
477,602c303
<     public static boolean proxyEnabled;
< 
<     public static void setProxyEnable(boolean enable) {
< 
<         proxyEnabled = enable;
< 
<         SharedPreferences preferences = MessagesController.getGlobalMainSettings();
< 
<         preferences.edit().putBoolean("proxy_enabled", enable).commit();
< 
<         ProxyInfo info = currentProxy;
< 
<         if (info == null) {
< 
<             info = new ProxyInfo();
< 
<         }
< 
<         ProxyInfo finalInfo = info;
< 
<         UIUtil.runOnIoDispatcher(() -> {
< 
<             try {
< 
<                 if (enable && finalInfo instanceof ExternalSocks5Proxy) {
< 
<                     ((ExternalSocks5Proxy) finalInfo).start();
< 
<                 } else if (!enable && finalInfo instanceof ExternalSocks5Proxy) {
< 
<                     ((ExternalSocks5Proxy) finalInfo).stop();
< 
<                 }
< 
<             } catch (Exception e) {
< 
<                 FileLog.e(e);
<                 AlertUtil.showToast(e);
< 
<                 return;
< 
<             }
< 
<             ConnectionsManager.setProxySettings(enable, finalInfo.address, finalInfo.port, finalInfo.username, finalInfo.password, finalInfo.secret);
< 
<             UIUtil.runOnUIThread(() -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.proxySettingsChanged));
< 
<         });
< 
<     }
< 
< 
<     public static void reloadProxyList(boolean changedBackend) {
<         proxyListLoaded = false;
<         loadProxyList(changedBackend);
< 
<     }
< 
<     public static LinkedList<ProxyInfo> proxyList = new LinkedList<>();
< 
<     public static LinkedList<ProxyInfo> getProxyList() {
< 
<         while (true) {
< 
<             try {
< 
<                 return new LinkedList<>(proxyList);
< 
<             } catch (Exception ignored) {
<             }
< 
<         }
< 
<     }
< 
< 
<     public abstract static class ExternalSocks5Proxy extends ProxyInfo {
< 
<         public ExternalSocks5Proxy() {
< 
<             address = "127.0.0.1";
<             username = "";
<             password = "";
<             secret = "";
< 
<         }
< 
<         public abstract boolean isStarted();
< 
<         public abstract void start();
< 
<         public abstract void stop();
< 
<         @Override
<         public abstract String getAddress();
< 
<         @Override
<         public abstract String getRemarks();
< 
<         @Override
<         public abstract void setRemarks(String remarks);
< 
<         @Override
<         public abstract String getType();
< 
<         @Override
<         public abstract JSONObject toJsonInternal() throws JSONException;
< 
<     }
< 
<     public static void setCurrentProxy(@Nullable ProxyInfo info) {
< 
<         if (currentProxy instanceof ExternalSocks5Proxy && !currentProxy.equals(info)) {
<             ((ExternalSocks5Proxy) currentProxy).stop();
<         }
< 
<         currentProxy = info;
< 
<         MessagesController.getGlobalMainSettings().edit()
<             .putInt("current_proxy", info == null ? 0 : info.hashCode())
<             .apply();
< 
<         setProxyEnable(info != null);
< 
<     }
< 
---
>     public static ArrayList<ProxyInfo> proxyList = new ArrayList<>();
737,739c438,453
<                     int currentVersion = BuildConfig.VERSION_CODE;
<                     String updateVersionString = BuildConfig.VERSION_NAME;
<                     if (pendingAppUpdateBuildVersion != currentVersion || pendingAppUpdate.version == null || updateVersionString.compareTo("v" + pendingAppUpdate.version) >= 0) {
---
>                     int updateVersion = 0;
>                     String updateVersionString = null;
>                     try {
>                         PackageInfo packageInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
>                         updateVersion = packageInfo.versionCode;
>                         updateVersionString = packageInfo.versionName;
>                     } catch (Exception e) {
>                         FileLog.e(e);
>                     }
>                     if (updateVersion == 0) {
>                         updateVersion = BuildVars.BUILD_VERSION;
>                     }
>                     if (updateVersionString == null) {
>                         updateVersionString = BuildVars.BUILD_VERSION_STRING;
>                     }
>                     if (pendingAppUpdateBuildVersion != updateVersion || pendingAppUpdate.version == null || updateVersionString.compareTo(pendingAppUpdate.version) >= 0 || BuildVars.DEBUG_PRIVATE_VERSION) {
809c523
<             updateStickersOrderOnSend = ConfigManager.getBooleanOrFalse(Defines.disableStickersAutoReorder);
---
>             updateStickersOrderOnSend = preferences.getBoolean("updateStickersOrderOnSend", true);
902c616
<         if (pendingAppUpdate == null || pendingAppUpdate.document == null) {
---
>         if (pendingAppUpdate == null || pendingAppUpdate.document == null || !BuildVars.isStandaloneApp()) {
905c619,627
<         return pendingAppUpdateBuildVersion == BuildConfig.VERSION_CODE;
---
>         int currentVersion;
>         try {
>             PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
>             currentVersion = pInfo.versionCode;
>         } catch (Exception e) {
>             FileLog.e(e);
>             currentVersion = BuildVars.BUILD_VERSION;
>         }
>         return pendingAppUpdateBuildVersion == currentVersion;
909,912c631,646
<         if (update == null) {
<             pendingAppUpdate = null;
<             pendingAppUpdateBuildVersion = 0;
<             saveConfig();
---
>         String updateVersionString = null;
>         int versionCode = 0;
>         try {
>             PackageInfo packageInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
>             versionCode = packageInfo.versionCode;
>             updateVersionString = packageInfo.versionName;
>         } catch (Exception e) {
>             FileLog.e(e);
>         }
>         if (versionCode == 0) {
>             versionCode = BuildVars.BUILD_VERSION;
>         }
>         if (updateVersionString == null) {
>             updateVersionString = BuildVars.BUILD_VERSION_STRING;
>         }
>         if (update.version == null || updateVersionString.compareTo(update.version) >= 0) {
916c650
<         pendingAppUpdateBuildVersion = BuildConfig.VERSION_CODE;
---
>         pendingAppUpdateBuildVersion = versionCode;
1079,1080c813,816
<         updateStickersOrderOnSend = !updateStickersOrderOnSend;
<         ConfigManager.putBoolean(Defines.disableStickersAutoReorder, !ConfigManager.getBooleanOrDefault(Defines.disableStickersAutoReorder, true));
---
>         SharedPreferences preferences = MessagesController.getGlobalMainSettings();
>         SharedPreferences.Editor editor = preferences.edit();
>         editor.putBoolean("updateStickersOrderOnSend", updateStickersOrderOnSend = !updateStickersOrderOnSend);
>         editor.apply();
1157,1164d892
<     public static void togglePlayEmojiInKeyboard() {
<         playEmojiInKeyboard = !playEmojiInKeyboard;
<         SharedPreferences preferences = MessagesController.getGlobalMainSettings();
<         SharedPreferences.Editor editor = preferences.edit();
<         editor.putBoolean("playEmojiInKeyboard", playEmojiInKeyboard);
<         editor.commit();
<     }
< 
1399,1402d1126
<         loadProxyList(false);
<     }
< 
<     public static void loadProxyList(boolean changedBackend) {
1428,1431c1152,1153
<                         ProxyInfo info = null;
<                         try {
<                             info = new ProxyInfo(
<                                 data.readString(true),
---
>                         ProxyInfo info = new ProxyInfo(
>                                 data.readString(false),
1436,1441d1157
<                         } catch (RuntimeException e) {
<                             // Compatible with versions between 9.5.7 and 9.5.8
<                             Log.e("Failed to load proxy info, skipping", e);
<                             saveProxyList();
<                             continue;
<                         }
1478,1481d1193
<         if (!WebSocketHelper.proxyServer.equals(proxyAddress)) {
<             ProxyInfo info = new ProxyInfo(WebSocketHelper.proxyServer, 6356, "", "", "");
<             proxyList.add(0, info);
<         }
1501c1213
<         serializedData.writeInt32(count - 1);
---
>         serializedData.writeInt32(count);
1504,1506d1215
<             if (WebSocketHelper.proxyServer.equals(info.address)) {
<                 continue;
<             }
1564,1565c1273,1274
<                 File telegramPath = new File(Environment.getExternalStorageDirectory(), "Nullgram");
<                 File imagePath = new File(telegramPath, "Nullgram Images");
---
>                 File telegramPath = new File(Environment.getExternalStorageDirectory(), "Telegram");
>                 File imagePath = new File(telegramPath, "Telegram Images");
1567c1276
<                 File videoPath = new File(telegramPath, "Nullgram Video");
---
>                 File videoPath = new File(telegramPath, "Telegram Video");
1639,1640c1348
<     public @interface PerformanceClass {
<     }
---
>     public @interface PerformanceClass {}
1644,1646d1351
<         if (ConfigManager.getIntOrDefault(Defines.devicePerformance, Defines.devicePerformanceAuto) != Defines.devicePerformanceAuto) {
<             return ConfigManager.getIntOrDefault(Defines.devicePerformance, Defines.devicePerformanceAuto);
<         }
1803a1510,1513
>     public static boolean deviceIsAverage() {
>         return getDevicePerformanceClass() <= PERFORMANCE_CLASS_AVERAGE;
>     }
> 
1815,1817d1524
<         if (ConfigManager.getIntOrDefault(Defines.devicePerformance, Defines.devicePerformanceAuto) != Defines.devicePerformanceAuto) {
<             return ConfigManager.getIntOrDefault(Defines.devicePerformance, Defines.devicePerformanceAuto);
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsClient.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsClient.java
30,31d29
< import android.text.TextUtils;
< 
32a31
> import android.text.TextUtils;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsIntent.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsIntent.java
27,29d26
< import android.view.View;
< import android.widget.RemoteViews;
< 
36a34,35
> import android.view.View;
> import android.widget.RemoteViews;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSession.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSession.java
26,28d25
< import android.view.View;
< import android.widget.RemoteViews;
< 
30a28,29
> import android.view.View;
> import android.widget.RemoteViews;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSessionToken.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSessionToken.java
23,24d22
< import android.util.Log;
< 
25a24
> import android.util.Log;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/support/JobIntentService.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/support/JobIntentService.java
32,33d31
< import android.util.Log;
< 
36a35
> import android.util.Log;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
26,28d25
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< import top.qwq2333.nullgram.utils.AnalyticsUtils;
< 
32c29,30
<     public final static int MAX_ACCOUNT_COUNT = 8;
---
>     public final static int MAX_ACCOUNT_DEFAULT_COUNT = 3;
>     public final static int MAX_ACCOUNT_COUNT = 4;
113,123d110
<     public static int getVisibleAccountsCount() {
<         int count = 0;
<         for (int a = 0; a < MAX_ACCOUNT_COUNT; a++) {
<             if (AccountInstance.getInstance(a).getUserConfig().isClientActivated() && !PasscodeHelper.isAccountHidden(a)) {
<                 count++;
<             }
<         }
<         return count;
<     }
< 
< 
233d219
<                         AnalyticsUtils.setUserId(currentUser.id);
286d271
<             AnalyticsUtils.setUserId(clientUserId);
400d384
<                 AnalyticsUtils.setUserId(clientUserId);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
82a83
>     public static native void setupNativeCrashesListener(String path);
142a144,149
>         if (BuildConfig.BUILD_HOST_IS_WINDOWS) {
>             Matcher matcher = pattern.matcher(value);
>             if (matcher.find()) {
>                 return Integer.valueOf(matcher.group());
>             }
>         } else {
161,162c168
<         } catch (Exception ignore) {
<         }
---
>             } catch (Exception ignore) {}
163a170,171
>         }
>         return 0;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/video/InputSurface.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/video/InputSurface.java
20a21
> import android.opengl.EGLExt;
24d24
< import android.opengl.EGLExt;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/video/MediaCodecVideoConvertor.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/video/MediaCodecVideoConvertor.java
5a6
> import android.media.MediaCodecList;
9a11,12
> import com.google.android.exoplayer2.util.Log;
> 
13a17
> import org.telegram.messenger.SharedConfig;
17a22
> import java.io.IOException;
1030c1035,1038
<         final int kernelRadius = (int) kernelSize;
---
>         int kernelRadius = (int) kernelSize;
>         if (kernelRadius > 1 && SharedConfig.deviceIsAverage()) {
>             kernelRadius = 1;
>         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/video/TextureRenderer.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/video/TextureRenderer.java
30a31
> import android.util.Log;
58a60
> import org.telegram.ui.Components.Rect;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/video/Track.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/video/Track.java
18a19
> import com.mp4parser.iso14496.part15.AvcConfigurationBox;
26d26
< import com.mp4parser.iso14496.part15.AvcConfigurationBox;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/video/VideoPlayerRewinder.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/video/VideoPlayerRewinder.java
6a7
> import org.telegram.ui.Components.VideoForwardDrawable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPService.java ../Tele/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPService.java
3485,3488d3484
< 
< 			File file = new File(VoIPHelper.getLogFilePath(privateCall.id, true));
< 			String cachedFile = MediaController.copyFileToCache(Uri.fromFile(file), "log");
< 
3493,3504d3488
< 				try {
< 					if (response instanceof TLRPC.TL_boolFalse) {
< 						AndroidUtilities.runOnUIThread(() -> {
< 							uploadLogFile(cachedFile);
< 						});
< 					} else {
< 						File cacheFile = new File(cachedFile);
< 						cacheFile.delete();
< 					}
< 				} catch (Exception e) {
< 					FileLog.e(e);
< 				}
3508,3538d3491
< 	}
< 
< 	private void uploadLogFile(String filePath) {
< 		NotificationCenter.NotificationCenterDelegate uploadDelegate = new NotificationCenter.NotificationCenterDelegate() {
< 			@Override
< 			public void didReceivedNotification(int id, int account, Object... args) {
< 				if (id == NotificationCenter.fileUploaded || id == NotificationCenter.fileUploadFailed) {
< 					final String location = (String) args[0];
< 					if (location.equals(filePath)) {
< 						if (id == NotificationCenter.fileUploaded) {
< 							TLRPC.TL_phone_saveCallLog req = new TLRPC.TL_phone_saveCallLog();
< 							final TLRPC.InputFile file = (TLRPC.InputFile) args[1];
< 							req.file = file;
< 							req.peer = new TLRPC.TL_inputPhoneCall();
< 							req.peer.access_hash = privateCall.access_hash;
< 							req.peer.id = privateCall.id;
< 							ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
< 								if (BuildVars.LOGS_ENABLED) {
< 									FileLog.d("Sent debug file log, response = " + response);
< 								}
< 							});
< 						}
< 						NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.fileUploaded);
< 						NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.fileUploadFailed);
< 					}
< 				}
< 			}
< 		};
< 		NotificationCenter.getInstance(currentAccount).addObserver(uploadDelegate, NotificationCenter.fileUploaded);
< 		NotificationCenter.getInstance(currentAccount).addObserver(uploadDelegate, NotificationCenter.fileUploadFailed);
< 		FileLoader.getInstance(currentAccount).uploadFile(filePath, false, true, ConnectionsManager.FileTypeFile);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java ../Tele/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
11d10
< import org.telegram.messenger.ApplicationLoader;
13a13
> import org.telegram.messenger.ApplicationLoader;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java ../Tele/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
11a12
> import android.util.Log;
36d36
< import java.io.FileNotFoundException;
63,66d62
< import top.qwq2333.nullgram.helpers.WebSocketHelper;
< import top.qwq2333.nullgram.utils.Log;
< 
< @SuppressWarnings("JavaJniMissingFunction")
108c104
<     private final AtomicInteger lastRequestToken = new AtomicInteger(1);
---
>     private AtomicInteger lastRequestToken = new AtomicInteger(1);
113c109
<     private static final HashMap<String, ResolveHostByNameTask> resolvingHostnameTasks = new HashMap<>();
---
>     private static HashMap<String, ResolveHostByNameTask> resolvingHostnameTasks = new HashMap<>();
159c155
<     private static final HashMap<String, ResolvedDomain> dnsCache = new HashMap<>();
---
>     private static HashMap<String, ResolvedDomain> dnsCache = new HashMap<>();
319c314
<             // FileLog.d("send request " + object + " with token = " + requestToken);
---
>             FileLog.d("send request " + object + " with token = " + requestToken);
358c353
<                             // FileLog.d("Cleanup keys for " + currentAccount + " because of CONNECTION_NOT_INITED");
---
>                             FileLog.d("Cleanup keys for " + currentAccount + " because of CONNECTION_NOT_INITED");
368c363
<                         // FileLog.d("java received " + resp + " error = " + error);
---
>                         FileLog.d("java received " + resp + " error = " + error);
449,452d443
<             Log.d("proxy address: " + proxyAddress);
<             if (WebSocketHelper.proxyServer.equals(proxyAddress)) {
<                 native_setProxySettings(currentAccount, "127.0.0.1", WebSocketHelper.getSocksPort(), "", "", "");
<             } else {
455d445
<         }
548,553d537
<         if (address.equals(WebSocketHelper.proxyServer)) {
<             address = "127.0.0.1";
<             port = WebSocketHelper.getSocksPort();
<             secret = "";
<         }
< 
560c544
<             if (false) {
---
>             if (BuildVars.LOGS_ENABLED) {
568c552
<             if (false) {
---
>             if (BuildVars.LOGS_ENABLED) {
584c568
<             if (false) {
---
>             if (BuildVars.LOGS_ENABLED) {
603,604c587,588
<                 if (false) {
<                     // FileLog.d("java received " + message);
---
>                 if (BuildVars.LOGS_ENABLED) {
>                     FileLog.d("java received " + message);
609,610c593,594
<                 if (false) {
<                     // FileLog.d(String.format("java received unknown constructor 0x%x", constructor));
---
>                 if (BuildVars.LOGS_ENABLED) {
>                     FileLog.d(String.format("java received unknown constructor 0x%x", constructor));
627d610
<         try {
632,634d614
<         } catch (Exception e) {
<             Log.e(e);
<         }
651c631
<             if (false) {
---
>             if (BuildVars.LOGS_ENABLED) {
672c652
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
679c659
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
686c666
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
693c673
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
700c680
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
711,716c691,692
<     public static void onProxyError(int instanceNum) {
<         if (instanceNum != UserConfig.selectedAccount) {
<             return;
<         }
<         AndroidUtilities.runOnUIThread(() -> NotificationCenter.getGlobalInstance()
<             .postNotificationName(NotificationCenter.needShowAlert, 3));
---
>     public static void onProxyError() {
>         AndroidUtilities.runOnUIThread(() -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needShowAlert, 3));
722,723c698
<             if (resolvedDomain != null
<                 && SystemClock.elapsedRealtime() - resolvedDomain.ttl < 5 * 60 * 1000) {
---
>             if (resolvedDomain != null && SystemClock.elapsedRealtime() - resolvedDomain.ttl < 5 * 60 * 1000) {
781,787d755
<         if (address.equals(WebSocketHelper.proxyServer)) {
<             Log.d("using websocket proxy");
<             address = "127.0.0.1";
<             port = WebSocketHelper.getSocksPort();
<             secret = "";
<         }
< 
843,845d791
< 
<     public static native void native_moveToDatacenter(int currentAccount, int datacenterId);
< 
883c822
<         if (false) {
---
>         if (BuildVars.LOGS_ENABLED) {
892c831
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
899c838
<                         if (false) {
---
>                         if (BuildVars.LOGS_ENABLED) {
905c844
<                         if (false) {
---
>                         if (BuildVars.LOGS_ENABLED) {
984c923
<                 URL downloadUrl = new URL("https://dns.google/resolve?name=" + currentHostName + "&type=A");
---
>                 URL downloadUrl = new URL("https://www.google.com/resolve?name=" + currentHostName + "&type=A");
986a926
>                 httpConnection.addRequestProperty("Host", "dns.google.com");
1006c946
<                 JSONObject jsonObject = new JSONObject(outbuf.toString());
---
>                 JSONObject jsonObject = new JSONObject(new String(outbuf.toByteArray()));
1068c1008
<         private final int currentAccount;
---
>         private int currentAccount;
1124c1064
<                     JSONObject jsonObject = new JSONObject(outbuf.toString());
---
>                     JSONObject jsonObject = new JSONObject(new String(outbuf.toByteArray()));
1154,1155d1093
<                 } catch (FileNotFoundException | SocketTimeoutException ignored) {
<                   // ignore this cuz it's normal if it doesn't have dns record
1185c1123
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
1199c1137
<         private final int currentAccount;
---
>         private int currentAccount;
1245c1183
<                 JSONObject jsonObject = new JSONObject(outbuf.toString());
---
>                 JSONObject jsonObject = new JSONObject(new String(outbuf.toByteArray()));
1303c1241
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
1317c1255
<         private final int currentAccount;
---
>         private int currentAccount;
1364c1302
<                 JSONObject jsonObject = new JSONObject(outbuf.toString());
---
>                 JSONObject jsonObject = new JSONObject(new String(outbuf.toByteArray()));
1422c1360
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
1432c1370
<         private final int currentAccount;
---
>         private int currentAccount;
1447c1385
<                 if (false) {
---
>                 if (BuildVars.LOGS_ENABLED) {
1469c1407
<                                     if (false) {
---
>                                     if (BuildVars.LOGS_ENABLED) {
1483c1421
<                     if (false) {
---
>                     if (BuildVars.LOGS_ENABLED) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java ../Tele/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
19d18
< import org.osmdroid.util.TileSystemWebMercator;
31,33d29
< import top.qwq2333.nullgram.utils.Defines;
< 
< @SuppressWarnings("unchecked")
6191,6200d6186
<             if (result.lat < TileSystemWebMercator.MinLatitude) {
<                 result.lat = TileSystemWebMercator.MinLatitude;
<             } else if (result.lat > TileSystemWebMercator.MaxLatitude) {
<                 result.lat = TileSystemWebMercator.MaxLatitude;
<             }
<             if (result._long < TileSystemWebMercator.MinLongitude) {
<                 result._long = TileSystemWebMercator.MinLongitude;
<             } else if (result._long > TileSystemWebMercator.MaxLongitude) {
<                 result._long = TileSystemWebMercator.MaxLongitude;
<             }
13231,13232c13217
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
13340,13341c13325
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
13522,13523c13506
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
13625,13626c13608
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
13780,13781c13762
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TLRPC.TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
13874,13875c13855
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TLRPC.TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
13995,13996c13975
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TLRPC.TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
14189,14190c14168
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TLRPC.TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
14921,14922c14899
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TLRPC.TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
16213,16214c16190
<                 exported_invite = ExportedChatInvite.TLdeserialize(stream,
<                     stream.readInt32(exception), exception);
---
>                 exported_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
23220,23225c23196
<         public boolean verifiedExtended() {
<             return verified || Defines.contains(Defines.officialID, id);
<         }
< 
<         public static User TLdeserialize(AbstractSerializedData stream, int constructor,
<             boolean exception) {
---
>         public static User TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
42814,42817c42785,42786
<             prev_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception),
<                 exception);
<             new_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception),
<                 exception);
---
>             prev_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
>             new_invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
42944,42945c42913
<             invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception),
<                 exception);
---
>             invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
42975,42976c42943
<             invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception),
<                 exception);
---
>             invite = (TL_chatInviteExported) ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
43882,43885d43848
<         public boolean verifiedExtended() {
<             return verified || Defines.contains(Defines.officialID, id);
<         }
< 
52003,52025d51965
<     public static class TL_auth_importBotAuthorization extends TLObject {
< 
<         public static int constructor = 0x67a3ff2c;
< 
<         public int flags;
<         public int api_id;
<         public String api_hash;
<         public String bot_auth_token;
< 
<         public TLObject deserializeResponse(AbstractSerializedData stream, int constructor,
<             boolean exception) {
<             return TL_auth_authorization.TLdeserialize(stream, constructor, exception);
<         }
< 
<         public void serializeToStream(AbstractSerializedData stream) {
<             stream.writeInt32(constructor);
<             stream.writeInt32(flags);
<             stream.writeInt32(api_id);
<             stream.writeString(api_hash);
<             stream.writeString(bot_auth_token);
<         }
<     }
< 
52034,52035c51973
<         public TLObject deserializeResponse(AbstractSerializedData stream, int constructor,
<             boolean exception) {
---
>         public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
60308,60309d60245
<         public boolean isModifiedByQuickToggleAnonymous = false;
< 
61144,61145c61080
<             boolean hasMedia = media != null && !(media instanceof TL_messageMediaEmpty)
<                 && !(media instanceof TL_messageMediaWebPage);
---
>             boolean hasMedia = media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage);
61154,61156c61089
<             if ((out || peer_id != null && from_id != null && peer_id.user_id != 0
<                 && peer_id.user_id == from_id.user_id && from_id.user_id == currentUserId) && (
<                 id < 0 || hasMedia || send_state == 3) || legacy) {
---
>             if ((out || peer_id != null && from_id != null && peer_id.user_id != 0 && peer_id.user_id == from_id.user_id && from_id.user_id == currentUserId) && (id < 0 || hasMedia || send_state == 3) || legacy) {
61170c61103
<                             String[] args = attachPath.split("\\|\\|");
---
>                             String args[] = attachPath.split("\\|\\|");
61176c61109
<                                     String[] args2 = args[a].split("\\|=\\|");
---
>                                     String args2[] = args[a].split("\\|=\\|");
68356,68411d68287
<     }
< 
<     public static class TL_account_setContentSettings extends TLObject {
<         public static int constructor = 0xb574b16b;
< 
<         public int flags;
<         public boolean sensitive_enabled;
< 
<         public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
<             return Bool.TLdeserialize(stream, constructor, exception);
<         }
< 
<         public void serializeToStream(AbstractSerializedData stream) {
<             stream.writeInt32(constructor);
<             flags = sensitive_enabled ? (flags | 1) : (flags & ~1);
<             stream.writeInt32(flags);
<         }
<     }
< 
<     public static class TL_account_getContentSettings extends TLObject {
<         public static int constructor = 0x8b9b4dae;
< 
<         public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
<             return TL_account_contentSettings.TLdeserialize(stream, constructor, exception);
<         }
< 
<         public void serializeToStream(AbstractSerializedData stream) {
<             stream.writeInt32(constructor);
<         }
<     }
< 
<     public static class TL_account_contentSettings extends TLObject {
<         public static int constructor = 0x57e28221;
< 
<         public int flags;
<         public boolean sensitive_enabled;
<         public boolean sensitive_can_change;
< 
<         public static TL_account_contentSettings TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
<             if (TL_account_contentSettings.constructor != constructor) {
<                 if (exception) {
<                     throw new RuntimeException(String.format("can't parse magic %x in TL_account_contentSettings", constructor));
<                 } else {
<                     return null;
<                 }
<             }
<             TL_account_contentSettings result = new TL_account_contentSettings();
<             result.readParams(stream, exception);
<             return result;
<         }
< 
<         public void readParams(AbstractSerializedData stream, boolean exception) {
<             flags = stream.readInt32(exception);
<             sensitive_enabled = (flags & 1) != 0;
<             sensitive_can_change = (flags & 2) != 0;
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
25d24
< import android.graphics.RectF;
28d26
< import android.text.Layout;
30d27
< import android.text.StaticLayout;
66,68d62
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
81,82c75,76
<     private INavigationLayout.BackButtonState backButtonState;
<     private UnreadImageView backButtonImageView;
---
>     private INavigationLayout.BackButtonState backButtonState = INavigationLayout.BackButtonState.BACK;
>     private ImageView backButtonImageView;
193c187
<         backButtonImageView = new UnreadImageView(getContext());
---
>         backButtonImageView = new ImageView(getContext());
1859,1906d1852
<     private StaticLayout countLayout;
< 
<     private class UnreadImageView extends ImageView {
<         public UnreadImageView(Context context) {
<             super(context);
<         }
< 
<         private int unreadCount = 0;
<         private RectF rect = new RectF();
< 
<         @Override
<         public void onDraw(Canvas canvas) {
<             super.onDraw(canvas);
<             if (countLayout == null || unreadCount == 0)
<                 return;
< 
<             Paint paint = Theme.dialogs_countPaint;
<             String unreadCountString = unreadCount > 99 ? "99+" : Integer.toString(unreadCount);
<             int countWidth = Math.max(AndroidUtilities.dp(12), (int) Math.ceil(Theme.dialogs_countTextPaint.measureText(unreadCountString)));
<             int countLeft = getMeasuredWidth() - countWidth - AndroidUtilities.dp(20);
<             int countTop = 0;
< 
<             int x = countLeft - AndroidUtilities.dp(5.5f);
<             rect.set(x, countTop, x + countWidth + AndroidUtilities.dp(11), countTop + AndroidUtilities.dp(23));
<             canvas.drawRoundRect(rect, 11.5f * AndroidUtilities.density, 11.5f * AndroidUtilities.density, paint);
<             canvas.save();
<             canvas.translate(countLeft, countTop + AndroidUtilities.dp(4));
<             countLayout.draw(canvas);
<             canvas.restore();
<         }
< 
<         public void setUnread(int count) {
<             if (count != unreadCount) {
<                 unreadCount = count;
<                 String countString = (count > 99) && !ConfigManager.getBooleanOrFalse(Defines.showExactNumber) ? "99+" : Integer.toString(count);
<                 int countWidth = count == 0 ? 0 : Math.max(AndroidUtilities.dp(12), (int) Math.ceil(Theme.dialogs_countTextPaint.measureText(countString)));
<                 countLayout = new StaticLayout(countString, Theme.dialogs_countTextPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
<                 invalidate();
<             }
<         }
<     }
< 
<     public void unreadBadgeSetCount(int count) {
<         if (backButtonImageView != null && ConfigManager.getBooleanOrFalse(Defines.unreadBadgeOnBackButton)) {
<             backButtonImageView.setUnread(count);
<         }
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
67,70d66
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.VibrationUtils;
< 
95,96d90
<             if (ConfigManager.getBooleanOrFalse(Defines.scrollableChatPreview))
<                 setClickable(true);
212,232d205
<             if (ConfigManager.getBooleanOrFalse(Defines.scrollableChatPreview) && inPreviewMode && previewMenu == null) {
<                 View view = containerView.getChildAt(0);
<                 if (view != null) {
<                     int y = (int) (view.getTop() + containerView.getTranslationY() - AndroidUtilities.dp(Build.VERSION.SDK_INT < 21 ? 20 : 0));
<                     y += AndroidUtilities.dp(24);
<                     if (ev.getY() <= y && ev.getAction() == MotionEvent.ACTION_DOWN) {
<                         movePreviewFragment(AndroidUtilities.dp(65));
<                     }
<                     boolean isValidTouch = ev.getX() >= AndroidUtilities.dp(8);
<                     isValidTouch &= ev.getX() <= view.getRight() - AndroidUtilities.dp(8);
<                     isValidTouch &= ev.getY() <= view.getBottom();
<                     isValidTouch &= ev.getY() >= y + AndroidUtilities.dp(70);
<                     if (!isValidTouch) {
<                         if (ev.getY() > view.getBottom() && ev.getAction() == MotionEvent.ACTION_DOWN) {
<                             finishPreviewFragment();
<                         }
<                         return false;
<                     }
<                 }
<             }
<             //
786,787d758
<             if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
<                 VibrationUtils.disableHapticFeedback(fragmentView);
1246,1247d1216
<             if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
<                 VibrationUtils.disableHapticFeedback(fragmentView);
1711d1679
<             // Fix status bar color
1721,1722d1688
<                 if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
<                     VibrationUtils.disableHapticFeedback(fragmentView);
1910,1911d1875
<             if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
<                 VibrationUtils.disableHapticFeedback(fragmentView);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
51a52
> import android.widget.PopupWindow;
60a62
> import org.telegram.messenger.NotificationCenter;
2124,2143d2125
<     private View anchor;
< 
<     public View getAnchor() {
<         return anchor;
<     }
< 
<     public void setAnchor(View anchor) {
<         this.anchor = anchor;
<     }
< 
<     public boolean isShowOnTop() {
<         return showOnTop;
<     }
< 
<     public void setShowOnTop(boolean showOnTop) {
<         this.showOnTop = showOnTop;
<     }
< 
<     private boolean showOnTop;
<     
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuSlider.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuSlider.java
35a36
> import androidx.annotation.NonNull;
48a50
> import org.telegram.ui.Components.LayoutHelper;
50a53
> import org.telegram.ui.Components.SeekBarView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/AlertDialog.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/AlertDialog.java
56a57
> import org.telegram.messenger.Emoji;
65a67
> import org.telegram.ui.Components.LinkSpanDrawable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
18a19
> import android.graphics.Color;
58,62d58
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.MessageUtils;
< import top.qwq2333.nullgram.utils.VibrationUtils;
< 
227,228d222
<         if (ConfigManager.getBooleanOrFalse(Defines.disableVibration))
<             VibrationUtils.disableHapticFeedback(fragmentView);
359c353
<             AndroidUtilities.setLightStatusBar(getParentActivity().getWindow(), ColorUtils.calculateLuminance(Theme.getColor(Theme.key_actionBarDefault)) > 0.7f);
---
>             AndroidUtilities.setLightStatusBar(getParentActivity().getWindow(), Theme.getColor(Theme.key_actionBarDefault) == Color.WHITE);
373,374c367
<     public void onUserLeaveHint() {
<     }
---
>     public void onUserLeaveHint() {}
423,426d415
<     public MessageUtils getMessageUtils() {
<         return MessageUtils.getInstance(currentAccount);
<     }
< 
902d890
<         // Fix status bar color
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
42a43,44
> import com.google.android.gms.vision.Frame;
> 
43a46,47
> import org.telegram.messenger.BuildVars;
> import org.telegram.messenger.FileLog;
47,48d50
< import top.qwq2333.nullgram.utils.Log;
< 
570a573,579
>             if (BuildVars.DEBUG_VERSION) {
>                 if (drawerLayout != child) {
>                     child.layout(lp.leftMargin, lp.topMargin + getPaddingTop(), lp.leftMargin + child.getMeasuredWidth(), lp.topMargin + child.getMeasuredHeight() + getPaddingTop());
>                 } else {
>                     child.layout(-child.getMeasuredWidth(), lp.topMargin + getPaddingTop(), 0, lp.topMargin + child.getMeasuredHeight() + +getPaddingTop());
>                 }
>             } else {
578c587,588
<                 Log.w(e);
---
>                     FileLog.e(e);
>                 }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/FloatingActionMode.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/FloatingActionMode.java
18a19
> import android.accounts.AccountManager;
33a35
> import org.telegram.messenger.AccountInstance;
34a37,38
> import org.telegram.messenger.NotificationCenter;
> import org.telegram.messenger.UserConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/INavigationLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/INavigationLayout.java
288d287
<         @Deprecated
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
146,147d145
< import top.qwq2333.nullgram.helpers.MonetHelper;
< 
2381,2384d2378
<         public boolean isMonet() {
<             return "Monet Dark".equals(name) || "Monet Light".equals(name) || "Monet AMOLED".equals(name);
<         }
< 
2389c2383
<             if ("Dark Blue".equals(name) || "Night".equals(name) || "AMOLED".equals(name) || "Monet Dark".equals(name) || "Monet AMOLED".equals(name)) {
---
>             if ("Dark Blue".equals(name) || "Night".equals(name)) {
2391c2385
<             } else if ("Blue".equals(name) || "Arctic Blue".equals(name) || "Day".equals(name) || "Monet Light".equals(name) || "Arctic".equals(name)) {
---
>             } else if ("Blue".equals(name) || "Arctic Blue".equals(name) || "Day".equals(name)) {
4069,4102d4062
< 
<     // Code Highlight
<     public static final int key_codehighlight_annotation = colorsCount++;
<     public static final int key_codehighlight_atrule = colorsCount++;
<     public static final int key_codehighlight_attr_name = colorsCount++;
<     public static final int key_codehighlight_attr_value = colorsCount++;
<     public static final int key_codehighlight_boolean = colorsCount++;
<     public static final int key_codehighlight_builtin = colorsCount++;
<     public static final int key_codehighlight_cdata = colorsCount++;
<     public static final int key_codehighlight_char = colorsCount++;
<     public static final int key_codehighlight_class_name = colorsCount++;
<     public static final int key_codehighlight_comment = colorsCount++;
<     public static final int key_codehighlight_constant = colorsCount++;
<     public static final int key_codehighlight_deleted = colorsCount++;
<     public static final int key_codehighlight_delimiter = colorsCount++;
<     public static final int key_codehighlight_doctype = colorsCount++;
<     public static final int key_codehighlight_entity = colorsCount++;
<     public static final int key_codehighlight_function = colorsCount++;
<     public static final int key_codehighlight_important = colorsCount++;
<     public static final int key_codehighlight_inserted = colorsCount++;
<     public static final int key_codehighlight_keyword = colorsCount++;
<     public static final int key_codehighlight_number = colorsCount++;
<     public static final int key_codehighlight_operator = colorsCount++;
<     public static final int key_codehighlight_prolog = colorsCount++;
<     public static final int key_codehighlight_property = colorsCount++;
<     public static final int key_codehighlight_punctuation = colorsCount++;
<     public static final int key_codehighlight_regex = colorsCount++;
<     public static final int key_codehighlight_selector = colorsCount++;
<     public static final int key_codehighlight_string = colorsCount++;
<     public static final int key_codehighlight_symbol = colorsCount++;
<     public static final int key_codehighlight_tag = colorsCount++;
<     public static final int key_codehighlight_url = colorsCount++;
<     public static final int key_codehighlight_variable = colorsCount++;
< 
4514,4569d4473
<         themeInfo = new ThemeInfo();
<         themeInfo.name = "AMOLED";
<         themeInfo.assetName = "amoled.attheme";
<         themeInfo.previewBackgroundColor = 0xff000000;
<         themeInfo.previewInColor = 0xff000000;
<         themeInfo.previewOutColor = 0xff75A2E6;
<         themeInfo.sortIndex = 5;
<         themeInfo.setAccentColorOptions(
<             new int[]{0xFF6ABE3F, 0xFF8D78E3, 0xFFDE5E7E, 0xFF5977E8, 0xFFDBC11A, 0xff3e88f7, 0xff4ab5d3, 0xff4ab841, 0xffd95576, 0xffe27d2b, 0xff936cda, 0xffd04336, 0xffe8ae1c, 0xff7988a3},
<             new int[]{0xFF8A5294, 0xFFB46C1B, 0xFFAF4F6F, 0xFF266E8D, 0xFF744EB7, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
<             new int[]{0xFF6855BB, 0xFFA53B4A, 0xFF62499C, 0xFF2F919D, 0xFF298B95, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
<             new int[]{0xFF16131c, 0xFF1e1118, 0xFF0f0b10, 0xFF090c0c, 0xFF071519, 0xff0d0e17, 0xff111b1c, 0xff0c110c, 0xff0e0b0d, 0xff1d160f, 0xff09090a, 0xff1c1210, 0xff1d1b18, 0xff0e1012},
<             new int[]{0xFF201827, 0xFF100f13, 0xFF1b151a, 0xFF141f22, 0xFF0c0c0f, 0xff090a0c, 0xff0a0e0e, 0xff080908, 0xff1a1618, 0xff13100d, 0xff1e1a21, 0xff0f0d0c, 0xff0c0b08, 0xff070707},
<             new int[]{0xFF0e0b13, 0xFF211623, 0xFF130e12, 0xFF0d0f11, 0xFF10191f, 0xff181c28, 0xff142121, 0xff121812, 0xff130e11, 0xff1a130f, 0xff0b0a0b, 0xff120d0b, 0xff15140f, 0xff101214},
<             new int[]{0xFF1e192a, 0xFF111016, 0xFF21141a, 0xFF111a1b, 0xFF0a0d13, 0xff0e0f12, 0xff070c0b, 0xff0b0d0b, 0xff22121e, 0xff0f0c0c, 0xff110f17, 0xff070606, 0xff0c0a0a, 0xff09090b},
<             new int[]{9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8},
<             new String[]{"YIxYGEALQVADAAAAA3QbEH0AowY", "9LW_RcoOSVACAAAAFTk3DTyXN-M", "O-wmAfBPSFADAAAA4zINVfD_bro", "F5oWoCs7QFACAAAAgf2bD_mg8Bw", "-Xc-np9y2VMCAAAARKr0yNNPYW0", "fqv01SQemVIBAAAApND8LDRUhRU", "F5oWoCs7QFACAAAAgf2bD_mg8Bw", "ptuUd96JSFACAAAATobI23sPpz0", "p-pXcflrmFIBAAAAvXYQk-mCwZU", "Nl8Pg2rBQVACAAAA25Lxtb8SDp0", "dhf9pceaQVACAAAAbzdVo4SCiZA", "9GcNVISdSVADAAAAUcw5BYjELW4", "9LW_RcoOSVACAAAAFTk3DTyXN-M", "dk_wwlghOFACAAAAfz9xrxi6euw"},
<             new int[]{45, 135, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
<             new int[]{34, 47, 52, 48, 54, 50, 37, 56, 48, 49, 40, 64, 38, 48}
<         );
<         themes.add(themeInfo);
<         themesDict.put("AMOLED", themeInfo);
< 
<         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
<             themeInfo = new ThemeInfo();
<             themeInfo.name = "Monet Light";
<             themeInfo.assetName = "monet_light.attheme";
<             themeInfo.previewBackgroundColor = MonetHelper.getColor("n1_50");
<             themeInfo.previewInColor = MonetHelper.getColor("a2_50");
<             themeInfo.previewOutColor = MonetHelper.getColor("a1_600");
<             themeInfo.sortIndex = 6;
<             themes.add(themeInfo);
<             themesDict.put("Monet Light", themeInfo);
< 
<             themeInfo = new ThemeInfo();
<             themeInfo.name = "Monet Dark";
<             themeInfo.assetName = "monet_dark.attheme";
<             themeInfo.previewBackgroundColor = MonetHelper.getColor("n1_900");
<             themeInfo.previewInColor = MonetHelper.getColor("n2_800");
<             themeInfo.previewOutColor = MonetHelper.getColor("a1_100");
<             themeInfo.sortIndex = 7;
<             themes.add(themeInfo);
<             themesDict.put("Monet Dark", themeInfo);
< 
<             themeInfo = new ThemeInfo();
<             themeInfo.name = "Monet AMOLED";
<             themeInfo.assetName = "monet_dark.attheme";
<             themeInfo.previewBackgroundColor = MonetHelper.getColor("n1_1000");
<             themeInfo.previewInColor = MonetHelper.getColor("n2_800");
<             themeInfo.previewOutColor = MonetHelper.getColor("a1_100");
<             themeInfo.sortIndex = 8;
<             themes.add(themeInfo);
<             themesDict.put("Monet AMOLED", themeInfo);
<         }
< 
< 
5331,5347d5234
<     public static Drawable getRoundRectSelectorWithBackgroundDrawable(int corners, int bgColor, int color) {
<         if (Build.VERSION.SDK_INT >= 21) {
<             Drawable maskDrawable = createRoundRectDrawable(corners, 0xffffffff);
<             ColorStateList colorStateList = new ColorStateList(
<                     new int[][]{StateSet.WILD_CARD},
<                     new int[]{color}
<             );
<             return new RippleDrawable(colorStateList, createRoundRectDrawable(corners, bgColor), maskDrawable);
<         } else {
<             StateListDrawable stateListDrawable = new StateListDrawable();
<             stateListDrawable.addState(new int[]{android.R.attr.state_pressed}, createRoundRectDrawable(corners, color));
<             stateListDrawable.addState(new int[]{android.R.attr.state_selected}, createRoundRectDrawable(corners, color));
<             stateListDrawable.addState(StateSet.WILD_CARD, new ColorDrawable(bgColor));
<             return stateListDrawable;
<         }
<     }
< 
6207c6094
<                     currentColorsNoAccent = getThemeFileValues(null, themeInfo.assetName, null, "Monet AMOLED".equals(themeInfo.name));
---
>                     currentColorsNoAccent = getThemeFileValues(null, themeInfo.assetName, null);
7945,7948d7831
<         return getThemeFileValues(file, assetName, wallpaperLink, false);
<     }
< 
<     public static SparseIntArray getThemeFileValues(File file, String assetName, String[] wallpaperLink, boolean monetAmoled) {
7980,7981c7863
<                                 String param = line.substring(idx + 1).trim();
<                                 ;
---
>                                 String param = line.substring(idx + 1);
7989,7990d7870
<                                 } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && (param.startsWith("a") || param.startsWith("n") || param.startsWith("monet"))) {
<                                     value = MonetHelper.getColor(param, monetAmoled);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
358c358
<                 view = new UserCell(mContext, 58, 1, false, false, true);
---
>                 view = new UserCell(mContext, 58, 1, false);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
23a24
> import org.telegram.tgnet.TLRPC;
38,39d38
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< 
237d235
<             if (PasscodeHelper.isAccountHidden(a)) continue;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
20,21d19
< import androidx.recyclerview.widget.RecyclerView;
< 
43a42,43
> 
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivitySearchAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivitySearchAdapter.java
14,15d13
< import androidx.recyclerview.widget.RecyclerView;
< 
19a18,19
> 
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
175d174
< //        setHasStableIds(true);
270,304d268
< 
< //    public long getItemIdInternal(int position) {
< //        try {
< //            if (stickers != null) {
< //                return stickers.get(position).sticker.id;
< //            } else if (foundContextBot != null && !inlineMediaEnabled) {
< //                return foundContextBot.id;
< //            } else if (searchResultBotContext != null) {
< //                if (position == 0 && searchResultBotContextSwitch != null) {
< //                    return -1;
< //                }
< //                return searchResultBotContext.get(position - (searchResultBotContextSwitch != null ? 1 : 0)).query_id;
< //            } else if (searchResultUsernames != null) {
< //                TLObject obj = searchResultUsernames.get(position);
< //                if (obj instanceof TLRPC.User) {
< //                    return ((TLRPC.User) obj).id;
< //                } else if (obj instanceof TLRPC.Chat) {
< //                    return ((TLRPC.Chat) obj).id;
< //                }
< //                return obj.hashCode();
< //            } else if (searchResultHashtags != null) {
< //                return searchResultHashtags.get(position).hashCode();
< //            } else if (searchResultCommands != null) {
< //                return searchResultCommands.get(position).hashCode();
< //            } else if (searchResultSuggestions != null) {
< //                return searchResultSuggestions.get(position).emoji.hashCode();
< //            }
< //        } catch (Exception ignore) {}
< //        return 0;
< //    }
< //
< //    @Override
< //    public long getItemId(int position) {
< //        return Objects.hash(getItemIdInternal(position), getItemCount() < 5 ? getItemCount() - position : position);
< //    }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Adapters/PaddedListAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PaddedListAdapter.java
4a5,6
> import android.widget.ListAdapter;
> import android.widget.WrapperListAdapter;
6a9
> import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
171c171
< import org.telegram.ui.Components.TranslateAlert;
---
> import org.telegram.ui.Components.TranslateAlert2;
183,185d182
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
423d419
<                         searchPath.onPathEnd();
1128d1123
<                     if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
1142c1137
<                     if (textSelectionHelper.isSelectionMode() && !ConfigManager.getBooleanOrFalse(Defines.disableVibration)) {
---
>                     if (textSelectionHelper.isSelectionMode()) {
1146d1140
<                     if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
2598d2591
<                         textPath.onPathEnd();
2617d2609
<                         markPath.onPathEnd();
3726c3718
<                 TranslateAlert.showAlert(parentActivity, parentFragment, fromLang, toLang, text, false, null, onAlertDismiss);
---
>                 TranslateAlert2.showAlert(parentActivity, parentFragment, currentAccount, fromLang, toLang, text, null, false, null, onAlertDismiss);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/AvatarPreviewer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/AvatarPreviewer.java
46,48d45
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
440d436
<                             if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/BubbleActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/BubbleActivity.java
39,41d38
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
70d66
<                 if (!ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat)){
72d67
<                 }   
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/CalendarActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/CalendarActivity.java
69,71d68
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
706d702
<                         if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration))
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/CallLogActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/CallLogActivity.java
32,36d31
< import androidx.annotation.Nullable;
< import androidx.collection.LongSparseArray;
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
71a67,71
> 
> import androidx.collection.LongSparseArray;
> import androidx.annotation.Nullable;
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/CameraScanActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/CameraScanActivity.java
2a3
> import android.Manifest;
7a9
> import android.annotation.TargetApi;
11a14
> import android.content.pm.PackageManager;
14a18,20
> import android.graphics.ColorMatrix;
> import android.graphics.ColorMatrixColorFilter;
> import android.graphics.ImageFormat;
20a27
> import android.net.Uri;
30a38
> import android.util.SparseArray;
44a53
> import com.google.android.gms.vision.Frame;
46a56,62
> import com.google.zxing.BinaryBitmap;
> import com.google.zxing.LuminanceSource;
> import com.google.zxing.PlanarYUVLuminanceSource;
> import com.google.zxing.RGBLuminanceSource;
> import com.google.zxing.Result;
> import com.google.zxing.ResultPoint;
> import com.google.zxing.common.GlobalHistogramBinarizer;
54d69
< import org.telegram.messenger.MediaController;
56a72
> import org.telegram.messenger.SendMessagesHelper;
59d74
< import org.telegram.messenger.browser.Browser;
71d85
< import org.telegram.ui.Components.ChatAttachAlert;
78a93
> import java.nio.ByteBuffer;
80,83d94
< import java.util.HashMap;
< 
< import top.qwq2333.nullgram.helpers.QrHelper;
< import top.qwq2333.nullgram.utils.PermissionUtils;
84a96
> @TargetApi(18)
633c645
<                 galleryButton.setBackground(Theme.AdaptiveRipple.filledCircle(Theme.createCircleDrawable(AndroidUtilities.dp(60), 0x22ffffff)));
---
>                 galleryButton.setBackgroundDrawable(Theme.createSelectorDrawableFromDrawables(Theme.createCircleDrawable(AndroidUtilities.dp(60), 0x22ffffff), Theme.createCircleDrawable(AndroidUtilities.dp(60), 0x44ffffff)));
640,641c652,653
<                         if (!PermissionUtils.isImagesAndVideoPermissionGranted()) {
<                             PermissionUtils.requestImagesAndVideoPermission(getParentActivity());
---
>                         if (getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
>                             getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE);
645,648c657,662
<                     ChatAttachAlert chatAttachAlert = new ChatAttachAlert(getParentActivity(), this, true, false, false, null);
<                     chatAttachAlert.drawNavigationBar = true;
<                     chatAttachAlert.setupPhotoPicker(LocaleController.getString("ChoosePhoto", R.string.ChoosePhoto));
<                     chatAttachAlert.setDelegate((button, arg, notify, scheduleDate, forceDocument) -> {
---
>                     PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(PhotoAlbumPickerActivity.SELECT_TYPE_QR, false, false, null);
>                     fragment.setMaxSelectedPhotos(1, false);
>                     fragment.setAllowSearchImages(false);
>                     fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
>                         @Override
>                         public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> photos, boolean notify, int scheduleDate) {
650d663
<                             HashMap<Object, Object> photos = chatAttachAlert.getPhotoLayout().getSelectedPhotos();
652,659c665,666
<                                 MediaController.PhotoEntry entry = (MediaController.PhotoEntry) photos.values().iterator().next();
<                                 String path;
<                                 if (entry.imagePath != null) {
<                                     path = entry.imagePath;
<                                 } else {
<                                     path = entry.path;
<                                 }
<                                 if (path != null) {
---
>                                     SendMessagesHelper.SendingMediaInfo info = photos.get(0);
>                                     if (info.path != null) {
661c668
<                                     Bitmap bitmap = ImageLoader.loadBitmap(path, null, screenSize.x, screenSize.y, true);
---
>                                         Bitmap bitmap = ImageLoader.loadBitmap(info.path, null, screenSize.x, screenSize.y, true);
668d674
<                                         chatAttachAlert.dismissInternal();
674a681,692
>                         }
> 
>                         @Override
>                         public void startPhotoSelectActivity() {
>                             try {
>                                 Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
>                                 photoPickerIntent.setType("image/*");
>                                 getParentActivity().startActivityForResult(photoPickerIntent, 11);
>                             } catch (Exception e) {
>                                 FileLog.e(e);
>                             }
>                         }
676,679c694
<                     chatAttachAlert.setMaxSelectedPhotos(1, false);
<                     chatAttachAlert.init();
<                     chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
<                     chatAttachAlert.show();
---
>                     presentFragment(fragment);
686,687c701
<             ShapeDrawable shapeDrawable = Theme.createCircleDrawable(AndroidUtilities.dp(60), 0x22ffffff);
<             flashButton.setBackground(Theme.AdaptiveRipple.filledCircle(shapeDrawable));
---
>             flashButton.setBackgroundDrawable(Theme.createCircleDrawable(AndroidUtilities.dp(60), 0x22ffffff));
694a709
>                     ShapeDrawable shapeDrawable = (ShapeDrawable) flashButton.getBackground();
754d768
<             if (galleryButton != null) galleryButton.setAlpha(1f - recognizedT);
1062a1077,1122
>     private Bitmap invert(Bitmap bitmap) {
>         int height = bitmap.getHeight();
>         int width = bitmap.getWidth();
> 
>         Bitmap newBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
>         Canvas canvas = new Canvas(newBitmap);
>         Paint paint = new Paint();
> 
>         ColorMatrix matrixGrayscale = new ColorMatrix();
>         matrixGrayscale.setSaturation(0);
>         ColorMatrix matrixInvert = new ColorMatrix();
>         matrixInvert.set(new float[] {
>             -1.0f, 0.0f, 0.0f, 0.0f, 255.0f,
>             0.0f, -1.0f, 0.0f, 0.0f, 255.0f,
>             0.0f, 0.0f, -1.0f, 0.0f, 255.0f,
>             0.0f, 0.0f, 0.0f, 1.0f, 0.0f
>         });
>         matrixInvert.preConcat(matrixGrayscale);
>         paint.setColorFilter(new ColorMatrixColorFilter(matrixInvert));
>         canvas.drawBitmap(bitmap, 0, 0, paint);
>         return newBitmap;
>     }
> 
>     private Bitmap monochrome(Bitmap bitmap, int threshold) {
>         int height = bitmap.getHeight();
>         int width = bitmap.getWidth();
> 
>         Bitmap newBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
>         Canvas canvas = new Canvas(newBitmap);
>         Paint paint = new Paint();
> 
>         paint.setColorFilter(new ColorMatrixColorFilter(createThresholdMatrix(threshold)));
>         canvas.drawBitmap(bitmap, 0, 0, paint);
> 
>         return newBitmap;
>     }
>     public static ColorMatrix createThresholdMatrix(int threshold) {
>         ColorMatrix matrix = new ColorMatrix(new float[] {
>             85.f, 85.f, 85.f, 0.f, -255.f * threshold,
>             85.f, 85.f, 85.f, 0.f, -255.f * threshold,
>             85.f, 85.f, 85.f, 0.f, -255.f * threshold,
>             0f, 0f, 0f, 1f, 0f
>         });
>         return matrix;
>     }
> 
1070,1073c1130,1232
<             ArrayList<QrHelper.QrResult> result = QrHelper.readQr(bitmap);
<             if (result.isEmpty()) {
<                 onNoQrFound();
<                 return null;
---
>             String text;
>             RectF bounds = new RectF();
>             int width = 1, height = 1;
>             if (visionQrReader != null && visionQrReader.isOperational()) {
>                 Frame frame;
>                 if (bitmap != null) {
>                     frame = new Frame.Builder().setBitmap(bitmap).build();
>                     width = bitmap.getWidth();
>                     height = bitmap.getHeight();
>                 } else {
>                     frame = new Frame.Builder().setImageData(ByteBuffer.wrap(data), size.getWidth(), size.getHeight(), ImageFormat.NV21).build();
>                     width = size.getWidth();
>                     height = size.getWidth();
>                 }
>                 SparseArray<Barcode> codes = visionQrReader.detect(frame);
>                 if (codes != null && codes.size() > 0) {
>                     Barcode code = codes.valueAt(0);
>                     text = code.rawValue;
>                     if (code.cornerPoints == null || code.cornerPoints.length == 0) {
>                         bounds = null;
>                     } else {
> //                        bounds.set(code.getBoundingBox());
>                         float minX = Float.MAX_VALUE,
>                               maxX = Float.MIN_VALUE,
>                               minY = Float.MAX_VALUE,
>                               maxY = Float.MIN_VALUE;
>                         for (Point point : code.cornerPoints) {
>                             minX = Math.min(minX, point.x);
>                             maxX = Math.max(maxX, point.x);
>                             minY = Math.min(minY, point.y);
>                             maxY = Math.max(maxY, point.y);
>                         }
>                         bounds.set(minX, minY, maxX, maxY);
>                     }
>                 } else if (bitmap != null) {
>                     Bitmap inverted = invert(bitmap);
>                     bitmap.recycle();
>                     frame = new Frame.Builder().setBitmap(inverted).build();
>                     width = inverted.getWidth();
>                     height = inverted.getHeight();
>                     codes = visionQrReader.detect(frame);
>                     if (codes != null && codes.size() > 0) {
>                         Barcode code = codes.valueAt(0);
>                         text = code.rawValue;
>                         if (code.cornerPoints == null || code.cornerPoints.length == 0) {
>                             bounds = null;
>                         } else {
>                             float minX = Float.MAX_VALUE,
>                                     maxX = Float.MIN_VALUE,
>                                     minY = Float.MAX_VALUE,
>                                     maxY = Float.MIN_VALUE;
>                             for (Point point : code.cornerPoints) {
>                                 minX = Math.min(minX, point.x);
>                                 maxX = Math.max(maxX, point.x);
>                                 minY = Math.min(minY, point.y);
>                                 maxY = Math.max(maxY, point.y);
>                             }
>                             bounds.set(minX, minY, maxX, maxY);
>                         }
>                     } else {
>                         Bitmap monochrome = monochrome(inverted, 90);
>                         inverted.recycle();
>                         frame = new Frame.Builder().setBitmap(monochrome).build();
>                         width = inverted.getWidth();
>                         height = inverted.getHeight();
>                         codes = visionQrReader.detect(frame);
>                         if (codes != null && codes.size() > 0) {
>                             Barcode code = codes.valueAt(0);
>                             text = code.rawValue;
>                             if (code.cornerPoints == null || code.cornerPoints.length == 0) {
>                                 bounds = null;
>                             } else {
>                                 float minX = Float.MAX_VALUE,
>                                         maxX = Float.MIN_VALUE,
>                                         minY = Float.MAX_VALUE,
>                                         maxY = Float.MIN_VALUE;
>                                 for (Point point : code.cornerPoints) {
>                                     minX = Math.min(minX, point.x);
>                                     maxX = Math.max(maxX, point.x);
>                                     minY = Math.min(minY, point.y);
>                                     maxY = Math.max(maxY, point.y);
>                                 }
>                                 bounds.set(minX, minY, maxX, maxY);
>                             }
>                         } else {
>                             text = null;
>                         }
>                     }
>                 } else {
>                     text = null;
>                 }
>             } else if (qrReader != null) {
>                 LuminanceSource source;
>                 if (bitmap != null) {
>                     int[] intArray = new int[bitmap.getWidth() * bitmap.getHeight()];
>                     bitmap.getPixels(intArray, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());
>                     source = new RGBLuminanceSource(bitmap.getWidth(), bitmap.getHeight(), intArray);
>                     width = bitmap.getWidth();
>                     height = bitmap.getWidth();
>                 } else {
>                     source = new PlanarYUVLuminanceSource(data, size.getWidth(), size.getHeight(), x, y, side, side, false);
>                     width = size.getWidth();
>                     height = size.getHeight();
1075,1077c1234,1236
<             String text = result.get(0).text;
<             bounds = result.get(0).bounds;
<             if (TextUtils.isEmpty(text)) {
---
> 
>                 Result result = qrReader.decode(new BinaryBitmap(new GlobalHistogramBinarizer(source)));
>                 if (result == null) {
1081,1082c1240,1259
<             if (currentType == TYPE_QR) {
<                 if (!Browser.isInternalUrl(text, null)) {
---
>                 text = result.getText();
>                 if (result.getResultPoints() == null || result.getResultPoints().length == 0) {
>                     bounds = null;
>                 } else {
>                     float minX = Float.MAX_VALUE,
>                           maxX = Float.MIN_VALUE,
>                           minY = Float.MAX_VALUE,
>                           maxY = Float.MIN_VALUE;
>                     for (ResultPoint point : result.getResultPoints()) {
>                         minX = Math.min(minX, point.getX());
>                         maxX = Math.max(maxX, point.getX());
>                         minY = Math.min(minY, point.getY());
>                         maxY = Math.max(maxY, point.getY());
>                     }
>                     bounds.set(minX, minY, maxX, maxY);
>                 }
>             } else {
>                 text = null;
>             }
>             if (TextUtils.isEmpty(text)) {
1085a1263,1265
>             if (needGalleryButton) {
>                 Uri uri = Uri.parse(text);
>                 String path = uri.getPath().replace("/", "");
1092a1273,1281
>             if (bounds != null) {
>                 int paddingx = AndroidUtilities.dp(25),
>                     paddingy = AndroidUtilities.dp(15);
>                 bounds.set(bounds.left - paddingx, bounds.top - paddingy, bounds.right + paddingx, bounds.bottom + paddingy);
>                 bounds.set(
>                     bounds.left / (float) width, bounds.top / (float) height,
>                     bounds.right / (float) width, bounds.bottom / (float) height
>                 );
>             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/AccountSelectCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/AccountSelectCell.java
23a24
> import org.telegram.messenger.ImageLocation;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/AppIconsSelectorCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/AppIconsSelectorCell.java
41a42
> import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
43a45
> import org.telegram.ui.PremiumPreviewFragment;
112c114
< //                fragment.showDialog(new PremiumFeatureBottomSheet(fragment, PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS, true));
---
>                 fragment.showDialog(new PremiumFeatureBottomSheet(fragment, PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS, true));
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchiveHintCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ArchiveHintCell.java
12,14d11
< import androidx.viewpager.widget.PagerAdapter;
< import androidx.viewpager.widget.ViewPager;
< 
18a16,18
> 
> import androidx.viewpager.widget.PagerAdapter;
> import androidx.viewpager.widget.ViewPager;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
18,20d17
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
39,40d35
<                 if (!ConfigManager.getBooleanOrFalse(Defines.disableVibration)) {
<                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
41a37
>                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
45d40
<                     }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatListCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatListCell.java
9a10
> import android.view.accessibility.AccessibilityEvent;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
18d17
< import org.telegram.ui.ActionBar.Theme;
19a19
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
175d174
< import java.util.Objects;
179,183d177
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.StringUtils;
< import top.qwq2333.nullgram.utils.Utils;
< 
314,316d307
<         if (ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly)) {
<             return false;
<         }
476,477c467
<         default boolean didLongPressBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button) {
<             return false;
---
>         default void didLongPressBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button) {
700c690
<     private final Rect scrollRect = new Rect();
---
>     private Rect scrollRect = new Rect();
716,717c706,707
<     private final RadialProgress2 radialProgress;
<     private final RadialProgress2 videoRadialProgress;
---
>     private RadialProgress2 radialProgress;
>     private RadialProgress2 videoRadialProgress;
811c801
<     private final RoundVideoPlayingDrawable roundVideoPlayingDrawable;
---
>     private RoundVideoPlayingDrawable roundVideoPlayingDrawable;
859,860c849,850
<     private final RectF deleteProgressRect = new RectF();
<     private final RectF rect = new RectF();
---
>     private RectF deleteProgressRect = new RectF();
>     private RectF rect = new RectF();
897,898c887,888
<     private final Path rectPath = new Path();
<     private static final float[] radii = new float[8];
---
>     private Path rectPath = new Path();
>     private static float[] radii = new float[8];
922c912
<     private final ArrayList<PollButton> pollButtons = new ArrayList<>();
---
>     private ArrayList<PollButton> pollButtons = new ArrayList<>();
991,992c981,982
<     private final int TAG;
<     private final int currentAccount = UserConfig.selectedAccount;
---
>     private int TAG;
>     private int currentAccount = UserConfig.selectedAccount;
1065c1055
<     private final Rect commentButtonRect = new Rect();
---
>     private Rect commentButtonRect = new Rect();
1068,1069c1058,1059
<     private final ImageReceiver avatarImage;
<     private final AvatarDrawable avatarDrawable;
---
>     private ImageReceiver avatarImage;
>     private AvatarDrawable avatarDrawable;
1074c1064
<     private final ImageReceiver locationImageReceiver;
---
>     private ImageReceiver locationImageReceiver;
1078c1068
<     private final AtomicReference<Layout> spoilersPatchedReplyTextLayout = new AtomicReference<>();
---
>     private AtomicReference<Layout> spoilersPatchedReplyTextLayout = new AtomicReference<>();
1118c1108
<     private final StaticLayout[] forwardedNameLayout = new StaticLayout[2];
---
>     private StaticLayout[] forwardedNameLayout = new StaticLayout[2];
1195c1185
<     private final MessageBackgroundDrawable backgroundDrawable;
---
>     private MessageBackgroundDrawable backgroundDrawable;
1206c1196
<     public float viewTop;
---
>     private float viewTop;
1245c1235
<     private final Runnable invalidateRunnable = new Runnable() {
---
>     private Runnable invalidateRunnable = new Runnable() {
1253,1254c1243
<                 invalidate((int) rect.left - 5, (int) rect.top - 5, (int) rect.right + 5,
<                     (int) rect.bottom + 5);
---
>                 invalidate((int) rect.left - 5, (int) rect.top - 5, (int) rect.right + 5, (int) rect.bottom + 5);
1261c1250
<     private final SparseArray<Rect> accessibilityVirtualViewBounds = new SparseArray<>();
---
>     private SparseArray<Rect> accessibilityVirtualViewBounds = new SparseArray<>();
1281c1270
<     private final Theme.MessageDrawable.PathDrawParams backgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
---
>     private Theme.MessageDrawable.PathDrawParams backgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
1289,1292d1277
<     private boolean isBlockedUserMessage() {
<         return currentMessageObject.isBlockedMessage();
<     }
< 
1306,1307c1291
<     public ChatMessageCell(Context context, boolean canDrawBackgroundInParent,
<                            Theme.ResourcesProvider resourcesProvider) {
---
>     public ChatMessageCell(Context context, boolean canDrawBackgroundInParent, Theme.ResourcesProvider resourcesProvider) {
3258c3242
<         if (textSelectionHelper == null) {
---
>         if (textSelectionHelper == null || MessagesController.getInstance(currentAccount).isChatNoForwards(currentMessageObject.getChatId()) || (currentMessageObject.messageOwner != null && currentMessageObject.messageOwner.noforwards)) {
4140d4123
<     @SuppressLint("WrongConstant")
4840,4843c4823,4824
<                         if (site_name != null && photo != null && site_name.equalsIgnoreCase(
<                             "instagram")) {
<                             linkPreviewMaxWidth = Math.max(AndroidUtilities.displaySize.y / 3,
<                                 currentMessageObject.textWidth);
---
>                         if (site_name != null && photo != null && site_name.toLowerCase().equals("instagram")) {
>                             linkPreviewMaxWidth = Math.max(AndroidUtilities.displaySize.y / 3, currentMessageObject.textWidth);
5049,5053c5030
<                                 descriptionLayout = StaticLayoutEx.createStaticLayout(
<                                     messageObject.linkDescription, Theme.chat_replyTextPaint,
<                                     linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f,
<                                     AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END,
<                                     linkPreviewMaxWidth, allowAllLines ? 100 : 6);
---
>                                 descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, Theme.chat_replyTextPaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, allowAllLines ? 100 : 6);
5404,5405c5381
<                                     float scale =
<                                         width / (float) (maxPhotoWidth - AndroidUtilities.dp(2));
---
>                                     float scale = width / (float) (maxPhotoWidth - AndroidUtilities.dp(2));
5408,5410c5384
<                                     if (site_name == null
<                                         || site_name != null && !site_name.equalsIgnoreCase(
<                                         "instagram") && documentAttachType == 0) {
---
>                                     if (site_name == null || site_name != null && !site_name.toLowerCase().equals("instagram") && documentAttachType == 0) {
6081,6082c6055
<                     if (votingFor != null && button.answer.option.length > 0
<                         && Arrays.binarySearch(votingFor, button.answer.option[0]) >= 0) {
---
>                     if (votingFor != null && button.answer.option.length > 0 && Arrays.binarySearch(votingFor, button.answer.option[0]) >= 0) {
6089,6090c6062,6066
<                     pollCheckBox[a].setChecked(
<                         currentMessageObject.checkedVotes.contains(button.answer), false);
---
>                     if (currentMessageObject.checkedVotes.contains(button.answer)) {
>                         pollCheckBox[a].setChecked(true, false);
>                     } else {
>                         pollCheckBox[a].setChecked(false, false);
>                     }
6539c6515
<                         maxHeight = maxWidth = (int) (AndroidUtilities.getMinTabletSide() * (0.4f + (ConfigManager.getFloatOrDefault(Defines.stickerSize, 14.0f) - 14.0f) / 40));
---
>                         maxHeight = maxWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.4f);
6541c6517
<                         maxHeight = maxWidth = (int) (Math.min(getParentWidth(), AndroidUtilities.displaySize.y) * (0.5f + (ConfigManager.getFloatOrDefault(Defines.stickerSize, 14.0f) - 14.0f) / 30));
---
>                         maxHeight = maxWidth = (int) (Math.min(getParentWidth(), AndroidUtilities.displaySize.y) * 0.5f);
6554c6530
<                         photoWidth = maxWidth;
---
>                         photoWidth = (int) maxWidth;
6656,6658d6631
<                     if (messageObject.useCustomPhoto) {
<                         photoImage.setImageBitmap(getResources().getDrawable(R.drawable.sticker));
<                     }
7149,7150c7122
<                                 String key = location.getKey(photoParentObject, null, false) + "@"
<                                     + currentPhotoFilter;
---
>                                 String key = location.getKey(photoParentObject, null, false) + "@" + currentPhotoFilter;
7167,7168c7139
<                     if (currentPhotoObjectThumb != null && !noSize
<                         && currentPhotoObjectThumb.size == 0) {
---
>                     if (currentPhotoObjectThumb != null && !noSize && currentPhotoObjectThumb.size == 0) {
7176,7179c7147
<                             autoPlayingMedia =
<                                 (currentPosition.flags & MessageObject.POSITION_FLAG_LEFT) != 0
<                                     && (currentPosition.flags & MessageObject.POSITION_FLAG_RIGHT)
<                                     != 0;
---
>                             autoPlayingMedia = (currentPosition.flags & MessageObject.POSITION_FLAG_LEFT) != 0 && (currentPosition.flags & MessageObject.POSITION_FLAG_RIGHT) != 0;
7816,7817c7784
<                 boolean showSeekbar = MediaController.getInstance()
<                     .isPlayingMessage(currentMessageObject);
---
>                 boolean showSeekbar = MediaController.getInstance().isPlayingMessage(currentMessageObject);
7831,7835d7797
<         if (isBlockedUserMessage()) {
<             totalHeight = 0;
<             avatarDrawable.setVisible(false, true);
<             avatarImage.setVisible(false, false);
<         }
7849,7850c7811
<         if (delegate != null && delegate.getTextSelectionHelper() != null && !messageIdChanged
<             && messageChanged && messageObject != null) {
---
>         if (delegate != null && delegate.getTextSelectionHelper() != null && !messageIdChanged && messageChanged && messageObject != null) {
8031,8036d7991
<         if (pressedBotButton != -1) {
<             BotButton button = botButtons.get(pressedBotButton);
<             if (button.button != null && delegate.didLongPressBotButton(this, button.button)) {
<                 return true;
<             }
<         }
8509d8463
<                 if (currentMessageObject.strippedThumb == null) {
8511,8513d8464
<                 } else {
<                     currentPhotoObjectThumbStripped = currentMessageObject.strippedThumb;
<                 }
8617d8567
<                 path.onPathEnd();
8632d8581
<                         path.onPathEnd();
8640d8588
<                                 path.onPathEnd();
8740,8741c8688,8689
<                 final RectF rect = new RectF();
<                 final Path path = new Path();
---
>                 RectF rect = new RectF();
>                 Path path = new Path();
8748,8750c8696
<                         canvas.drawCircle(rect.centerX(), rect.centerY(),
<                             AndroidUtilities.dp(selectorDrawableMaskType[num] == 3 ? 16 : 20),
<                             maskPaint);
---
>                         canvas.drawCircle(rect.centerX(), rect.centerY(), AndroidUtilities.dp(selectorDrawableMaskType[num] == 3 ? 16 : 20), maskPaint);
8753,8754c8699
<                         boolean out =
<                             currentMessageObject != null && currentMessageObject.isOutOwner();
---
>                         boolean out = currentMessageObject != null && currentMessageObject.isOutOwner();
8758,8759c8703
<                                     radii[a * 2] = radii[a * 2 + 1] = AndroidUtilities.dp(
<                                         SharedConfig.bubbleRadius);
---
>                                     radii[a * 2] = radii[a * 2 + 1] = AndroidUtilities.dp(SharedConfig.bubbleRadius);
8762,8763c8706
<                                     radii[a * 2] = radii[a * 2 + 1] = AndroidUtilities.dp(
<                                         SharedConfig.bubbleRadius);
---
>                                     radii[a * 2] = radii[a * 2 + 1] = AndroidUtilities.dp(SharedConfig.bubbleRadius);
10319c10262
<             reactionsLayoutInBubble.x = timeX;
---
>             reactionsLayoutInBubble.x = (int) timeX;
10556,10561c10499,10501
<                     buttonX = this.buttonX = (int) (photoImage.getImageX()
<                         + (photoImage.getImageWidth() - size) / 2.0f);
<                     buttonY = this.buttonY = (int) (photoImage.getImageY()
<                         + (photoImage.getImageHeight() - size) / 2.0f);
<                     radialProgress.setProgressRect(buttonX, buttonY, buttonX + size, buttonY
<                         + size);
---
>                     buttonX = this.buttonX = (int) (photoImage.getImageX() + (photoImage.getImageWidth() - size) / 2.0f);
>                     buttonY = this.buttonY = (int) (photoImage.getImageY() + (photoImage.getImageHeight() - size) / 2.0f);
>                     radialProgress.setProgressRect((int) buttonX, (int) buttonY, (int) buttonX + size, (int) buttonY + size);
12283,12284d12222
<         if (ConfigManager.getBooleanOrFalse(Defines.showMessageID) && currentMessageObject.messageOwner != null && currentMessageObject.isSent())
<             timeString = timeString + " | " + messageObject.messageOwner.id;
12514,12574d12451
<             } else if (ConfigManager.getBooleanOrFalse(Defines.labelChannelUser) && isMegagroup
<                 && currentChat != null && currentMessageObject.isSenderChannel()) {
<                 if (ConfigManager.getBooleanOrFalse(Defines.channelAlias)) {
<                     String aliasName = ConfigManager.getStringOrDefault(Defines.channelAliasPrefix
<                         + currentMessageObject.messageOwner.from_id.channel_id, null);
< 
<                     String nickname = null;
<                     if (ConfigManager.getBooleanOrFalse(Defines.linkedUser)
<                         && ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + currentMessageObject.messageOwner.from_id.channel_id, 1145141919810L) != 1145141919810L
<                         && ConfigManager.getBooleanOrFalse(Defines.overrideChannelAlias)) {
<                         final TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + currentMessageObject.messageOwner.from_id.channel_id, 1578562490L));
< 
<                         if (user != null) {
<                             if (user.first_name != null && user.last_name != null) {
<                                 nickname = user.first_name + user.last_name;
<                             } else {
<                                 nickname = Objects.requireNonNullElseGet(user.first_name, () -> Objects.requireNonNullElse(user.last_name, "NOT_FOUND"));
<                             }
<                         } else {
<                             nickname = "NOT_FOUND";
<                         }
<                     }
< 
<                     final boolean isAnonymous = currentMessageObject.getChatId() == -currentMessageObject.getSenderId();
<                     final String text = LocaleController.getString(isAnonymous ? "Anonymous" : "Channel", isAnonymous ? R.string.Anonymous : R.string.Channel);
<                     if (nickname != null) {
<                         adminString = StringUtils.ellipsis(nickname, 15) +  " | " + text;
<                     } else if (aliasName != null) {
<                         adminString = StringUtils.ellipsis(aliasName, 15) + " | " + text;
<                     } else {
<                         adminString = text;
<                     }
<                 } else {
< 
<                     String nickname = null;
<                     if (ConfigManager.getBooleanOrFalse(Defines.linkedUser)
<                         && ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + currentMessageObject.messageOwner.from_id.channel_id, 1145141919810L) != 1145141919810L
<                         && ConfigManager.getBooleanOrFalse(Defines.overrideChannelAlias)) {
<                         final TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + currentMessageObject.messageOwner.from_id.channel_id, 1578562490L));
< 
<                         if (user.first_name != null && user.last_name != null) {
<                             nickname = user.first_name + user.last_name;
<                         } else {
<                             if (user.first_name != null) {
<                                 nickname = user.first_name;
<                             } else {
<                                 nickname = user.last_name;
<                             }
<                         }
<                     }
< 
<                     final boolean isAnonymous = currentMessageObject.getChatId() == -currentMessageObject.getSenderId();
<                     final String text = LocaleController.getString(isAnonymous ? "Anonymous" : "Channel", isAnonymous ? R.string.Anonymous : R.string.Channel);
<                     if (nickname != null) {
<                         adminString = StringUtils.ellipsis(nickname, 15) + " | " + text;
<                     } else {
<                         adminString = text;
<                     }
<                 }
<                 adminWidth = (int) Math.ceil(Theme.chat_adminPaint.measureText(adminString));
<                 nameWidth -= adminWidth;
12701,12702d12577
<                 currentForwardNameString = Utils.showForwardDate(messageObject, currentForwardNameString);
< 
12970,12971d12844
< 
<                         currentForwardNameString = Utils.showForwardDate(messageObject, currentForwardNameString);
13404,13407c13277
<         if ((drawTime || !mediaBackground) && !forceNotDrawTime && !transitionParams.animateBackgroundBoundsInner && !(enterTransitionInProgress && !currentMessageObject.isVoice()) && !currentMessageObject.isAnyKindOfSticker()) {
<             drawTime(canvas, 1f, false);
<         }
<         if (currentMessageObject.isAnyKindOfSticker() && !ConfigManager.getBooleanOrFalse(Defines.hideTimeForSticker)) {
---
>         if ((drawTime || !mediaBackground) && !forceNotDrawTime && !transitionParams.animateBackgroundBoundsInner && !(enterTransitionInProgress && !currentMessageObject.isVoice())) {
18123,18128d17992
<                     if (documentAttach != null && documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
<                         String fileName = FileLoader.getAttachFileName(documentAttach);
<                         if (fileName.indexOf('.') != -1) {
<                             sb.append(LocaleController.formatString(R.string.AccDescrDocumentType, fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase(Locale.ROOT)));
<                         }
<                     }
19039,19040c18903,18904
<         private final ArrayList<BotButton> lastDrawBotButtons = new ArrayList<>();
<         private final ArrayList<BotButton> transitionBotButtons = new ArrayList<>();
---
>         private ArrayList<BotButton> lastDrawBotButtons = new ArrayList<>();
>         private ArrayList<BotButton> transitionBotButtons = new ArrayList<>();
19538,19539c19402,19406
<                     drawCheck1 =
<                         !currentMessageObject.scheduled && !currentMessageObject.isUnread();
---
>                     if (!currentMessageObject.scheduled && !currentMessageObject.isUnread()) {
>                         drawCheck1 = true;
>                     } else {
>                         drawCheck1 = false;
>                     }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
22d21
< import org.telegram.ui.ActionBar.Theme;
23a23
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
50d49
< import org.telegram.ui.ActionBar.Theme;
54a54
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
115,118d114
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
< 
234c230
<         private final int width;
---
>         private int width;
275c271
<     private final int currentAccount;
---
>     private int currentAccount;
465c461
<     private final RectF rect = new RectF();
---
>     private RectF rect = new RectF();
479c475
<     private final DialogsActivity parentFragment;
---
>     private DialogsActivity parentFragment;
598,599c594,597
<         return user.status != null && user.status.expires > ConnectionsManager.getInstance(
<             currentAccount).getCurrentTime();
---
>         if (user.status != null && user.status.expires > ConnectionsManager.getInstance(currentAccount).getCurrentTime()) {
>             return true;
>         }
>         return false;
1116c1114
<                             drawVerified =!forbidVerified && user.verifiedExtended();
---
>                             drawVerified =!forbidVerified && user.verified;
1441c1439
<                                         if (ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly) && message != null && message.messageOwner != null) {
---
>                                         if (message != null && message.messageOwner != null) {
1477c1475
<                                             if (ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly) && message != null) {
---
>                                             if (message != null) {
1481c1479
<                                             if (ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly) && message != null && message.messageOwner != null) {
---
>                                             if (message != null && message.messageOwner != null) {
2115d2112
<             if (ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly)) {
2117d2113
<             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogMeUrlCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogMeUrlCell.java
36,37c36,37
<     private final ImageReceiver avatarImage = new ImageReceiver(this);
<     private final AvatarDrawable avatarDrawable = new AvatarDrawable();
---
>     private ImageReceiver avatarImage = new ImageReceiver(this);
>     private AvatarDrawable avatarDrawable = new AvatarDrawable();
48c48
<     private final int messageTop = AndroidUtilities.dp(40);
---
>     private int messageTop = AndroidUtilities.dp(40);
54c54
<     private final int avatarTop = AndroidUtilities.dp(10);
---
>     private int avatarTop = AndroidUtilities.dp(10);
58c58
<     private final int currentAccount = UserConfig.selectedAccount;
---
>     private int currentAccount = UserConfig.selectedAccount;
107c107
<             drawVerified = chat.verifiedExtended();
---
>             drawVerified = chat.verified;
137c137
<                 drawVerified = user.verifiedExtended();
---
>                 drawVerified = user.verified;
160c160
<                 drawVerified = recentMeUrl.chat_invite.chat.verifiedExtended();
---
>                 drawVerified = recentMeUrl.chat_invite.chat.verified;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogsEmptyCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogsEmptyCell.java
81,177d80
<     private DialogsEmptyCellContent currentContent = null;
<     private DialogsEmptyCellContent lastContent = null;
< 
<     private static class DialogsEmptyCellContent extends LinearLayout {
<         private RLottieImageView imageView;
<         private TextView emptyTextView1;
<         private TextView emptyTextView2;
<         private int currentType = 0;
< 
<         public DialogsEmptyCellContent(Context context) {
<             super(context);
< 
<             setGravity(Gravity.CENTER);
<             setOrientation(VERTICAL);
<             setOnTouchListener((v, event) -> true);
< 
<             imageView = new RLottieImageView(context);
<             imageView.setScaleType(ImageView.ScaleType.CENTER);
<             addView(imageView, LayoutHelper.createLinear(100, 100, Gravity.CENTER, 52, 4, 52, 0));
<             imageView.setOnClickListener(v -> {
<                 if (!imageView.isPlaying()) {
<                     imageView.setProgress(0.0f);
<                     imageView.playAnimation();
<                 }
<             });
< 
<             emptyTextView1 = new TextView(context);
<             emptyTextView1.setTextColor(Theme.getColor(Theme.key_chats_nameMessage_threeLines));
<             emptyTextView1.setText(LocaleController.getString("NoChats", R.string.NoChats));
<             emptyTextView1.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
<             emptyTextView1.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
<             emptyTextView1.setGravity(Gravity.CENTER);
<             addView(emptyTextView1, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 52, 10, 52, 0));
< 
<             emptyTextView2 = new TextView(context);
<             String help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
<             if (AndroidUtilities.isTablet() && !AndroidUtilities.isSmallTablet()) {
<                 help = help.replace('\n', ' ');
<             }
<             emptyTextView2.setText(help);
<             emptyTextView2.setTextColor(Theme.getColor(Theme.key_chats_message));
<             emptyTextView2.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
<             emptyTextView2.setGravity(Gravity.CENTER);
<             emptyTextView2.setLineSpacing(AndroidUtilities.dp(2), 1);
<             addView(emptyTextView2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 52, 7, 52, 0));
<         }
< 
<         public void setType(int value) {
<             if (currentType == value) {
<                 return;
<             }
<             currentType = value;
<             String help;
<             int icon;
<             int translationY = 0;
<             if (currentType == 0) {
<                 icon = 0;
<                 help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
<                 emptyTextView1.setText(LocaleController.getString("NoChats", R.string.NoChats));
<             } else if (currentType == 1) {
<                 icon = 0;
<                 help = LocaleController.getString("NoChatsContactsHelp", R.string.NoChatsContactsHelp);
<                 emptyTextView1.setText(LocaleController.getString("NoChats", R.string.NoChats));
<             } else if (currentType == 2) {
<                 imageView.setAutoRepeat(false);
<                 icon = R.raw.filter_no_chats;
<                 help = LocaleController.getString("FilterNoChatsToDisplayInfo", R.string.FilterNoChatsToDisplayInfo);
<                 emptyTextView1.setText(LocaleController.getString("FilterNoChatsToDisplay", R.string.FilterNoChatsToDisplay));
<             } else {
<                 imageView.setAutoRepeat(true);
<                 icon = R.raw.filter_new;
<                 help = LocaleController.getString("FilterAddingChatsInfo", R.string.FilterAddingChatsInfo);
<                 emptyTextView1.setText(LocaleController.getString("FilterAddingChats", R.string.FilterAddingChats));
<                 translationY = AndroidUtilities.dp(8);
<             }
<             setTranslationY(translationY);
<             if (icon != 0) {
<                 imageView.setVisibility(VISIBLE);
<                 imageView.setAnimation(icon, 100, 100);
<                 imageView.playAnimation();
<             } else {
<                 imageView.setVisibility(GONE);
<             }
<             if (AndroidUtilities.isTablet() && !AndroidUtilities.isSmallTablet()) {
<                 help = help.replace('\n', ' ');
<             }
<             emptyTextView2.setText(help);
<         }
< 
<         public void setOffset(int offset) {
<             if (currentType == 2 || currentType == 3) {
<                 imageView.setTranslationY(offset);
<                 emptyTextView1.setTranslationY(offset);
<                 emptyTextView2.setTranslationY(offset);
<             }
<         }
<     }
229,230d131
< //        if (currentContent == null)
< //            animated = false;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerActionCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerActionCell.java
28a29,30
> import org.telegram.ui.Components.AnimatedTextView;
> import org.telegram.ui.Components.CubicBezierInterpolator;
29a32
> import org.telegram.ui.Components.RLottieImageView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
27d26
< import android.text.TextUtils;
34a34
> import android.widget.Toast;
37d36
< import androidx.palette.graphics.Palette;
60d58
< import org.telegram.ui.Components.AudioPlayerAlert;
76,79d73
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< 
84c78
<     private AudioPlayerAlert.ClippingTextViewSwitcher phoneTextView;
---
>     private TextView phoneTextView;
111,115d104
<     private final ImageReceiver imageReceiver;
<     private Bitmap lastBitmap;
<     private TLRPC.User user;
<     private boolean avatarAsDrawerBackground = false;
< 
119,165d107
<         imageReceiver = new ImageReceiver(this);
<         imageReceiver.setCrossfadeWithOldImage(true);
<         imageReceiver.setForceCrossfade(true);
<         imageReceiver.setDelegate((imageReceiver, set, thumb, memCache) -> {
<             if (ConfigManager.getBooleanOrFalse(Defines.avatarBackgroundDarken) || ConfigManager.getBooleanOrFalse(Defines.avatarBackgroundBlur)) {
<                 if (thumb) {
<                     return;
<                 }
<                 ImageReceiver.BitmapHolder bmp = imageReceiver.getBitmapSafe();
<                 if (bmp != null) {
<                     new Thread(() -> {
<                         int width = ConfigManager.getBooleanOrFalse(Defines.avatarBackgroundBlur) ? 150 : bmp.bitmap.getWidth();
<                         int height = ConfigManager.getBooleanOrFalse(Defines.avatarBackgroundBlur) ? 150 : bmp.bitmap.getHeight();
<                         Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
<                         Canvas canvas = new Canvas(bitmap);
<                         canvas.drawBitmap(bmp.bitmap, null, new Rect(0, 0, width, height), new Paint(Paint.FILTER_BITMAP_FLAG));
<                         if (ConfigManager.getBooleanOrFalse(Defines.avatarBackgroundBlur)) {
<                             try {
<                                 Utilities.stackBlurBitmap(bitmap, 3);
<                             } catch (Exception e) {
<                                 FileLog.e(e);
<                             }
<                         }
<                         if (ConfigManager.getBooleanOrFalse(Defines.avatarBackgroundDarken)) {
<                             final Palette palette = Palette.from(bmp.bitmap).generate();
<                             Paint paint = new Paint();
<                             paint.setColor((palette.getDarkMutedColor(0xFF547499) & 0x00FFFFFF) | 0x44000000);
<                             canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), paint);
<                         }
<                         AndroidUtilities.runOnUIThread(() -> {
<                             if (lastBitmap != null) {
<                                 imageReceiver.setCrossfadeWithOldImage(false);
<                                 imageReceiver.setImageBitmap(new BitmapDrawable(null, lastBitmap), false);
<                             }
<                             imageReceiver.setCrossfadeWithOldImage(true);
<                             imageReceiver.setImageBitmap(new BitmapDrawable(null, bitmap));
<                             lastBitmap = bitmap;
<                         });
<                     }).start();
<                 }
<             } else {
<                 lastBitmap = null;
<             }
<         });
< 
< 
< 
200,212c142,148
<         phoneTextView = new AudioPlayerAlert.ClippingTextViewSwitcher(context) {
<             @Override
<             protected TextView createTextView() {
<                 TextView textView = new TextView(context);
<                 textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
<                 textView.setLines(1);
<                 textView.setMaxLines(1);
<                 textView.setSingleLine(true);
<                 textView.setGravity(Gravity.LEFT);
<                 return textView;
<             }
<         };
<         addView(phoneTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 76, 9));
---
>         phoneTextView = new TextView(context);
>         phoneTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
>         phoneTextView.setLines(1);
>         phoneTextView.setMaxLines(1);
>         phoneTextView.setSingleLine(true);
>         phoneTextView.setGravity(Gravity.LEFT);
>         addView(phoneTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 52, 9));
538d473
<         int heightBase = ConfigManager.getBooleanOrFalse(Defines.avatarAsDrawerBackground) && ConfigManager.getBooleanOrFalse(Defines.largeAvatarAsBackground) ? MeasureSpec.getSize(widthMeasureSpec) : AndroidUtilities.dp(148);
540,541c475
<             heightBase -= ConfigManager.getBooleanOrFalse(Defines.avatarAsDrawerBackground) && ConfigManager.getBooleanOrFalse(Defines.largeAvatarAsBackground) ? AndroidUtilities.statusBarHeight : 0;
<             super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(heightBase + AndroidUtilities.statusBarHeight, MeasureSpec.EXACTLY));
---
>             super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(148) + AndroidUtilities.statusBarHeight, MeasureSpec.EXACTLY));
544c478
<                 super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(heightBase, MeasureSpec.EXACTLY));
---
>                 super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(148), MeasureSpec.EXACTLY));
546,547c480,481
<                 setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), heightBase);
<                 Log.e(e);
---
>                 setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(148));
>                 FileLog.e(e);
576c510
<         if (!avatarAsDrawerBackground && !useImageBackground && Theme.hasThemeKey(Theme.key_chats_menuTopShadowCats)) {
---
>         if (!useImageBackground && Theme.hasThemeKey(Theme.key_chats_menuTopShadowCats)) {
601,602c535,536
<         if (avatarAsDrawerBackground || useImageBackground) {
<             phoneTextView.getTextView().setTextColor(Theme.getColor(Theme.key_chats_menuPhone));
---
>         if (useImageBackground) {
>             phoneTextView.setTextColor(Theme.getColor(Theme.key_chats_menuPhone));
606,610c540
<             if (avatarAsDrawerBackground) {
<                 imageReceiver.setImageCoords(0, 0, getWidth(), getHeight());
<                 imageReceiver.draw(canvas);
<                 darkBackColor = Theme.getColor(Theme.key_listSelector);
<             } else if (backgroundDrawable instanceof ColorDrawable || backgroundDrawable instanceof GradientDrawable) {
---
>             if (backgroundDrawable instanceof ColorDrawable || backgroundDrawable instanceof GradientDrawable) {
637c567
<             phoneTextView.getTextView().setTextColor(Theme.getColor(Theme.key_chats_menuPhoneCats));
---
>             phoneTextView.setTextColor(Theme.getColor(Theme.key_chats_menuPhoneCats));
684,686d613
<         if (avatarAsDrawerBackground) {
<             return y <= arrowView.getTop();
<         } else {
689d615
<     }
724d649
<         this.user = user;
754d678
<         if (!ConfigManager.getBooleanOrFalse(Defines.hidePhone)) {
756,760d679
<         } else if (!TextUtils.isEmpty(user.username)) {
<             phoneTextView.setText("@" + user.username);
<         } else {
<             phoneTextView.setText(LocaleController.getString("MobileHidden", R.string.MobileHidden));
<         }
764,780d682
< 
<         if (ConfigManager.getBooleanOrFalse(Defines.avatarAsDrawerBackground)) {
<             ImageLocation imageLocation = ImageLocation.getForUser(user, ImageLocation.TYPE_BIG);
<             avatarAsDrawerBackground = imageLocation != null;
<             imageReceiver.setImage(imageLocation, "512_512", null, null, new ColorDrawable(0x00000000), 0, null, user, 1);
<             avatarImageView.setVisibility(INVISIBLE);
<             if (ConfigManager.getBooleanOrFalse(Defines.largeAvatarAsBackground)) {
<                 LayoutParams lp = ConfigManager.getBooleanOrFalse(Defines.largeAvatarAsBackground) ?
<                     LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP, 0, AndroidUtilities.statusBarHeight / getResources().getDisplayMetrics().density, 6, 0) :
<                     LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.BOTTOM, 0, 10, 6, 90);
<                 darkThemeView.setLayoutParams(lp);
<             }
<         } else {
<             avatarAsDrawerBackground = false;
<             avatarImageView.setVisibility(VISIBLE);
<         }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
31a32
> import org.telegram.messenger.MediaDataController;
35d35
< import org.telegram.messenger.MediaDataController;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
30d29
< import org.telegram.messenger.LocaleController;
31a31
> import org.telegram.messenger.LocaleController;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCallInvitedCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCallInvitedCell.java
12a13
> import org.telegram.messenger.ImageLocation;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCallUserCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCallUserCell.java
36a37
> import org.telegram.messenger.SharedConfig;
60,63c61,64
<     private final BackupImageView avatarImageView;
<     private final SimpleTextView nameTextView;
<     private final SimpleTextView[] statusTextView = new SimpleTextView[5];
<     private final SimpleTextView fullAboutTextView;
---
>     private BackupImageView avatarImageView;
>     private SimpleTextView nameTextView;
>     private SimpleTextView[] statusTextView = new SimpleTextView[5];
>     private SimpleTextView fullAboutTextView;
74c75
<     private final AvatarDrawable avatarDrawable;
---
>     private AvatarDrawable avatarDrawable;
81c82
<     private final Paint dividerPaint;
---
>     private Paint dividerPaint;
94c95
<     private final Runnable shakeHandCallback = () -> {
---
>     private Runnable shakeHandCallback = () -> {
100c101
<     private final Runnable raiseHandCallback = () -> {
---
>     private Runnable raiseHandCallback = () -> {
129c130
<     private final Runnable checkRaiseRunnable = () -> applyParticipantChanges(true, true);
---
>     private Runnable checkRaiseRunnable = () -> applyParticipantChanges(true, true);
131c132
<     private final Runnable updateRunnable = () -> {
---
>     private Runnable updateRunnable = () -> {
137c138
<     private final Runnable updateVoiceRunnable = () -> {
---
>     private Runnable updateVoiceRunnable = () -> {
146c147
<     private final Drawable speakingDrawable;
---
>     private Drawable speakingDrawable;
195,196c196,200
<         AndroidUtilities.updateViewVisibilityAnimated(avatarProgressView, progress < 1f, 1f,
<             animated);
---
>         if (progress < 1f) {
>             AndroidUtilities.updateViewVisibilityAnimated(avatarProgressView, true, 1f, animated);
>         } else {
>             AndroidUtilities.updateViewVisibilityAnimated(avatarProgressView, false, 1f, animated);
>         }
207c211
<         private final Drawable[] drawables = new Drawable[2];
---
>         private Drawable[] drawables = new Drawable[2];
266c270
<             private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
---
>             private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
471c475
<             if (currentUser != null && currentUser.verifiedExtended()) {
---
>             if (currentUser != null && currentUser.verified) {
512c516
<                 if (currentChat.verifiedExtended()) {
---
>                 if (currentChat.verified) {
940,941c944,945
<         private final BlobDrawable blobDrawable;
<         private final BlobDrawable blobDrawable2;
---
>         private BlobDrawable blobDrawable;
>         private BlobDrawable blobDrawable2;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
35c35
<     private final TextView textView;
---
>     private TextView textView;
64,67d63
<     public HeaderCell(Context context, int textColorKey, int padding, int topMargin, boolean text2, boolean bigTitle) {
<         this(context, textColorKey, padding, topMargin, 0, text2, bigTitle, null);
<     }
< 
69,72d64
<         this(context, textColorKey, padding, topMargin, bottomMargin, text2, false, resourcesProvider);
<     }
< 
<     public HeaderCell(Context context, int textColorKey, int padding, int topMargin, int bottomMargin, boolean text2, boolean bigTitle, Theme.ResourcesProvider resourcesProvider) {
78,80d69
<         if (bigTitle) {
<             textView.setTypeface(AndroidUtilities.getTypeface("fonts/mw_bold.ttf"));
<         } else {
82d70
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/JoinSheetUserCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/JoinSheetUserCell.java
19a20
> import org.telegram.messenger.ImageLocation;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationCell.java
10a11,12
> import android.animation.Animator;
> import android.animation.AnimatorListenerAdapter;
13a16
> import android.graphics.Paint;
18a22
> import android.view.View;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/MemberRequestCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/MemberRequestCell.java
15d14
< import org.telegram.messenger.ChatObject;
36c35
<     public MemberRequestCell(@NonNull Context context, OnClickListener clickListener, boolean isChannel, TLRPC.Chat chat) {
---
>     public MemberRequestCell(@NonNull Context context, OnClickListener clickListener, boolean isChannel) {
92,114d90
< 
<         float dismissButtonWidth = dismissButton.getPaint().measureText(dismissButton.getText().toString()) + btnPadding * 2;
<         TextView banButton = new TextView(getContext());
<         banButton.setBackground(Theme.AdaptiveRipple.filledRect(Theme.key_text_RedRegular, 4));
<         banButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
<         banButton.setMaxLines(1);
<         banButton.setPadding(btnPadding, 0, btnPadding, 0);
<         banButton.setText(LocaleController.getString("Ban", R.string.Ban));
<         banButton.setTextColor(Theme.getColor(Theme.key_featuredStickers_buttonText));
<         banButton.setTextSize(14);
<         banButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
<         banButton.setOnClickListener(v -> {
<             if (clickListener != null && importer != null) {
<                 clickListener.onBanClicked(importer);
<             }
<         });
<         FrameLayout.LayoutParams banLayoutParams = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, AndroidUtilities.dp(32), LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
<         banLayoutParams.topMargin = AndroidUtilities.dp(62);
<         banLayoutParams.leftMargin = LocaleController.isRTL ? 0 : (int) (addButtonWidth + dismissButtonWidth + AndroidUtilities.dp(73 + 6));
<         banLayoutParams.rightMargin = LocaleController.isRTL ? (int) (addButtonWidth + dismissButtonWidth + AndroidUtilities.dp(73 + 6)) : 0;
<         if (ChatObject.canBlockUsers(chat)) {
<             addView(banButton, banLayoutParams);
<         }
172,173d147
< 
<         void onBanClicked(TLRPC.TL_chatInviteImporter importer);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/PollEditTextCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/PollEditTextCell.java
47d46
<     private ImageView iconImageView;
60,63d58
<         this(context, caption, onDelete, null);
<     }
< 
<     public PollEditTextCell(Context context, boolean caption, OnClickListener onDelete, OnClickListener onChangeIcon) {
108d102
<             textView.setShowDisableMarkdown(true);
187,196d180
<         } else if (onChangeIcon != null) {
<             addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 19 : 66, 0, !LocaleController.isRTL ? 19 : 66, 0));
<             iconImageView = new ImageView(context);
<             iconImageView.setFocusable(true);
<             iconImageView.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_stickers_menuSelector)));
<             iconImageView.setScaleType(ImageView.ScaleType.CENTER);
<             iconImageView.setOnClickListener(onChangeIcon);
<             iconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteGrayIcon), PorterDuff.Mode.MULTIPLY));
<             iconImageView.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
<             addView(iconImageView, LayoutHelper.createFrame(48, 48, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 8, 2, 8, 0));
202,205d185
<     public void setIcon(int icon, String name) {
<         iconImageView.setImageResource(icon);
<     }
< 
223,225d202
<         if (iconImageView != null) {
<             iconImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
55,56c55,56
<     private final ImageReceiver avatarImage;
<     private final AvatarDrawable avatarDrawable;
---
>     private ImageReceiver avatarImage;
>     private AvatarDrawable avatarDrawable;
74c74
<     private final int currentAccount = UserConfig.selectedAccount;
---
>     private int currentAccount = UserConfig.selectedAccount;
92c92
<     private final int countTop = AndroidUtilities.dp(19);
---
>     private int countTop = AndroidUtilities.dp(19);
106c106
<     private final RectF rect = new RectF();
---
>     private RectF rect = new RectF();
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/RadioButtonCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/RadioButtonCell.java
93,96d92
<     public boolean isChecked() {
<         return radioButton.isChecked();
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
27d26
< import org.telegram.ui.ActionBar.SimpleTextView;
30a30
> import org.telegram.ui.ActionBar.SimpleTextView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
62,64d61
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
134c131
<     private final ImageReceiver linkImageView;
---
>     private ImageReceiver linkImageView;
136,137c133,134
<     private final LetterDrawable letterDrawable;
<     private final CheckBox2 checkBox;
---
>     private LetterDrawable letterDrawable;
>     private CheckBox2 checkBox;
145,150c142,147
<     private final ArrayList<StaticLayout> linkLayout = new ArrayList<>();
<     private final SparseArray<List<SpoilerEffect>> linkSpoilers = new SparseArray<>();
<     private final List<SpoilerEffect> descriptionLayoutSpoilers = new ArrayList<>();
<     private final List<SpoilerEffect> descriptionLayout2Spoilers = new ArrayList<>();
<     private final Stack<SpoilerEffect> spoilersPool = new Stack<>();
<     private final Path path = new Path();
---
>     private ArrayList<StaticLayout> linkLayout = new ArrayList<>();
>     private SparseArray<List<SpoilerEffect>> linkSpoilers = new SparseArray<>();
>     private List<SpoilerEffect> descriptionLayoutSpoilers = new ArrayList<>();
>     private List<SpoilerEffect> descriptionLayout2Spoilers = new ArrayList<>();
>     private Stack<SpoilerEffect> spoilersPool = new Stack<>();
>     private Path path = new Path();
154c151
<     private final int titleY = AndroidUtilities.dp(10);
---
>     private int titleY = AndroidUtilities.dp(10);
159c156
<     private final AtomicReference<Layout> patchedDescriptionLayout = new AtomicReference<>();
---
>     private AtomicReference<Layout> patchedDescriptionLayout = new AtomicReference<>();
163c160
<     private final AtomicReference<Layout> patchedDescriptionLayout2 = new AtomicReference<>();
---
>     private AtomicReference<Layout> patchedDescriptionLayout2 = new AtomicReference<>();
170,171c167,168
<     private final TextPaint titleTextPaint;
<     private final TextPaint descriptionTextPaint;
---
>     private TextPaint titleTextPaint;
>     private TextPaint descriptionTextPaint;
173c170
<     private final TextPaint captionTextPaint;
---
>     private TextPaint captionTextPaint;
337,340c334
<                             if (
<                                 ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly)
<                                     && e instanceof TLRPC.TL_messageEntitySpoiler && start <= se
<                                     && end >= ss) {
---
>                             if (e instanceof TLRPC.TL_messageEntitySpoiler && start <= se && end >= ss) {
343,344c337
<                                 sb.setSpan(new TextStyleSpan(run), Math.max(start, ss),
<                                     Math.min(end, se) + offset, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
---
>                                 sb.setSpan(new TextStyleSpan(run), Math.max(start, ss), Math.min(end, se) + offset, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
31d30
< import org.telegram.messenger.ApplicationLoader;
33d31
< import org.telegram.messenger.FileLoader;
34a33
> import org.telegram.messenger.LiteMode;
36a36,37
> import org.telegram.messenger.ApplicationLoader;
> import org.telegram.messenger.FileLoader;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
78c78
<         nameTextView.setTextColor(Theme.key_windowBackgroundWhiteBlackText);
---
>         nameTextView.setTextColor(getThemedColor(Theme.key_windowBackgroundWhiteBlackText));
88c88
<             distanceTextView.setTextColor(Theme.key_windowBackgroundWhiteGrayText3);
---
>             distanceTextView.setTextColor(getThemedColor(Theme.key_windowBackgroundWhiteGrayText3));
159,160c159,160
<             drawable.setColorFilter(new PorterDuffColorFilter(Theme.key_location_sendLocationIcon, PorterDuff.Mode.SRC_IN));
<             int color = Theme.key_location_placeLocationBackground;
---
>             drawable.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_location_sendLocationIcon), PorterDuff.Mode.MULTIPLY));
>             int color = getThemedColor(Theme.key_location_placeLocationBackground);
285c285
<             color = Theme.key_dialog_liveLocationProgress;
---
>             color = getThemedColor(Theme.key_dialog_liveLocationProgress);
287c287
<             color = Theme.key_location_liveLocationProgress;
---
>             color = getThemedColor(Theme.key_location_liveLocationProgress);
298a299,302
>     }
> 
>     private int getThemedColor(int key) {
>         return Theme.getColor(key, resourcesProvider);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java
30d29
< import org.telegram.messenger.SvgHelper;
35a35
> import org.telegram.messenger.SvgHelper;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
28a29
> import org.telegram.messenger.LiteMode;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckbox2Cell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckbox2Cell.java
20a21
> import org.telegram.messenger.R;
25a27
> import org.telegram.ui.Components.Switch;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
37d36
< import org.telegram.ui.Components.CheckBoxSquare;
43a43
> import java.util.Locale;
50,51c50
<     public Switch checkBox;
<     public CheckBoxSquare checkBoxSquare;
---
>     private Switch checkBox;
400c399
<         info.setClassName("android.widget.CheckBox");
---
>         info.setClassName("android.widget.Switch");
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
15a16
> import androidx.annotation.Keep;
21,22d21
< 
< import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
37,44d36
<         this(context, null);
<     }
< 
<     public TextDetailSettingsCell(Context context, Theme.ResourcesProvider resourcesProvider) {
<         this(context, false, resourcesProvider);
<     }
< 
<     public TextDetailSettingsCell(Context context, boolean valueOnly, Theme.ResourcesProvider resourcesProvider) {
48c40
<         textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText, resourcesProvider));
---
>         textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
58c50
<         valueTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText2, resourcesProvider));
---
>         valueTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText2));
65c57
<         addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 21, valueOnly ? 10 : 35, 21, 0));
---
>         addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 21, 35, 21, 0));
69c61
<         imageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteGrayIcon, resourcesProvider), PorterDuff.Mode.MULTIPLY));
---
>         imageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteGrayIcon), PorterDuff.Mode.MULTIPLY));
114,121d105
<     public void setTextAndValueWithEmoji(String text, CharSequence value, boolean divider) {
<         textView.setText(text);
<         valueTextView.setText(Emoji.replaceEmoji(value, valueTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(13), false));
<         needDivider = divider;
<         imageView.setVisibility(GONE);
<         setWillNotDraw(!divider);
<     }
< 
142,150d125
<     }
< 
<     @Override
<     public void setEnabled(boolean enabled) {
<         super.setEnabled(enabled);
<         textView.setAlpha(enabled ? 1.0f : 0.5f);
<         if (valueTextView.getVisibility() == VISIBLE) {
<             valueTextView.setAlpha(enabled ? 1.0f : 0.5f);
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
28d27
< import org.telegram.ui.ActionBar.Theme;
29a29
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextRadioCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextRadioCell.java
64,67d63
<     public TextRadioCell(Context context, Theme.ResourcesProvider resourcesProvider) {
<         this(context, 21, false, resourcesProvider);
<     }
< 
73,76d68
<         this(context, padding, dialog, null);
<     }
< 
<     public TextRadioCell(Context context, int padding, boolean dialog, Theme.ResourcesProvider resourcesProvider) {
82c74
<         textView.setTextColor(Theme.getColor(dialog ? Theme.key_dialogTextBlack : Theme.key_windowBackgroundWhiteBlackText, resourcesProvider));
---
>         textView.setTextColor(Theme.getColor(dialog ? Theme.key_dialogTextBlack : Theme.key_windowBackgroundWhiteBlackText));
92c84
<         valueTextView.setTextColor(Theme.getColor(dialog ? Theme.key_dialogIcon : Theme.key_windowBackgroundWhiteGrayText2, resourcesProvider));
---
>         valueTextView.setTextColor(Theme.getColor(dialog ? Theme.key_dialogIcon : Theme.key_windowBackgroundWhiteGrayText2));
105c97
<         radioButton.setColor(Theme.getColor(Theme.key_radioBackground, resourcesProvider), Theme.getColor(Theme.key_radioBackgroundChecked, resourcesProvider));
---
>         radioButton.setColor(Theme.getColor(Theme.key_radioBackground), Theme.getColor(Theme.key_radioBackgroundChecked));
189c181
<     public void setTextAndValueAndCheck(CharSequence text, CharSequence value, boolean checked, boolean multiline, boolean divider) {
---
>     public void setTextAndValueAndCheck(String text, String value, boolean checked, boolean multiline, boolean divider) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSelectionHelper.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSelectionHelper.java
11d10
< import android.content.Intent;
61a61
> import org.telegram.ui.RestrictedLanguagesSelectActivity;
65,66d64
< import top.qwq2333.nullgram.helpers.TranslateHelper;
< 
1291,1292c1289
<                 menu.add(Menu.NONE, android.R.id.shareText, 2, LocaleController.getString("ShareFile", R.string.ShareFile));
<                 menu.add(Menu.NONE, android.R.id.textAssist, 3, LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
---
>                 menu.add(Menu.NONE, TRANSLATE, 2, LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
1306c1303
<                 if (LanguageDetector.hasSupport() && getSelectedText() != null) {
---
>                 if (onTranslateListener != null && LanguageDetector.hasSupport() && getSelectedText() != null) {
1308c1305
<                         translateFromLanguage = TranslateHelper.stripLanguageCode(lng);
---
>                         translateFromLanguage = lng;
1325c1322,1331
<                 menu.getItem(3).setVisible(!LanguageDetector.hasSupport() || translateFromLanguage != null && !TranslateHelper.isLanguageRestricted(translateFromLanguage));
---
>                 String translateToLanguage = LocaleController.getInstance().getCurrentLocale().getLanguage();
>                 menu.getItem(2).setVisible(
>                     onTranslateListener != null && (
>                         (
>                             translateFromLanguage != null &&
>                             (!translateFromLanguage.equals(translateToLanguage) || translateFromLanguage.equals("und")) &&
>                             !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(translateFromLanguage)
>                         ) || !LanguageDetector.hasSupport()
>                     )
>                 );
1333,1334c1339,1340
<                 int itemId = item.getItemId();
<                 if (itemId == android.R.id.copy) {
---
>                 switch (item.getItemId()) {
>                     case android.R.id.copy:
1337c1343
<                 } else if (itemId == android.R.id.selectAll) {
---
>                     case android.R.id.selectAll:
1348,1350c1354,1357
<                 } else if (itemId == android.R.id.textAssist) {
<                     if (!isSelectionMode()) {
<                         return true;
---
>                     case TRANSLATE:
>                         if (onTranslateListener != null) {
>                             String translateToLanguage = LocaleController.getInstance().getCurrentLocale().getLanguage();
>                             onTranslateListener.run(getSelectedText(), translateFromLanguage, translateToLanguage, () -> showActions());
1352,1356d1358
<                     CharSequence str = getSelectedText();
<                     if (str == null) {
<                         return true;
<                     }
<                     TranslateHelper.showTranslateDialog(textSelectionOverlay.getContext(), str.toString(), null, translateFromLanguage, null);
1358,1365d1359
<                     clear(true);
<                     if (TextSelectionHelper.this.callback != null) {
<                         TextSelectionHelper.this.callback.onTextTranslated();
<                     }
< 
<                     clear();
<                 } else if (itemId == android.R.id.shareText) {
<                     if (!isSelectionMode()) {
1367,1385c1361
<                     }
<                     CharSequence str = getSelectedText();
<                     if (str == null) {
<                         return true;
<                     }
<                     Intent shareIntent = new Intent(Intent.ACTION_SEND);
<                     shareIntent.setType("text/plain");
<                     shareIntent.putExtra(Intent.EXTRA_TEXT, str);
<                     Intent chooserIntent = Intent.createChooser(shareIntent, LocaleController.getString("ShareFile", R.string.ShareFile));
<                     chooserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
<                     ApplicationLoader.applicationContext.startActivity(chooserIntent);
<                     hideActions();
<                     clear(true);
<                     if (TextSelectionHelper.this.callback != null) {
<                         TextSelectionHelper.this.callback.onTextTranslated();
<                     }
< 
<                     clear();
<                 } else {
---
>                     default:
1645d1620
<         public void onTextTranslated(){};
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
346c346
<         if (isEnabled()) valueTextView.setAlpha(1f - drawLoadingProgress);
---
>         valueTextView.setAlpha(1f - drawLoadingProgress);
350c350,351
<             canvas.drawLine(LocaleController.isRTL ? 0 : AndroidUtilities.dp(20), getMeasuredHeight() - 1, getMeasuredWidth() - (LocaleController.isRTL ? AndroidUtilities.dp(20) : 0), getMeasuredHeight() - 1, Theme.dividerPaint);
---
>             int offset = AndroidUtilities.dp(imageView.getVisibility() == View.VISIBLE ? 71 : 20);
>             canvas.drawLine(LocaleController.isRTL ? 0 : offset, getMeasuredHeight() - 1, getMeasuredWidth() - (LocaleController.isRTL ? offset : 0), getMeasuredHeight() - 1, Theme.dividerPaint);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
42d41
< import org.telegram.ui.Components.Bulletin;
61d59
<     private ImageView mutualView;
97,100d94
<     public UserCell(Context context, int padding, int checkbox, boolean admin, boolean needAddButton, boolean needMutualIcon) {
<         this(context, padding, checkbox, admin, needAddButton, needMutualIcon, null);
<     }
< 
102,105d95
<         this(context, padding, checkbox, admin, needAddButton, false, resourcesProvider);
<     }
< 
<     public UserCell(Context context, int padding, int checkbox, boolean admin, boolean needAddButton, boolean needMutualIcon, Theme.ResourcesProvider resourcesProvider) {
171,183d160
<         if (needMutualIcon) {
<             mutualView = new ImageView(context);
<             mutualView.setImageResource(R.drawable.ic_round_swap_horiz_24);
<             mutualView.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_player_actionBarSelector, resourcesProvider)));
<             mutualView.setScaleType(ImageView.ScaleType.CENTER);
<             mutualView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteGrayIcon, resourcesProvider), PorterDuff.Mode.MULTIPLY));
<             mutualView.setVisibility(GONE);
<             mutualView.setContentDescription(LocaleController.getString("MutualContact", R.string.MutualContact));
<             mutualView.setOnClickListener(v -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.showBulletin, Bulletin.TYPE_ERROR, LocaleController.getString("MutualContactDescription", R.string.MutualContactDescription)));
<             mutualView.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
<             addView(mutualView, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 8 : 0, 0, LocaleController.isRTL ? 0 : 8, 0));
<         }
< 
576,582d552
<         }
< 
<         if (mutualView != null) {
<             mutualView.setVisibility(currentUser != null && currentUser.mutual_contact ? VISIBLE : GONE);
<             if (currentUser != null && currentUser.mutual_contact) {
<                 nameTextView.setContentDescription(nameTextView.getText() + " (" + LocaleController.getString("MutualContact", R.string.MutualContact) + ")");
<             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
22a23,24
> import org.telegram.tgnet.ConnectionsManager;
> import org.telegram.tgnet.TLRPC;
27,28d28
< import org.telegram.tgnet.ConnectionsManager;
< import org.telegram.tgnet.TLRPC;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
138,140d137
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
2290c2287
<         if (Browser.isInternalUrl(url, null) || !ask || ConfigManager.getBooleanOrFalse(Defines.skipOpenLinkConfirm)) {
---
>         if (Browser.isInternalUrl(url, null) || !ask) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
140c140
<     private final ArrayList<AdminedChannelCell> adminedChannelCells = new ArrayList<>();
---
>     private ArrayList<AdminedChannelCell> adminedChannelCells = new ArrayList<>();
143c143
<     private final int currentStep;
---
>     private int currentStep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
89d88
< import android.widget.DatePicker;
107a107
> import androidx.exifinterface.media.ExifInterface;
116a117
> import com.google.android.exoplayer2.util.Log;
121a123
> import org.telegram.messenger.AnimationNotificationsLocker;
152a155
> import org.telegram.messenger.TranslateController;
285a289
> import org.telegram.ui.Components.TranslateButton;
323,336d326
< import kotlin.Unit;
< import top.qwq2333.nullgram.activity.MessageDetailActivity;
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.config.DialogConfig;
< import top.qwq2333.nullgram.config.ForwardContext;
< import top.qwq2333.nullgram.helpers.QrHelper;
< import top.qwq2333.nullgram.helpers.TranslateHelper;
< import top.qwq2333.nullgram.translate.LanguageDetectorTimeout;
< import top.qwq2333.nullgram.ui.TranslatorSettingsPopupWrapper;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.MessageUtils;
< import top.qwq2333.nullgram.utils.PermissionUtils;
< 
338c328
< public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate, ChatActivityInterface, FloatingDebugProvider, ForwardContext {
---
> public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate, ChatActivityInterface, FloatingDebugProvider {
398d387
<     private ImageView selectButton;
464c453,455
<     private View topViewSeparator1, topViewSeparator2;
---
>     private TranslateButton translateButton;
>     @Nullable
>     private View topViewSeparator1, topViewSeparator2, topViewSeparator3;
621d611
<     private AnimatorSet selectButtonAnimation;
637d626
<     private ArrayList<QrHelper.QrResult> qrResults;
936c925
<     private final Runnable fragmentTransitionRunnable = new Runnable() {
---
>     private Runnable fragmentTransitionRunnable = new Runnable() {
991,999d979
<     private final static int OPTION_QR = 84;
<     private final static int OPTION_COPY_PHOTO = 86;
<     private final static int OPTION_SAVE_STICKER_TO_GALLERY = 87;
<     private final static int OPTION_DETAIL = 89;
<     private final static int OPTION_VIEW_HISTORY = 90;
<     private final static int OPTION_DELETE_DOWNLOADED_FILE = 91;
<     private final static int OPTION_SAVE_MESSAGE = 93;
<     private final static int OPTION_REPEAT = 94;
<     private final static int OPTION_NOQUOTE_FORWARD = 95;
1224,1227c1204,1205
<         public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject,
<                                                                 TLRPC.FileLocation fileLocation, int index, boolean needPreview) {
<             return ChatActivity.this.getPlaceForPhoto(messageObject, fileLocation, needPreview,
<                 false);
---
>         public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index, boolean needPreview) {
>             return ChatActivity.this.getPlaceForPhoto(messageObject, fileLocation, needPreview, false);
1238c1216
<     private final PhotoViewer.PhotoViewerProvider botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
---
>     private PhotoViewer.PhotoViewerProvider botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
1309,1311d1286
<     private final static int delete_history = 101;
< 
< 
1324d1298
<     private final static int text_mention = 158;
1510,1514d1483
<             final int currentConfig = ConfigManager.getIntOrDefault(Defines.doubleTab, Defines.doubleTabReaction);
<             if (currentConfig == Defines.doubleTabNone || !(view instanceof ChatMessageCell)) {
<                 return false;
<             }
<             if (currentConfig == Defines.doubleTabReaction) {
1529,1578c1497
<                 return !cell.getMessageObject().isSending() && !cell.getMessageObject().isEditing() && cell.getMessageObject().type != 16 && !actionBar.isActionModeShowed() && !isSecretChat() && !isInScheduleMode() && !cell.getMessageObject().isSponsored();
<             } else {
<                 var cell = (ChatMessageCell) view;
<                 var message = cell.getMessageObject();
<                 var messageGroup = getValidGroupedMessage(message);
<                 var noforwards = getMessagesController().isChatNoForwards(currentChat) || message.messageOwner.noforwards;
<                 boolean allowChatActions = chatMode != MODE_SCHEDULED && (threadMessageObjects == null || !threadMessageObjects.contains(message)) &&
<                     !message.isSponsored() && (getMessageType(message) != 1 || message.getDialogId() != mergeDialogId) &&
<                     !(message.messageOwner.action instanceof TLRPC.TL_messageActionSecureValuesSent) &&
<                     (currentEncryptedChat != null || message.getId() >= 0) &&
<                     (bottomOverlayChat == null || bottomOverlayChat.getVisibility() != View.VISIBLE) &&
<                     (bottomOverlayChat == null || bottomOverlayChat.getVisibility() != View.VISIBLE || bottomOverlayChatWaitsReply && selectedObject != null && (MessageObject.getTopicId(selectedObject.messageOwner, false) != 0 || selectedObject.wasJustSent)) &&
<                     (currentChat == null || ((!ChatObject.isNotInChat(currentChat) || isThreadChat()) && (!ChatObject.isChannel(currentChat) || ChatObject.canPost(currentChat) || currentChat.megagroup) && ChatObject.canSendMessages(currentChat)));
<                 boolean allowEdit = message.canEditMessage(currentChat) && !chatActivityEnterView.hasAudioToSend() && message.getDialogId() != mergeDialogId;
<                 if (allowEdit && messageGroup != null) {
<                     int captionsCount = 0;
<                     for (int a = 0, N = messageGroup.messages.size(); a < N; a++) {
<                         MessageObject messageObject = messageGroup.messages.get(a);
<                         if (a == 0 || !TextUtils.isEmpty(messageObject.caption)) {
<                             selectedObjectToEditCaption = messageObject;
<                             if (!TextUtils.isEmpty(messageObject.caption)) {
<                                 captionsCount++;
<                             }
<                         }
<                     }
<                     allowEdit = captionsCount < 2;
<                 }
<                 switch (currentConfig) {
<                     case Defines.doubleTabReply:
<                         return message.getId() > 0 && allowChatActions;
<                     case Defines.doubleTabSaveMessages:
<                         return !message.isSponsored() && chatMode != MODE_SCHEDULED && (!message.needDrawBluredPreview() || message.hasExtendedMediaPreview()) && !message.isLiveLocation() && message.type != MessageObject.TYPE_PHONE_CALL && !noforwards && message.type != MessageObject.TYPE_GIFT_PREMIUM && !UserObject.isUserSelf(currentUser);
<                     case Defines.doubleTabRepeat:
<                         boolean allowRepeat = allowChatActions &&
<                             (!isThreadChat() && !noforwards || getMessageUtils().getMessageForRepeat(message, messageGroup) != null);
<                         return allowChatActions && (!(isThreadChat() && !isTopic) && !noforwards || getMessageUtils().getMessageForRepeat(message,
<                             messageGroup) != null) && !message.isSponsored() && chatMode != MODE_SCHEDULED && (!message.needDrawBluredPreview() ||
<                             message.hasExtendedMediaPreview()) && !message.isLiveLocation() && message.type != MessageObject.TYPE_PHONE_CALL &&
<                             message.type != MessageObject.TYPE_GIFT_PREMIUM && !UserObject.isUserSelf(currentUser);
<                     case Defines.doubleTabEdit:
<                         return allowEdit;
<                     case Defines.doubleTabTranslate:
<                         MessageObject messageObject = getMessageUtils().getMessageForTranslate(message, messageGroup);
<                         if (messageObject != null) {
<                             return true;
<                         }
<                         return false;
<                 }
<             }
<             return false;
---
>             return !cell.getMessageObject().isSending() && !cell.getMessageObject().isEditing() && cell.getMessageObject().type != MessageObject.TYPE_PHONE_CALL && !actionBar.isActionModeShowed() && !isSecretChat() && !isInScheduleMode() && !cell.getMessageObject().isSponsored();
1583,1588c1502
<             final int currentConfig = ConfigManager.getIntOrDefault(Defines.doubleTab, Defines.doubleTabReaction);
<             if (currentConfig == Defines.doubleTabNone || !(view instanceof ChatMessageCell) || getParentActivity() == null) {
<                 return;
<             }
<             if (currentConfig == Defines.doubleTabReaction) {
<                 if (isSecretChat() || isInScheduleMode()) {
---
>             if (!(view instanceof ChatMessageCell) || getParentActivity() == null || isSecretChat() || isInScheduleMode() || isInPreviewMode()) {
1592a1507,1509
>             if (primaryMessage.isSecretMedia()) {
>                 return;
>             }
1618,1655d1534
<             } else {
<                 var cell = (ChatMessageCell) view;
<                 var message = cell.getMessageObject();
<                 selectedObject = message;
<                 selectedObjectGroup = getValidGroupedMessage(message);
<                 switch (currentConfig) {
<                     case Defines.doubleTabReply:
<                         processSelectedOption(OPTION_REPLY);
<                         break;
<                     case Defines.doubleTabSaveMessages:
<                         processSelectedOption(OPTION_SAVE_MESSAGE);
<                         break;
<                     case Defines.doubleTabRepeat:
<                         processSelectedOption(OPTION_REPEAT);
<                         break;
<                     case Defines.doubleTabEdit:
<                         processSelectedOption(OPTION_EDIT);
<                         break;
<                     case Defines.doubleTabTranslate:
<                         if (!selectedObject.translated && LanguageDetector.hasSupport()) {
<                             final AtomicBoolean waitForLangDetection = new AtomicBoolean(false);
<                             final AtomicReference<Runnable> onLangDetectionDone = new AtomicReference(null);
<                             final String[] fromLang = {null};
<                             LanguageDetectorTimeout.detectLanguage(cell, getMessageUtils().getMessagePlainText(selectedObject), (String lang) -> {
<                                     fromLang[0] = TranslateHelper.stripLanguageCode(lang);
<                                     if (!TranslateHelper.isLanguageRestricted(lang)
<                                         || (currentChat != null && (currentChat.has_link || ChatObject.isPublic(currentChat) || selectedObject.messageOwner.fwd_from != null)) && (
<                                         "uk".equals(fromLang[0]) || "ru".equals(fromLang[0]))) {
<                                         translateOrResetMessage(selectedObject, fromLang[0]);
<                                     }
<                                 }, null, waitForLangDetection, onLangDetectionDone
<                             );
<                         } else {
<                             translateOrResetMessage(selectedObject, null);
<                         }
<                         break;
<                 }
<             }
2211,2214d2089
<         setForwardParams(
<             arguments.getBoolean("forward_noquote", false),
<             arguments.getBoolean("forward_nocaption", false)
<         );
2986,2988c2861,2862
<                 } else if (id == forward || id == OPTION_NOQUOTE_FORWARD) {
<                     setForwardParams(id == OPTION_NOQUOTE_FORWARD);
<                     openForward(true, id == OPTION_NOQUOTE_FORWARD);
---
>                 } else if (id == forward) {
>                     openForward(true);
3016,3017d2889
<                 } else if (id == delete_history) {
<                     getMessageUtils().createDeleteHistoryAlert(ChatActivity.this, currentChat, forumTopic, mergeDialogId, themeDelegate);
3145,3149d3016
<                 } else if (id == text_mention) {
<                     if (chatActivityEnterView != null && chatActivityEnterView.getEditField() != null) {
<                         chatActivityEnterView.getEditField().setSelectionOverride(editTextStart, editTextEnd);
<                         chatActivityEnterView.getEditField().makeSelectedMention();
<                     }
3459,3461c3326,3327
<             if (currentChat != null && (ChatObject.isMegagroup(currentChat) || !ChatObject.isChannel(currentChat))) {
<                 headerItem.addSubItem(delete_history, R.drawable.msg_delete, LocaleController.getString("DeleteAllFromSelf", R.string.DeleteAllFromSelf));
<             }
---
>             translateItem = headerItem.lazilyAddSubItem(translate, R.drawable.msg_translate, LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
>             updateTranslateItemVisibility();
5433c5299
<                 if (!ConfigManager.getBooleanOrFalse(Defines.disableJumpToNextChannel) && dy > 0 && scrolled == 0 && ChatObject.isChannel(currentChat) && !currentChat.megagroup && chatListView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING && !chatListView.isFastScrollAnimationRunning() && !chatListView.isMultiselect() && reportType < 0) {
---
>                 if (dy > 0 && scrolled == 0 && ChatObject.isChannel(currentChat) && !currentChat.megagroup && chatListView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING && !chatListView.isFastScrollAnimationRunning() && !chatListView.isMultiselect() && reportType < 0) {
5739,5782d5604
<         floatingDateView.setOnLongClickListener(view -> {
<             if (getParentActivity() == null) {
<                 return false;
<             }
<             AndroidUtilities.hideKeyboard(searchItem.getSearchField());
<             Calendar calendar = Calendar.getInstance();
<             int year = calendar.get(Calendar.YEAR);
<             int monthOfYear = calendar.get(Calendar.MONTH);
<             int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
<             try {
<                 DatePickerDialog dialog = new DatePickerDialog(getParentActivity(), (view1, year1, month, dayOfMonth1) -> {
<                     Calendar calendar1 = Calendar.getInstance();
<                     calendar1.clear();
<                     calendar1.set(year1, month, dayOfMonth1);
<                     int date = (int) (calendar1.getTime().getTime() / 1000);
<                     jumpToDate(date);
<                 }, year, monthOfYear, dayOfMonth);
<                 final DatePicker datePicker = dialog.getDatePicker();
<                 datePicker.setMinDate(1375315200000L);
<                 datePicker.setMaxDate(System.currentTimeMillis());
<                 dialog.setButton(DialogInterface.BUTTON_POSITIVE, LocaleController.getString("JumpToDate", R.string.JumpToDate), dialog);
<                 dialog.setButton(DialogInterface.BUTTON_NEUTRAL, LocaleController.getString("Cancel", R.string.Cancel), (dialog1, which) -> {
< 
<                 });
<                 dialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("JumpToBeginning", R.string.JumpToBeginning),(dialog2, which)->{
<                     scrollToMessageId(1, 0, false, 0, true, 0);
<                 } );
<                 if (Build.VERSION.SDK_INT >= 21) {
<                     dialog.setOnShowListener(dialog12 -> {
<                         int count = datePicker.getChildCount();
<                         for (int a = 0; a < count; a++) {
<                             View child = datePicker.getChildAt(a);
<                             ViewGroup.LayoutParams layoutParams = child.getLayoutParams();
<                             layoutParams.width = LayoutHelper.MATCH_PARENT;
<                             child.setLayoutParams(layoutParams);
<                         }
<                     });
<                 }
<                 showDialog(dialog);
<             } catch (Exception e) {
<                 Log.e(e);
<             }
<             return true;
<         });
5798a5621
>         topViewSeparator3 = null;
5801a5625
>         translateButton = null;
7305,7338d7128
<         selectButton = new ImageView(getContext());
<         selectButton.setContentDescription(LocaleController.getString("SelectBetween", R.string.SelectBetween));
<         selectButton.setPadding(AndroidUtilities.dp(21), 0, AndroidUtilities.dp(21), 0);
<         selectButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
<         image = getContext().getResources().getDrawable(R.drawable.ic_select_between).mutate();
<         image.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_actionBarActionModeDefaultIcon), PorterDuff.Mode.MULTIPLY));
<         selectButton.setImageDrawable(image);
<         selectButton.setOnClickListener(v -> {
<             ArrayList<Integer> ids = new ArrayList<>();
<             for (int a = 1; a >= 0; a--) {
<                 for (int b = 0; b < selectedMessagesIds[a].size(); b++) {
<                     ids.add(selectedMessagesIds[a].keyAt(b));
<                 }
<             }
<             Collections.sort(ids);
<             Integer begin = ids.get(0);
<             Integer end = ids.get(ids.size() - 1);
<             for (int i = 0; i < messages.size(); i++) {
<                 int msgId = messages.get(i).getId();
<                 if (msgId > begin && msgId < end && selectedMessagesIds[0].indexOfKey(msgId) < 0) {
<                     MessageObject message = messages.get(i);
< 
<                     if (message.contentType != 0) {
<                         continue;
<                     }
< 
<                     addToSelectedMessages(message, true);
<                 }
<             }
<             updateActionModeTitle();
<             updateVisibleRows();
<         });
<         bottomMessagesActionContainer.addView(selectButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.CENTER_HORIZONTAL | Gravity.TOP));
< 
7351,7354c7141
<         forwardButton.setOnClickListener(v -> {
<             setForwardParams(false);
<             openForward(false);
<         });
---
>         forwardButton.setOnClickListener(v -> openForward(false));
7512a7300,7303
>         topViewSeparator3 = new View(getContext());
>         topViewSeparator3.setVisibility(View.GONE);
>         topViewSeparator3.setBackgroundColor(getThemedColor(Theme.key_divider));
>         topChatPanelView.addView(topViewSeparator3, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 1f / AndroidUtilities.density, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 38));
7612a7404,7430
>         if (translateButton != null || getContext() == null) {
>             return;
>         }
> 
>         createTopPanel();
>         if (topChatPanelView == null) {
>             return;
>         }
>         translateButton = new TranslateButton(getContext(), this, themeDelegate) {
>             @Override
>             protected void onButtonClick() {
>                 if (getUserConfig().isPremium()) {
>                     getMessagesController().getTranslateController().toggleTranslatingDialog(getDialogId());
>                 } else {
>                     MessagesController.getNotificationsSettings(currentAccount).edit().putInt("dialog_show_translate_count" + getDialogId(), 14).commit();
>                     showDialog(new PremiumFeatureBottomSheet(ChatActivity.this, PremiumPreviewFragment.PREMIUM_FEATURE_TRANSLATIONS, false));
>                 }
>                 updateTopPanel(true);
>             }
> 
>             @Override
>             protected void onCloseClick() {
>                 MessagesController.getNotificationsSettings(currentAccount).edit().putInt("dialog_show_translate_count" + getDialogId(), 140).commit();
>                 updateTopPanel(true);
>             }
>         };
>         topChatPanelView.addView(translateButton, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 36, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 2));
7648,7650d7465
<             if (ConfigManager.getBooleanOrDefault(Defines.showNoQuoteForward, true)) {
<                 actionModeViews.add(actionMode.addItemWithWidth(OPTION_NOQUOTE_FORWARD, R.drawable.msg_noquote_forward, AndroidUtilities.dp(54), LocaleController.getString("NoQuoteForward", R.string.NoQuoteForward)));
<             }
7658a7474
>         actionMode.getItem(copy).setVisibility(!getMessagesController().isChatNoForwards(currentChat) && selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
7994d7809
<         item.addSubItem(text_mention, LocaleController.getString("CreateMention", R.string.CreateMention));
8111,8114d7925
<                     setForwardParams(
<                         forwardingMessages.hideForwardSendersName,
<                         forwardingMessages.hideCaption
<                     );
9283,9286d9093
<         openForward(fromActionBar, false);
<     }
< 
<     private void openForward(boolean fromActionBar, boolean noquote) {
9313c9120
<                 fwdRestrictedTopHint.showForView(actionBar.getActionMode().getItem(noquote ? OPTION_NOQUOTE_FORWARD : forward), true);
---
>                 fwdRestrictedTopHint.showForView(actionBar.getActionMode().getItem(forward), true);
10605,10606c10412,10417
<             if (!PermissionUtils.isImagesAndVideoPermissionGranted()) {
<                 PermissionUtils.requestImagesAndVideoPermission(getParentActivity());
---
>             if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
>                 try {
>                     getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE);
>                 } catch (Throwable ignore) {
> 
>                 }
10833c10644
<                     URLSpan[] spans = ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpan.class);
---
>                     URLSpanReplacement[] spans = ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpanReplacement.class);
10838,10842c10649,10650
<                         for (var span : spans) {
<                             var url = span.getURL();
<                             if (url.startsWith("http")) {
<                                 urls.add(span.getURL());
<                             }
---
>                         for (int a = 0; a < spans.length; a++) {
>                             urls.add(spans[a].getURL());
10942,10945d10749
<         forwardMessages(arrayList, fromMyName, hideCaption, notify, scheduleDate, 0);
<     }
< 
<     private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName, boolean hideCaption, boolean notify, int scheduleDate, long did) {
10955c10759
<         int result = getSendMessagesHelper().sendMessage(arrayList, did != 0 ? did : dialog_id, fromMyName, hideCaption, notify, scheduleDate, getThreadMessage());
---
>         int result = getSendMessagesHelper().sendMessage(arrayList, dialog_id, fromMyName, hideCaption, notify, scheduleDate, getThreadMessage());
11069,11072c10873,10874
<                         editButtonText = LocaleController.getString("EditMessageEditPhoto",
<                             R.string.EditMessageEditPhoto);
<                         replaceButtonText = LocaleController.getString("EditMessageReplacePhoto",
<                             R.string.EditMessageReplacePhoto);
---
>                         editButtonText = LocaleController.getString("EditMessageEditPhoto", R.string.EditMessageEditPhoto);
>                         replaceButtonText = LocaleController.getString("EditMessageReplacePhoto", R.string.EditMessageReplacePhoto);
11074,11077c10876,10877
<                         editButtonText = LocaleController.getString("EditMessageEditVideo",
<                             R.string.EditMessageEditVideo);
<                         replaceButtonText = LocaleController.getString("EditMessageReplaceVideo",
<                             R.string.EditMessageReplaceVideo);
---
>                         editButtonText = LocaleController.getString("EditMessageEditVideo", R.string.EditMessageEditVideo);
>                         replaceButtonText = LocaleController.getString("EditMessageReplaceVideo", R.string.EditMessageReplaceVideo);
11219,11223d11018
<                 if (forwardParams.noQuote || forwardParams.noCaption) {
<                     forwardingMessages.hideForwardSendersName = forwardParams.noQuote;
<                     forwardingMessages.hideCaption = forwardParams.noCaption;
<                     setForwardParams(false, false);
<                 }
12796a12592,12594
>                     if (fragmentContextView != null) {
>                         fragmentContextView.onPanTranslationUpdate(y);
>                     }
14360c14158
<                     if ((messageObject.type == MessageObject.TYPE_TEXT || messageObject.isAnimatedEmoji() || messageObject.caption != null) && !(messageObject.messageOwner != null )) {
---
>                     if ((messageObject.type == MessageObject.TYPE_TEXT || messageObject.isAnimatedEmoji() || messageObject.caption != null) && !(messageObject.messageOwner != null && messageObject.messageOwner.noforwards)) {
14407d14204
<                 ActionBarMenuItem forwardNoQuoteItem = actionBar.createActionMode().getItem(OPTION_NOQUOTE_FORWARD);
14425,14435d14221
<                     if (forwardNoQuoteItem != null) {
<                         forwardNoQuoteItem.setEnabled(cantForwardMessagesCount == 0 || noforwards);
<                         animators.add(ObjectAnimator.ofFloat(forwardNoQuoteItem, View.ALPHA, cantForwardMessagesCount == 0 ? 1.0f : 0.5f));
< 
<                         if (noforwards) {
<                             if (forwardNoQuoteItem.getBackground() != null)
<                                 forwardNoQuoteItem.setBackground(null);
<                         } else if (forwardNoQuoteItem.getBackground() == null) {
<                             forwardNoQuoteItem.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 5));
<                         }
<                     }
14466,14469d14251
<                     if (forwardNoQuoteItem != null) {
<                         forwardNoQuoteItem.setEnabled(cantForwardMessagesCount == 0);
<                         forwardNoQuoteItem.setAlpha(cantForwardMessagesCount == 0 ? 1.0f : 0.5f);
<                     }
14473,14474c14255
<                             if (forwardButton.getBackground() != null)
<                                 forwardButton.setBackground(null);
---
>                             if (forwardButton.getBackground() != null) forwardButton.setBackground(null);
14781c14562
<                     if (command.command.equalsIgnoreCase("help")) {
---
>                     if (command.command.toLowerCase().equals("help")) {
14783c14564
<                     } else if (command.command.equalsIgnoreCase("settings")) {
---
>                     } else if (command.command.toLowerCase().equals("settings")) {
18713,18714c18494
<         if (sendAsPeersObj != null || currentChat == null || (!ChatObject.canSendAsPeers(currentChat) && !ConfigManager.getBooleanOrFalse(Defines.quickToggleAnonymous))
<             || chatActivityEnterView == null) {
---
>         if (sendAsPeersObj != null || currentChat == null || !ChatObject.canSendAsPeers(currentChat) || chatActivityEnterView == null) {
20710d20488
<         menu.add(R.id.menu_groupbolditalic, R.id.menu_mention, order++, LocaleController.getString("CreateMention", R.string.CreateMention));
22104a21883,21892
>         if (showTranslate) {
>             createTranslateButton();
>             if (translateButton != null) {
>                 translateButton.updateText();
>             }
>         }
>         if ((shownTranslateTopic || shownRestartTopic) && !show) {
>             showReport = showGeo = showShare = showBlock = showAdd = showArchive = showAddMembersToGroup = false;
>             show = true;
>         }
22110a21899,21901
>         if (translateButton != null) {
>             translateButton.setVisibility(showTranslate ? View.VISIBLE : View.GONE);
>         }
22275c22066
<         if (userBlocked || ((addToContactsButton == null || addToContactsButton.getVisibility() == View.GONE) && (reportSpamButton == null || reportSpamButton.getVisibility() == View.GONE) && (chatWithAdminTextView == null || chatWithAdminTextView.getVisibility() == View.GONE) && (restartTopicButton == null || restartTopicButton.getVisibility() == View.GONE))) {
---
>         if (userBlocked || ((addToContactsButton == null || addToContactsButton.getVisibility() == View.GONE) && (reportSpamButton == null || reportSpamButton.getVisibility() == View.GONE) && (chatWithAdminTextView == null || chatWithAdminTextView.getVisibility() == View.GONE) && (restartTopicButton == null || restartTopicButton.getVisibility() == View.GONE) && (translateButton == null || translateButton.getVisibility() == View.GONE))) {
22337a22129,22147
>         if (showTranslate) {
>             createTopPanel();
>             if (topChatPanelView == null) {
>                 return;
>             }
>             if (restartTopicButton.getVisibility() == View.VISIBLE ||
>                 reportSpamButton.getVisibility() == View.VISIBLE ||
>                 addToContactsButton.getVisibility() == View.VISIBLE ||
>                 user != null && !TextUtils.isEmpty(chatWithAdmin)
>             ) {
>                 topViewSeparator3.setVisibility(View.VISIBLE);
>             } else {
>                 topChatPanelHeight -= AndroidUtilities.dp(48);
>                 topViewSeparator3.setVisibility(View.GONE);
>             }
>             topChatPanelHeight += AndroidUtilities.dp(36);
>         } else if (topViewSeparator3 != null) {
>             topViewSeparator3.setVisibility(View.GONE);
>         }
22339c22149
<             topViewSeparator1.setVisibility((topViewSeparator2 != null && topViewSeparator2.getVisibility() == View.VISIBLE) ? View.VISIBLE : View.GONE);
---
>             topViewSeparator1.setVisibility((topViewSeparator3 != null && topViewSeparator3.getVisibility() == View.VISIBLE || topViewSeparator2 != null && topViewSeparator2.getVisibility() == View.VISIBLE) ? View.VISIBLE : View.GONE);
22916d22725
<                             run.urlEntity = entity;
23280,23293d23088
<     private static boolean isEmoji(String message) {
<         return message.matches("(?:[\uD83C\uDF00-\uD83D\uDDFF]|[\uD83E\uDD00-\uD83E\uDDFF]|" +
<             "[\uD83D\uDE00-\uD83D\uDE4F]|[\uD83D\uDE80-\uD83D\uDEFF]|" +
<             "[\u2600-\u26FF]\uFE0F?|[\u2700-\u27BF]\uFE0F?|\u24C2\uFE0F?|" +
<             "[\uD83C\uDDE6-\uD83C\uDDFF]{1,2}|" +
<             "[\uD83C\uDD70\uD83C\uDD71\uD83C\uDD7E\uD83C\uDD7F\uD83C\uDD8E\uD83C\uDD91-\uD83C\uDD9A]\uFE0F?|" +
<             "[\u0023\u002A\u0030-\u0039]\uFE0F?\u20E3|[\u2194-\u2199\u21A9-\u21AA]\uFE0F?|[\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55]\uFE0F?|" +
<             "[\u2934\u2935]\uFE0F?|[\u3030\u303D]\uFE0F?|[\u3297\u3299]\uFE0F?|" +
<             "[\uD83C\uDE01\uD83C\uDE02\uD83C\uDE1A\uD83C\uDE2F\uD83C\uDE32-\uD83C\uDE3A\uD83C\uDE50\uD83C\uDE51]\uFE0F?|" +
<             "[\u203C\u2049]\uFE0F?|[\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE]\uFE0F?|" +
<             "[\u00A9\u00AE]\uFE0F?|[\u2122\u2139]\uFE0F?|\uD83C\uDC04\uFE0F?|\uD83C\uDCCF\uFE0F?|" +
<             "[\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA]\uFE0F?)+");
<     }
< 
23538c23333
<                     if ((selectedObject.type == MessageObject.TYPE_TEXT || selectedObject.isAnimatedEmoji() || selectedObject.isAnimatedEmojiStickers() || getMessageCaption(selectedObject, selectedObjectGroup) != null)) {
---
>                     if ((selectedObject.type == MessageObject.TYPE_TEXT || selectedObject.isAnimatedEmoji() || selectedObject.isAnimatedEmojiStickers() || getMessageCaption(selectedObject, selectedObjectGroup) != null) && !noforwards) {
23579,23582c23374,23375
<                         if ((TranslateHelper.getCurrentStatus() != TranslateHelper.Status.External)) {
<                             MessageObject messageObject = getMessageUtils().getMessageForTranslate(selectedObject, selectedObjectGroup);
<                             if (messageObject != null) {
<                                 items.add(messageObject.translated && !messageObject.isVoiceTranscriptionOpen() ? LocaleController.getString("UndoTranslate", R.string.UndoTranslate) : LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
---
>                         if (selectedObject != null && selectedObject.contentType == 0 && (messageTextToTranslate != null && messageTextToTranslate.length() > 0 && !selectedObject.isAnimatedEmoji() && !selectedObject.isDice())) {
>                             items.add(LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
23586d23378
<                         }
23612a23405
>                     if (!noforwards) {
23615a23409
>                     }
23618,23620c23412
<                     icons.add(
<                         selectedObject.messageOwner.ttl_period != 0 ? R.drawable.msg_delete_auto
<                             : R.drawable.msg_delete);
---
>                     icons.add(selectedObject.messageOwner.ttl_period != 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete);
23634,23635c23426
<                                 items.add(LocaleController.getString("CallMessageReportProblem",
<                                     R.string.CallMessageReportProblem));
---
>                                 items.add(LocaleController.getString("CallMessageReportProblem", R.string.CallMessageReportProblem));
23645c23436
<                         if ((selectedObject.type == MessageObject.TYPE_TEXT || selectedObject.isDice() || selectedObject.isAnimatedEmoji() || selectedObject.isAnimatedEmojiStickers() || getMessageCaption(selectedObject, selectedObjectGroup) != null)) {
---
>                         if ((selectedObject.type == MessageObject.TYPE_TEXT || selectedObject.isDice() || selectedObject.isAnimatedEmoji() || selectedObject.isAnimatedEmojiStickers() || getMessageCaption(selectedObject, selectedObjectGroup) != null) && !noforwards) {
23654,23655c23445
<                                 items.add(
<                                     LocaleController.getString("ViewThread", R.string.ViewThread));
---
>                                 items.add(LocaleController.getString("ViewThread", R.string.ViewThread));
23693c23483
<                                 } else if (selectedObject.isDocument()) {
---
>                                 } else if (selectedObject.isDocument() && !noforwards) {
23705,23712c23495,23496
<                         } else if (type == 4 && !selectedObject.hasRevealedExtendedMedia()) {
<                             if (ConfigManager.getBooleanOrFalse(Defines.showDeleteDownloadFiles)
<                                 && selectedObject.getDocument() != null) {
<                                 items.add(LocaleController.getString("DeleteDownloadedFile",
<                                     R.string.DeleteDownloadedFile));
<                                 options.add(OPTION_DELETE_DOWNLOADED_FILE);
<                                 icons.add(R.drawable.msg_clear);
<                             }
---
>                         } else if (type == 4) {
>                             if (!noforwards && !selectedObject.hasRevealedExtendedMedia()) {
23715,23716c23499
<                                     items.add(LocaleController.getString("SaveToGallery",
<                                         R.string.SaveToGallery));
---
>                                         items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
23719,23720c23502
<                                     items.add(LocaleController.getString("ShareFile",
<                                         R.string.ShareFile));
---
>                                         items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
23748,23751d23529
<                                     if (ConfigManager.getBooleanOrFalse(Defines.showCopyPhoto)) {
<                                         items.add(LocaleController.getString("CopyPhoto", R.string.CopyPhoto));
<                                         options.add(OPTION_COPY_PHOTO);
<                                         icons.add(R.drawable.msg_copy);
23758a23537
>                             if (!noforwards) {
23762d23540
<                             if (!noforwards) {
23771,23773d23548
<                             items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
<                             options.add(OPTION_SAVE_TO_DOWNLOADS_OR_MUSIC);
<                             icons.add(R.drawable.msg_download);
23775,23782c23550
<                                 items.add(
<                                     LocaleController.getString("ShareFile", R.string.ShareFile));
<                                 options.add(OPTION_SHARE);
<                                 icons.add(R.drawable.msg_shareout);
<                             }
<                         } else if (type == 100) {
<                             items.add(LocaleController.getString("SaveToDownloads",
<                                 R.string.SaveToDownloads));
---
>                                 items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
23785,23787c23553
<                             if (!getMessagesController().isChatNoForwards(currentChat)) {
<                                 items.add(
<                                     LocaleController.getString("ShareFile", R.string.ShareFile));
---
>                                 items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
23791,23797c23557
<                         } else if (type == 6 && !selectedObject.hasRevealedExtendedMedia()) {
<                             if (ConfigManager.getBooleanOrFalse(Defines.showDeleteDownloadFiles)) {
<                                 items.add(LocaleController.getString("DeleteDownloadedFile",
<                                     R.string.DeleteDownloadedFile));
<                                 options.add(OPTION_DELETE_DOWNLOADED_FILE);
<                                 icons.add(R.drawable.msg_clear);
<                             }
---
>                         } else if (type == 6 && !noforwards && !selectedObject.hasRevealedExtendedMedia()) {
23804d23563
<                             if (!noforwards) {
23808d23566
<                             }
23811,23812c23569
<                                 items.add(
<                                     LocaleController.getString("AddToMasks", R.string.AddToMasks));
---
>                                 items.add(LocaleController.getString("AddToMasks", R.string.AddToMasks));
23816,23823c23573
<                                 if (!selectedObject.isAnimatedSticker()) {
<                                     items.add(LocaleController.getString("SaveToGallery",
<                                         R.string.SaveToGallery));
<                                     options.add(OPTION_SAVE_STICKER_TO_GALLERY);
<                                     icons.add(R.drawable.msg_gallery);
<                                 }
<                                 items.add(LocaleController.getString("AddToStickers",
<                                     R.string.AddToStickers));
---
>                                 items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
23828,23831c23578,23579
<                                     if (getMediaDataController().canAddStickerToFavorites()
<                                         && MessageObject.isStickerHasSet(document)) {
<                                         items.add(LocaleController.getString("AddToFavorites",
<                                             R.string.AddToFavorites));
---
>                                     if (getMediaDataController().canAddStickerToFavorites() && MessageObject.isStickerHasSet(document)) {
>                                         items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
23852a23601
>                                 if (!noforwards) {
23855a23605
>                                 }
23861,23866d23610
<                             if (!selectedObject.isAnimatedSticker()) {
<                                 items.add(LocaleController.getString("SaveToGallery",
<                                     R.string.SaveToGallery));
<                                 options.add(OPTION_SAVE_STICKER_TO_GALLERY);
<                                 icons.add(R.drawable.msg_gallery);
<                             }
23870,23871c23614
<                                     items.add(LocaleController.getString("AddToFavorites",
<                                         R.string.AddToFavorites));
---
>                                     items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
23876,23877c23619
<                                 items.add(LocaleController.getString("DeleteFromFavorites",
<                                     R.string.DeleteFromFavorites));
---
>                                 items.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
23888,23949d23629
<                             if (ConfigManager.getBooleanOrDefault(Defines.showNoQuoteForward, true) && !UserObject.isUserSelf(currentUser)) {
<                                 items.add(LocaleController.getString("NoQuoteForward", R.string.NoQuoteForward));
<                                 options.add(95);
<                                 icons.add(R.drawable.msg_noquote_forward);
<                             }
<                             if (ConfigManager.getBooleanOrFalse(Defines.showSaveMessages) && !UserObject.isUserSelf(currentUser)) {
<                                 items.add(LocaleController.getString("saveMessages", R.string.saveMessages));
<                                 options.add(OPTION_SAVE_MESSAGE);
<                                 icons.add(R.drawable.msg_saved);
<                             }
<                         }
<                         if (ConfigManager.getBooleanOrDefault(Defines.showRepeat, true)) {
<                             if (!selectedObject.isSponsored() && chatMode != MODE_SCHEDULED && (!selectedObject.needDrawBluredPreview() || selectedObject.hasExtendedMediaPreview()) &&
<                                 !selectedObject.isLiveLocation() && selectedObject.type != MessageObject.TYPE_PHONE_CALL &&
<                                 selectedObject.type != MessageObject.TYPE_GIFT_PREMIUM) {
<                                 boolean allowRepeat = allowChatActions && (!(isThreadChat() && !isTopic) && !noforwards || getMessageUtils().getMessageForRepeat(selectedObject,
<                                     selectedObjectGroup) != null);
<                                 if (allowRepeat) {
<                                     items.add(LocaleController.getString("Repeat", R.string.Repeat));
<                                     options.add(OPTION_REPEAT);
<                                     icons.add(R.drawable.msg_repeat);
<                                 }
<                             }
<                         }
<                         if (ConfigManager.getBooleanOrFalse(Defines.customQuickMessageEnabled)) {
<                             if (allowChatActions) {
<                                 items.add(ConfigManager.getStringOrDefault(Defines.customQuickMessageDisplayName, "NULL"));
<                                 options.add(Defines.customQuickMessageRow);
<                                 icons.add(R.drawable.msg_fave);
<                             }
<                         }
<                         if (ConfigManager.getBooleanOrDefault(Defines.showViewHistory, true)) {
<                             boolean allowViewHistory = currentChat != null && chatMode == 0 && !currentChat.broadcast && !(threadMessageObjects != null && threadMessageObjects.contains(message));
<                             if (allowViewHistory) {
<                                 items.add(LocaleController.getString("ViewUserHistory", R.string.ViewHistory));
<                                 options.add(OPTION_VIEW_HISTORY);
<                                 icons.add(R.drawable.msg_recent);
<                             }
<                         }
<                         if (ConfigManager.getBooleanOrFalse(Defines.showMessagesDetail)) {
<                             items.add(LocaleController.getString("MessageDetails", R.string.MessageDetails));
<                             options.add(OPTION_DETAIL);
<                             icons.add(R.drawable.msg_info);
<                         }
<                         boolean canViewStats = false;
<                         if (message.messageOwner.views > 0 || message.messageOwner.forwards > 0) {
<                             if (message.messageOwner.fwd_from != null && message.messageOwner.fwd_from.channel_post != 0) {
<                                 TLRPC.Chat fwdChat = getMessagesController().getChat(message.messageOwner.fwd_from.from_id.channel_id);
<                                 canViewStats = ChatObject.hasAdminRights(fwdChat);
<                             } else if (!message.isForwarded()) {
<                                 canViewStats = ChatObject.hasAdminRights(getCurrentChat());
<                             }
<                         }
<                         if (selectedObject.isPhoto()) {
<                             items.add(LocaleController.getString("QrCode", R.string.QrCode));
<                             options.add(OPTION_QR);
<                             icons.add(R.drawable.msg_qrcode);
<                         }
<                         if (canViewStats) {
<                             items.add(LocaleController.getString("ViewStats", R.string.ViewStats));
<                             options.add(OPTION_STATISTICS);
<                             icons.add(R.drawable.msg_stats);
23960,23963c23640,23641
<                         if ((TranslateHelper.getCurrentStatus() != TranslateHelper.Status.External)) {
<                             MessageObject messageObject = getMessageUtils().getMessageForTranslate(selectedObject, selectedObjectGroup);
<                             if (messageObject != null) {
<                                 items.add(messageObject.translated && !messageObject.isVoiceTranscriptionOpen() ? LocaleController.getString("UndoTranslate", R.string.UndoTranslate) : LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
---
>                         if (selectedObject != null && selectedObject.contentType == 0 && (messageTextToTranslate != null && messageTextToTranslate.length() > 0 && !selectedObject.isAnimatedEmoji() && !selectedObject.isDice())) {
>                             items.add(LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
23967d23644
<                         }
24000c23677
<                         if ((selectedObject.type == MessageObject.TYPE_TEXT || selectedObject.isAnimatedEmoji() || selectedObject.isAnimatedEmojiStickers() || getMessageCaption(selectedObject, selectedObjectGroup) != null)) {
---
>                         if ((selectedObject.type == MessageObject.TYPE_TEXT || selectedObject.isAnimatedEmoji() || selectedObject.isAnimatedEmojiStickers() || getMessageCaption(selectedObject, selectedObjectGroup) != null) && !noforwards) {
24009,24010c23686
<                                 items.add(
<                                     LocaleController.getString("ViewThread", R.string.ViewThread));
---
>                                 items.add(LocaleController.getString("ViewThread", R.string.ViewThread));
24039d23714
<                                 if (!noforwards) {
24043d23717
<                                 }
24072a23747
>                                 if (!noforwards) {
24075a23751
>                                 }
24100d23775
<             final AtomicBoolean waitForQr = new AtomicBoolean(false);
24102d23776
<             final AtomicReference<Runnable> onQrDetectionDone = new AtomicReference(null);
24123c23797
<             if (isReactionsViewAvailable || showMessageSeen || showSponsorInfo || options.contains(OPTION_TRANSLATE) ) {
---
>             if (isReactionsViewAvailable || showMessageSeen || showSponsorInfo) {
24717,24725c24391,24396
<                         // "Translate" button
<                         MessageObject messageObject = getMessageUtils().getMessageForTranslate(selectedObject, selectedObjectGroup);
<                         if (messageObject == null) {
<                             continue;
<                         }
<                         var translatorSettingsPopupWrapper = new TranslatorSettingsPopupWrapper(this, popupLayout.getSwipeBack(), dialog_id, getTopicId(), getResourceProvider());
<                         int swipeBackIndex = popupLayout.addViewToSwipeBack(translatorSettingsPopupWrapper.windowLayout);
<                         cell.setOnLongClickListener(view -> {
<                             popupLayout.getSwipeBack().openForeground(swipeBackIndex);
---
>                         final boolean translateEnabled = getMessagesController().getTranslateController().isContextTranslateEnabled();
>                         String toLangDefault = LocaleController.getInstance().getCurrentLocale().getLanguage();
>                         String toLang = TranslateAlert2.getToLanguage();
>                         final CharSequence finalMessageText = messageTextToTranslate;
>                         Utilities.CallbackReturn<URLSpan, Boolean> onLinkPress = (link) -> {
>                             didPressMessageUrl(link, false, selectedObject, v instanceof ChatMessageCell ? (ChatMessageCell) v : null);
24726a24398,24424
>                         };
>                         TLRPC.InputPeer inputPeer = selectedObject != null && (selectedObject.isPoll() || selectedObject.isVoiceTranscriptionOpen() || selectedObject.isSponsored()) ? null : getMessagesController().getInputPeer(dialog_id);
>                         if (selectedObject != null && selectedObject.messageOwner != null && selectedObject.messageOwner.originalLanguage != null) {
>                             waitForLangDetection.set(false);
>                             String fromLang = selectedObject.messageOwner.originalLanguage;
>                             cell.setVisibility(
>                                 fromLang != null && (!fromLang.equals(toLang) || !fromLang.equals(toLangDefault) || fromLang.equals(TranslateController.UNKNOWN_LANGUAGE)) && (
>                                     translateEnabled && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(fromLang) ||
>                                     (currentChat != null && (currentChat.has_link || ChatObject.isPublic(currentChat)) || selectedObject.messageOwner.fwd_from != null) && ("uk".equals(fromLang) || "ru".equals(fromLang))
>                                 ) ? View.VISIBLE : View.GONE
>                             );
>                             cell.setOnClickListener(e -> {
>                                 if (selectedObject == null || i >= options.size() || getParentActivity() == null) {
>                                     return;
>                                 }
>                                 String toLangValue = fromLang != null && fromLang.equals(toLang) ? toLangDefault : toLang;
>                                 ArrayList<TLRPC.MessageEntity> entities = selectedObject != null && selectedObject.messageOwner != null ? selectedObject.messageOwner.entities : null;
>                                 TranslateAlert2 alert = TranslateAlert2.showAlert(getParentActivity(), this, currentAccount, inputPeer, messageIdToTranslate[0], fromLang, toLangValue, finalMessageText, entities, noforwards, onLinkPress, () -> dimBehindView(false));
>                                 alert.setDimBehind(false);
>                                 closeMenu(false);
> 
>                                 int hintCount = MessagesController.getNotificationsSettings(currentAccount).getInt("dialog_show_translate_count" + getDialogId(), 5);
>                                 if (hintCount > 0) {
>                                     hintCount--;
>                                     MessagesController.getNotificationsSettings(currentAccount).edit().putInt("dialog_show_translate_count" + getDialogId(), hintCount).apply();
>                                     updateTopPanel(true);
>                                 }
24727a24426
>                         } else if (LanguageDetector.hasSupport()) {
24730,24734c24429,24437
<                         translatorSettingsPopupWrapper.windowLayout.setVisibility(View.GONE);
<                         if (!messageObject.translated && LanguageDetector.hasSupport()) {
<                             LanguageDetectorTimeout.detectLanguage(cell, getMessageUtils().getMessagePlainText(messageObject), (String lang) -> {
<                                     fromLang[0] = TranslateHelper.stripLanguageCode(lang);
<                                     if (!TranslateHelper.isLanguageRestricted(lang) || (currentChat != null && (currentChat.has_link || ChatObject.isPublic(currentChat) || selectedObject.messageOwner.fwd_from != null)) && ("uk".equals(fromLang[0]) || "ru".equals(fromLang[0]))) {
---
>                             waitForLangDetection.set(true);
>                             LanguageDetector.detectLanguage(
>                                 finalMessageText.toString(),
>                                 (String lang) -> {
>                                     fromLang[0] = lang;
>                                     if (fromLang[0] != null && (!fromLang[0].equals(toLang) || !fromLang[0].equals(toLangDefault) || fromLang[0].equals(TranslateController.UNKNOWN_LANGUAGE)) && (
>                                         translateEnabled && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(fromLang[0]) ||
>                                         (currentChat != null && (currentChat.has_link || ChatObject.isPublic(currentChat)) || selectedObject.messageOwner.fwd_from != null) && ("uk".equals(fromLang[0]) || "ru".equals(fromLang[0]))
>                                     )) {
24736d24438
<                                         translatorSettingsPopupWrapper.windowLayout.setVisibility(View.VISIBLE);
24738,24742c24440,24443
<                                 }, null, waitForLangDetection, onLangDetectionDone
<                             );
<                         } else {
<                             cell.setVisibility(View.VISIBLE);
<                             translatorSettingsPopupWrapper.windowLayout.setVisibility(View.VISIBLE);
---
>                                     waitForLangDetection.set(false);
>                                     if (onLangDetectionDone.get() != null) {
>                                         onLangDetectionDone.get().run();
>                                         onLangDetectionDone.set(null);
24744c24445,24455
<                         cell.setOnClickListener(view -> {
---
>                                 },
>                                 (Exception e) -> {
>                                     FileLog.e("mlkit: failed to detect language in message");
>                                     waitForLangDetection.set(false);
>                                     if (onLangDetectionDone.get() != null) {
>                                         onLangDetectionDone.get().run();
>                                         onLangDetectionDone.set(null);
>                                     }
>                                 }
>                             );
>                             cell.setOnClickListener(e -> {
24748,24749c24459,24470
<                             translateOrResetMessage(messageObject, fromLang[0]);
<                             closeMenu();
---
>                                 String toLangValue = fromLang[0] != null && fromLang[0].equals(toLang) ? toLangDefault : toLang;
>                                 ArrayList<TLRPC.MessageEntity> entities = selectedObject != null && selectedObject.messageOwner != null ? selectedObject.messageOwner.entities : null;
>                                 TranslateAlert2 alert = TranslateAlert2.showAlert(getParentActivity(), this, currentAccount, inputPeer, messageIdToTranslate[0], fromLang[0], toLangValue, finalMessageText, entities, noforwards, onLinkPress, () -> dimBehindView(false));
>                                 alert.setDimBehind(false);
>                                 closeMenu(false);
> 
>                                 int hintCount = MessagesController.getNotificationsSettings(currentAccount).getInt("dialog_show_translate_count" + getDialogId(), 5);
>                                 if (hintCount > 0) {
>                                     hintCount--;
>                                     MessagesController.getNotificationsSettings(currentAccount).edit().putInt("dialog_show_translate_count" + getDialogId(), hintCount).apply();
>                                     updateTopPanel(true);
>                                 }
24750a24472,24474
>                             cell.postDelayed(() -> {
>                                 if (onLangDetectionDone.get() != null) {
>                                     onLangDetectionDone.getAndSet(null).run();
24752,24766c24476,24480
<                     if (option == OPTION_QR) {
<                         cell.setVisibility(View.GONE);
<                         this.qrResults = null;
<                         MessageUtils.readQrFromMessage(cell, selectedObject, selectedObjectGroup, chatListView, results -> {
<                             this.qrResults = results;
<                             if (qrResults.size() == 1) {
<                                 var text = qrResults.get(0).text;
<                                 var username = Browser.extractUsername(text);
<                                 if (username != null) {
<                                     cell.setSubtext("@" + username);
<                                 } else if (text.startsWith("http://") || text.startsWith("https://")) {
<                                     Uri uri = Uri.parse(qrResults.get(0).text);
<                                     cell.setSubtext(uri.getHost());
<                                 } else {
<                                     cell.setSubtext(null);
---
>                             }, 250);
>                         } else if (translateEnabled) {
>                             cell.setOnClickListener(e -> {
>                                 if (selectedObject == null || i >= options.size() || getParentActivity() == null) {
>                                     return;
24768,24771c24482,24494
<                                 cell.setVisibility(View.VISIBLE);
<                             } else if (!qrResults.isEmpty()) {
<                                 cell.setSubtext(null);
<                                 cell.setVisibility(View.VISIBLE);
---
>                                 TranslateAlert2 alert = TranslateAlert2.showAlert(getParentActivity(), this, currentAccount, inputPeer, messageIdToTranslate[0], "und", toLang, finalMessageText, null, noforwards, onLinkPress, () -> dimBehindView(false));
>                                 alert.setDimBehind(false);
>                                 closeMenu(false);
> 
>                                 int hintCount = MessagesController.getNotificationsSettings(currentAccount).getInt("dialog_show_translate_count" + getDialogId(), 5);
>                                 if (hintCount > 0) {
>                                     hintCount--;
>                                     MessagesController.getNotificationsSettings(currentAccount).edit().putInt("dialog_show_translate_count" + getDialogId(), hintCount).apply();
>                                     updateTopPanel(true);
>                                 }
>                             });
>                         } else {
>                             cell.setVisibility(View.GONE);
24773d24495
<                         }, waitForQr, onQrDetectionDone);
25155c24877
<         if (!ConfigManager.getBooleanOrFalse(Defines.disableGreetingSticker) && (distance >= 0 || preloadedGreetingsSticker != null) && currentUser != null && !userBlocked) {
---
>         if ((distance >= 0 || preloadedGreetingsSticker != null) && currentUser != null && !userBlocked) {
25187,25188d24908
<                 } else if (ConfigManager.getBooleanOrFalse(Defines.disableGreetingSticker)){
<                     emptyMessage = LocaleController.getString("NoMessages", R.string.NoMessages);
25503d25222
<         int start = str.length();
25575,25644d25293
<     private void translateOrResetMessage(MessageObject messageObject, String sourceLanguage) {
<         if (!messageObject.isVoiceTranscriptionOpen() && messageObject.translated && messageObject.originalMessage != null) {
<             if (messageObject.originalMessage instanceof String) {
<                 messageObject.messageOwner.message = (String) messageObject.originalMessage;
<             } else if (messageObject.originalMessage instanceof Pair) {
<                 var pair = (Pair<String, ArrayList<TLRPC.MessageEntity>>) messageObject.originalMessage;
<                 messageObject.messageOwner.message = pair.first;
<                 messageObject.messageOwner.entities = pair.second;
<             } else if (messageObject.originalMessage instanceof TLRPC.TL_poll) {
<                 ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll = (TLRPC.TL_poll) messageObject.originalMessage;
<             }
<             getMessageUtils().resetMessageContent(dialog_id, messageObject, false);
<         } else {
<             translateMessage(messageObject, sourceLanguage, false);
<         }
<     }
< 
<     private void translateMessage(MessageObject messageObject, String sourceLanguage, boolean autoTranslate) {
<         if (messageObject == null) {
<             return;
<         }
<         if (!autoTranslate && (TranslateHelper.getCurrentStatus() != TranslateHelper.Status.InMessage || messageObject.isVoiceTranscriptionOpen())) {
<             String message = getMessageUtils().getMessagePlainText(messageObject);
<             TranslateHelper.showTranslateDialog(getParentActivity(), message, this, sourceLanguage,
<                 link -> {
<                     didPressMessageUrl(link, false, selectedObject, null);
<                     return true;
<                 });
<             return;
<         }
<         getMessageUtils().resetMessageContent(dialog_id, messageObject, false, true);
<         Object original;
<         if (messageObject.isPoll()) {
<             original = ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll;
<         } else if (!TranslateHelper.getShowOriginal()) {
<             original = Pair.create(messageObject.messageOwner.message, messageObject.messageOwner.entities);
<         } else {
<             original = messageObject.messageOwner.message;
<         }
<         Object message;
<         if (messageObject.isPoll()) {
<             message = original;
<         } else {
<             message = messageObject.messageOwner.message;
<         }
<         TranslateHelper.translate(message, sourceLanguage, (translation, sourceLanguageT, targetLanguageT) -> {
<             if (autoTranslate && sourceLanguageT != null && (sourceLanguageT.equals(targetLanguageT) || TranslateHelper.isLanguageRestricted(sourceLanguageT))) {
<                 getMessageUtils().resetMessageContent(dialog_id, messageObject, false, false);
<                 return Unit.INSTANCE;
<             }
<             if (translation instanceof String) {
<                 if (original instanceof Pair) {
<                     messageObject.messageOwner.message = (String) translation;
<                     messageObject.messageOwner.entities = new ArrayList<>();
<                 } else {
<                     messageObject.messageOwner.message = messageObject.messageOwner.message + "\n" + "--------" + "\n" + translation;
<                 }
<             } else if (translation instanceof TLRPC.TL_poll) {
<                 ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll = (TLRPC.TL_poll) translation;
<             }
<             getMessageUtils().resetMessageContent(dialog_id, messageObject, true, original, false, Pair.create(TextUtils.isEmpty(sourceLanguageT) ? sourceLanguage : sourceLanguageT, targetLanguageT));
<             return Unit.INSTANCE;
<         }, e -> {
<             TranslateHelper.handleTranslationError(getParentActivity(), e, () -> translateMessage(messageObject, sourceLanguage, autoTranslate), themeDelegate);
<             getMessageUtils().resetMessageContent(dialog_id, messageObject, false, false);
<             return Unit.INSTANCE;
<         });
<     }
< 
< 
25683,25685c25332
<             case OPTION_FORWARD:
<             case OPTION_NOQUOTE_FORWARD: {
<                 setForwardParams(option == 95);
---
>             case OPTION_FORWARD: {
25704c25351
<                     /*CharSequence caption = getMessageCaption(selectedObject, selectedObjectGroup);
---
>                     CharSequence caption = getMessageCaption(selectedObject, selectedObjectGroup);
25707c25354
<                     } else {*/
---
>                     } else {
25709c25356
<                     //}
---
>                     }
26216,26217c25863
<                         progressDialog[0].setOnCancelListener(
<                             dialog -> getConnectionsManager().cancelRequest(requestId, true));
---
>                         progressDialog[0].setOnCancelListener(dialog -> getConnectionsManager().cancelRequest(requestId, true));
26221,26222c25867
<                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel),
<                     null);
---
>                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
26226,26354d25870
<             case OPTION_COPY_PHOTO: {
<                 getMessageUtils().addMessageToClipboard(selectedObject, () -> {
<                     if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
<                         BulletinFactory.of(this).createCopyBulletin(LocaleController.getString("PhotoCopied", R.string.PhotoCopied)).show();
<                     }
<                 });
<                 break;
<             }
<             case OPTION_SAVE_STICKER_TO_GALLERY: {
<                 if (Build.VERSION.SDK_INT >= 23 && (Build.VERSION.SDK_INT <= 28
<                     || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission(
<                     Manifest.permission.WRITE_EXTERNAL_STORAGE)
<                     != PackageManager.PERMISSION_GRANTED) {
<                     getParentActivity().requestPermissions(
<                         new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
<                     selectedObject = null;
<                     selectedObjectGroup = null;
<                     selectedObjectToEditCaption = null;
<                     return;
<                 }
<                 getMessageUtils().saveStickerToGallery(getParentActivity(), selectedObject, () -> {
<                     if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
<                         BulletinFactory.of(this)
<                             .createDownloadBulletin(BulletinFactory.FileType.STICKER, themeDelegate)
<                             .show();
<                     }
<                 });
<                 break;
<             }
<             case OPTION_DETAIL: {
<                 presentFragment(new MessageDetailActivity(selectedObject));
<                 break;
<             }
<             case OPTION_VIEW_HISTORY: {
<                 TLRPC.Peer peer = selectedObject.messageOwner.from_id;
<                 openSearchWithText("");
<                 if (peer.user_id != 0) {
<                     TLRPC.User user = getMessagesController().getUser(peer.user_id);
<                     searchUserMessages(user, null);
<                 } else if (peer.chat_id != 0) {
<                     TLRPC.Chat chat = getMessagesController().getChat(peer.chat_id);
<                     searchUserMessages(null, chat);
<                 } else if (peer.channel_id != 0) {
<                     TLRPC.Chat chat = getMessagesController().getChat(peer.channel_id);
<                     searchUserMessages(null, chat);
<                 }
<                 showMessagesSearchListView(true);
<                 break;
<             }
<             case OPTION_DELETE_DOWNLOADED_FILE: {
<                 if (Build.VERSION.SDK_INT >= 23 && (Build.VERSION.SDK_INT <= 28
<                     || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission(
<                     Manifest.permission.WRITE_EXTERNAL_STORAGE)
<                     != PackageManager.PERMISSION_GRANTED) {
<                     getParentActivity().requestPermissions(
<                         new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
<                     selectedObject = null;
<                     selectedObjectGroup = null;
<                     selectedObjectToEditCaption = null;
<                     return;
<                 }
<                 ChatMessageCell messageCell = null;
<                 int count = chatListView.getChildCount();
<                 for (int a = 0; a < count; a++) {
<                     View child = chatListView.getChildAt(a);
<                     if (child instanceof ChatMessageCell) {
<                         ChatMessageCell cell = (ChatMessageCell) child;
<                         if (cell.getMessageObject() == selectedObject) {
<                             messageCell = cell;
<                             break;
<                         }
<                     }
<                 }
<                 String path = selectedObject.messageOwner.attachPath;
<                 if (path != null && path.length() > 0) {
<                     File temp = new File(path);
<                     if (!temp.exists()) {
<                         path = null;
<                     }
<                 }
<                 if (path == null || path.length() == 0) {
<                     path = getFileLoader().getPathToMessage(selectedObject.messageOwner).toString();
<                 }
<                 File temp = new File(path);
<                 try {
<                     temp.delete();
<                     selectedObject.mediaExists = false;
<                 } catch (Exception ignore) {
<                     temp.deleteOnExit();
<                 }
<                 if (messageCell != null) {
<                     messageCell.updateButtonState(false, true, false);
<                 }
<                 break;
<             }
<             case OPTION_SAVE_MESSAGE: {
<                 ArrayList<MessageObject> messages = new ArrayList<>();
<                 if (selectedObjectGroup != null) {
<                     messages.addAll(selectedObjectGroup.messages);
<                 } else {
<                     messages.add(selectedObject);
<                 }
<                 forwardMessages(messages, false, false, true, 0, getUserConfig().getClientUserId());
<                 createUndoView();
<                 if (undoView != null) {
<                     undoView.showWithAction(getUserConfig().getClientUserId(), UndoView.ACTION_FWD_MESSAGES, messages.size());
<                 }
<                 break;
<             }
<             case OPTION_QR: {
<                 QrHelper.showQrDialog(this, themeDelegate, qrResults);
<                 break;
<             }
<             case OPTION_REPEAT: {
<                 if (checkSlowMode(chatActivityEnterView.getSendButton())) {
<                     return;
<                 }
<                 processRepeatMessage();
<                 break;
<             }
<             case Defines.customQuickMessageRow: {
<                 if (checkSlowMode(chatActivityEnterView.getSendButton())) {
<                     return;
<                 }
<                 getSendMessagesHelper().sendMessage(ConfigManager.getStringOrDefault(Defines.customQuickMessage, "NULL"),
<                     dialog_id, selectedObject, ConfigManager.getBooleanOrFalse(Defines.customQuickMsgSAR) ? threadMessageObject : null,
<                     null, false, null, null, null, true, 0, null, false);
<                 break;
<             }
26506c26022
<                     getSendMessagesHelper().sendMessage(message.toString(), did, null, null, null, true, null, null, null, forwardParams.notify, forwardParams.scheduleDate, null, false);
---
>                     getSendMessagesHelper().sendMessage(message.toString(), did, null, null, null, true, null, null, null, true, 0, null, false);
26508c26024
<                 getSendMessagesHelper().sendMessage(fmessages, did, forwardParams.noQuote, forwardParams.noCaption, forwardParams.notify, forwardParams.scheduleDate);
---
>                 getSendMessagesHelper().sendMessage(fmessages, did, false, false,true, 0);
26524,26525d26039
<                 args.putBoolean("forward_noquote", forwardParams.noQuote);
<                 args.putBoolean("forward_nocaption", forwardParams.noCaption);
27497,27498c27011,27012
<             boolean noforwards = false;
<             builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
---
>             boolean noforwards = getMessagesController().isChatNoForwards(currentChat) || (messageObject != null && messageObject.messageOwner != null && messageObject.messageOwner.noforwards);
>             builder.setItems(noforwards ? new CharSequence[] {LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
27706c27220
<         boolean noforwards = false;
---
>         boolean noforwards = getMessagesController().isChatNoForwards(currentChat) || (messageObject != null && messageObject.messageOwner != null && messageObject.messageOwner.noforwards);
27862c27376
<                 builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
---
>                 builder.setItems(noforwards ? new CharSequence[] {LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
27865c27379
<                     } else if (which == 1 || which == 2) {
---
>                     } else if (which == 1) {
27876d27389
<                         if (which == 2) {
27889,27896d27401
<                         } else {
<                             Intent shareIntent = new Intent(Intent.ACTION_SEND);
<                             shareIntent.setType("text/plain");
<                             shareIntent.putExtra(Intent.EXTRA_TEXT, url1);
<                             Intent chooserIntent = Intent.createChooser(shareIntent, LocaleController.getString("ShareFile", R.string.ShareFile));
<                             chooserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
<                             ApplicationLoader.applicationContext.startActivity(chooserIntent);
<                         }
28388,28391d27892
<                 boolean fromUserBlocked = getMessagesController().blockePeers.indexOfKey(message.getFromChatId()) >= 0
<                     && ConfigManager.getBooleanOrFalse(Defines.ignoreBlockedUser);
< 
< 
28761,28765d28261
<                     if (fromUserBlocked) {
<                         messageCell.setVisibility(View.GONE);
<                     } else {
<                         messageCell.setVisibility(View.VISIBLE);
<                     }
28861,28883d28356
< 
<                 if (DialogConfig.isAutoTranslateEnable(dialog_id, getTopicId()) && LanguageDetector.hasSupport() && TranslateHelper.getCurrentStatus() != TranslateHelper.Status.External) {
<                     final var messageObject = messageCell.getMessageObject();
<                     if (getMessageUtils().isMessageObjectAutoTranslatable(messageObject)) {
<                         messageObject.translating = true;
<                         LanguageDetector.detectLanguage(
<                             getMessageUtils().getMessagePlainText(messageObject),
<                             (String lang) -> {
<                                 if (!TranslateHelper.isLanguageRestricted(lang)) {
<                                     translateMessage(messageObject, TranslateHelper.stripLanguageCode(lang), true);
<                                 }
<                             },
<                             (Exception e) -> {
<                                 FileLog.e("mlkit: failed to detect language in message");
<                                 e.printStackTrace();
<                                 messageObject.translating = false;
<                             });
<                     }
<                 }
< 
<                 if (actionBar != null) {
<                     actionBar.unreadBadgeSetCount(getMessagesStorage().getMainUnreadCount());
<                 }
29724c29197
<         public boolean didLongPressBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button) {
---
>         public void didLongPressBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button) {
29730,29758d29202
<                 return false;
<             }
<             if (!TextUtils.isEmpty(button.url)) {
<                 openClickableLink(null, button.url, true, cell, cell.getMessageObject());
<             } else {
<                 BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, themeDelegate);
<                 builder.setTitle(button.text);
<                 builder.setItems(new CharSequence[]{
<                     LocaleController.getString("CopyTitle", R.string.CopyTitle),
<                     button.data != null ? LocaleController.getString("CopyCallback", R.string.CopyCallback) : null,
<                     button.url != null ? LocaleController.getString("CopyLink", R.string.CopyLink) : null,
<                     button.query != null ? LocaleController.getString("CopyInlineQuery", R.string.CopyInlineQuery) : null,
<                     button.user_id != 0 ? LocaleController.getString("CopyID", R.string.CopyID) : null,
<                     ConfigManager.getBooleanOrFalse(Defines.showHiddenSettings) && button.data != null ? LocaleController.getString("SendCallback", R.string.SendCallback) : null}, (dialog, which) -> {
<                     if (which == 0) {
<                         AndroidUtilities.addToClipboard(button.text);
<                     } else if (which == 1) {
<                         AndroidUtilities.addToClipboard(getMessageUtils().getTextOrBase64(button.data));
<                     } else if (which == 2) {
<                         AndroidUtilities.addToClipboard(button.url);
<                     } else if (which == 3) {
<                         AndroidUtilities.addToClipboard(button.query);
<                     } else if (which == 4) {
<                         AndroidUtilities.addToClipboard(String.valueOf(button.user_id));
<                     } else if (which == 5) {
<                         getMessageUtils().showSendCallbackDialog(ChatActivity.this, themeDelegate, button.data, cell.getMessageObject());
<                     }
<                     createUndoView();
<                     if (undoView == null) {
29761,29764c29205,29206
<                     undoView.showWithAction(0, UndoView.ACTION_TEXT_COPIED, null);
<                 });
<                 showDialog(builder.create());
<             }
---
>             if (button instanceof TLRPC.TL_keyboardButtonUrl) {
>                 openClickableLink(null, button.url, true, cell, cell.getMessageObject());
29768c29210
<             return true;
---
>             }
30171,30185d29612
<             } else if (message.type == MessageObject.TYPE_STICKER || message.type == MessageObject.TYPE_ANIMATED_STICKER) {
<                 int photoHeight = 0;
<                 int photoWidth = 0;
<                 TLRPC.Document document = message.getDocument();
<                 for (int a = 0, N = document.attributes.size(); a < N; a++) {
<                     TLRPC.DocumentAttribute attribute = document.attributes.get(a);
<                     if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
<                         photoWidth = attribute.w;
<                         photoHeight = attribute.h;
<                         break;
<                     }
<                 }
<                 if (photoWidth > 512 || photoHeight > 512) {
<                     openPhotoViewerForMessage(cell, message);
<                 }
30763a30191,30193
>             if (translateButton != null) {
>                 translateButton.updateColors();
>             }
31732c31162
<             return currentColors != null && currentColors.indexOfKey(key) >= 0;
---
>             return false;
32065d31494
<         int currentSelectedBackgroundColor;
32290c31719,31720
<         if (LanguageDetector.hasSupport()) {
---
>         final boolean translateButtonEnabled = MessagesController.getInstance(currentAccount).getTranslateController().isContextTranslateEnabled();
>         if (translateButtonEnabled && LanguageDetector.hasSupport()) {
32346,32426d31775
< 
<     public boolean processRepeatMessage() {
<         if ((isThreadChat() && !isTopic) || getMessagesController().isChatNoForwards(currentChat) || selectedObject.messageOwner.noforwards) {
<             var messageObject = getMessageUtils().getMessageForRepeat(selectedObject, selectedObjectGroup);
<             if (messageObject != null) {
<                 if (messageObject.isAnyKindOfSticker() && !messageObject.isAnimatedEmojiStickers() && !messageObject.isAnimatedEmoji() && !messageObject.isDice()) {
<                     getSendMessagesHelper().sendSticker(
<                         selectedObject.getDocument(), null, dialog_id, threadMessageObject,
<                         threadMessageObject, null, null, true, 0, false);
<                     return true;
<                 } else {
<                     var message = messageObject.messageOwner.message;
<                     if (!TextUtils.isEmpty(message)) {
<                         ArrayList<TLRPC.MessageEntity> entities;
<                         if (messageObject.messageOwner.entities != null && !messageObject.messageOwner.entities.isEmpty()) {
<                             entities = new ArrayList<>();
<                             for (TLRPC.MessageEntity entity : messageObject.messageOwner.entities) {
<                                 if (entity instanceof TLRPC.TL_messageEntityMentionName) {
<                                     TLRPC.TL_inputMessageEntityMentionName mention = new TLRPC.TL_inputMessageEntityMentionName();
<                                     mention.length = entity.length;
<                                     mention.offset = entity.offset;
<                                     mention.user_id = getMessagesController().getInputUser(((TLRPC.TL_messageEntityMentionName) entity).user_id);
<                                     entities.add(mention);
<                                 } else {
<                                     entities.add(entity);
<                                 }
<                             }
<                         } else {
<                             entities = null;
<                         }
<                         getSendMessagesHelper().sendMessage(
<                             message, dialog_id, threadMessageObject,
<                             threadMessageObject, null, false, entities,
<                             null, null, true, 0, null, false);
<                         return true;
<                     }
<                 }
<             }
<         } else {
<             ArrayList<MessageObject> messages = new ArrayList<>();
<             if (selectedObjectGroup != null) {
<                 messages.addAll(selectedObjectGroup.messages);
<             } else {
<                 messages.add(selectedObject);
<             }
<             forwardMessages(messages, false, false, true, 0);
<         }
<         return false;
<     }
< 
<     @Override
<     public ArrayList<MessageObject> getForwardingMessages() {
<         ArrayList<MessageObject> fmessages = new ArrayList<>();
<         if (forwardingMessage == null && selectedMessagesIds[0].size() == 0 && selectedMessagesIds[1].size() == 0) {
<             return fmessages;
<         }
<         if (forwardingMessage != null) {
<             if (forwardingMessageGroup != null) {
<                 fmessages.addAll(forwardingMessageGroup.messages);
<             } else {
<                 fmessages.add(forwardingMessage);
<             }
<         } else {
<             for (int a = 1; a >= 0; a--) {
<                 ArrayList<Integer> ids = new ArrayList<>();
<                 for (int b = 0; b < selectedMessagesIds[a].size(); b++) {
<                     ids.add(selectedMessagesIds[a].keyAt(b));
<                 }
<                 Collections.sort(ids);
<                 for (int b = 0; b < ids.size(); b++) {
<                     Integer id = ids.get(b);
<                     MessageObject messageObject = selectedMessagesIds[a].get(id);
<                     if (messageObject != null) {
<                         fmessages.add(messageObject);
<                     }
<                 }
<             }
<         }
<         return fmessages;
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChatEditActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChatEditActivity.java
177d176
<     private int realAdminCount = 0;
1200,1201d1198
<         } else if (stickersInfoCell == null) {
<             infoSectionCell.setBackground(Theme.getThemedDrawable(context, R.drawable.greydivider_bottom, Theme.key_windowBackgroundGrayShadow));
1492,1522d1488
<     private int getChannelAdminCount() {
<         if (info == null || info.participants == null || info.participants.participants == null) {
<             return 1;
<         }
<         int count = 0;
<         for (int a = 0, N = info.participants.participants.size(); a < N; a++) {
<             TLRPC.ChatParticipant chatParticipant = info.participants.participants.get(a);
<             TLRPC.ChannelParticipant channelParticipant = ((TLRPC.TL_chatChannelParticipant) chatParticipant).channelParticipant;
<             if (channelParticipant instanceof TLRPC.TL_channelParticipantAdmin ||
<                 channelParticipant instanceof TLRPC.TL_channelParticipantCreator) {
<                 count++;
<             }
<         }
<         return count;
<     }
< 
<     private void getRealChannelAdminCount() {
<         TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
<         req.channel = getMessagesController().getInputChannel(chatId);
<         req.filter = new TLRPC.TL_channelParticipantsAdmins();
<         int reqId = getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
<             if (adminCell == null || response == null) {
<                 return;
<             }
<             TLRPC.TL_channels_channelParticipants res = (TLRPC.TL_channels_channelParticipants) response;
<             realAdminCount = res.count;
<             adminCell.setTextAndValueAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), String.format("%d", res.count), R.drawable.msg_admin_add, true);
<         }));
<         getConnectionsManager().bindRequestToGuid(reqId, classGuid);
<     }
< 
1752c1718
<             logCell.setVisibility(!currentChat.megagroup || currentChat.gigagroup || info != null ? View.VISIBLE : View.GONE);
---
>             logCell.setVisibility(!currentChat.megagroup || currentChat.gigagroup || info != null && info.participants_count > 200 ? View.VISIBLE : View.GONE);
1846c1812
<                         membersCell.setTextAndValueAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), String.format("%d", info.participants_count), R.drawable.msg_groups, logCell != null && logCell.getVisibility() == View.VISIBLE);
---
>                         membersCell.setTextAndValueAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), String.format("%d", info.participants_count), R.drawable.msg_groups, true);
1880d1845
<                 if (ChatObject.hasAdminRights(currentChat)) {
1882,1889d1846
<                 } else {
<                     if (ChatObject.isChannel(currentChat) && info.participants != null && info.participants.participants != null && info.participants.participants.size() != info.participants_count && realAdminCount == 0) {
<                         adminCell.setTextAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), R.drawable.msg_admins, true);
<                         getRealChannelAdminCount();
<                     } else {
<                         adminCell.setTextAndValueAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), String.format("%d", ChatObject.isChannel(currentChat) ? realAdminCount == 0 ? getChannelAdminCount() : realAdminCount : getAdminCount()), R.drawable.msg_admins, true);
<                     }
<                 }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChatEditTypeActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChatEditTypeActivity.java
140c140
<     private final ArrayList<AdminedChannelCell> adminedChannelCells = new ArrayList<>();
---
>     private ArrayList<AdminedChannelCell> adminedChannelCells = new ArrayList<>();
152c152
<     private final boolean isForcePublic;
---
>     private boolean isForcePublic;
332,340c332,334
<             radioButtonCell2.setTextAndValue(
<                 LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate),
<                 LocaleController.getString("ChannelPrivateInfo", R.string.ChannelPrivateInfo),
<                 false, isPrivate);
<         } else {
<             radioButtonCell2.setTextAndValue(
<                 LocaleController.getString("MegaPrivate", R.string.MegaPrivate),
<                 LocaleController.getString("MegaPrivateInfo", R.string.MegaPrivateInfo), false,
<                 isPrivate);
---
>             radioButtonCell2.setTextAndValue(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate), LocaleController.getString("ChannelPrivateInfo", R.string.ChannelPrivateInfo), false, isPrivate);
>         } else {
>             radioButtonCell2.setTextAndValue(LocaleController.getString("MegaPrivate", R.string.MegaPrivate), LocaleController.getString("MegaPrivateInfo", R.string.MegaPrivateInfo), false, isPrivate);
355,363c348,350
<             radioButtonCell1.setTextAndValue(
<                 LocaleController.getString("ChannelPublic", R.string.ChannelPublic),
<                 LocaleController.getString("ChannelPublicInfo", R.string.ChannelPublicInfo), false,
<                 !isPrivate);
<         } else {
<             radioButtonCell1.setTextAndValue(
<                 LocaleController.getString("MegaPublic", R.string.MegaPublic),
<                 LocaleController.getString("MegaPublicInfo", R.string.MegaPublicInfo), false,
<                 !isPrivate);
---
>             radioButtonCell1.setTextAndValue(LocaleController.getString("ChannelPublic", R.string.ChannelPublic), LocaleController.getString("ChannelPublicInfo", R.string.ChannelPublicInfo), false, !isPrivate);
>         } else {
>             radioButtonCell1.setTextAndValue(LocaleController.getString("MegaPublic", R.string.MegaPublic), LocaleController.getString("MegaPublicInfo", R.string.MegaPublicInfo), false, !isPrivate);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChatPullingDownDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChatPullingDownDrawable.java
7a8
> import android.graphics.Color;
15a17
> import android.util.Log;
18a21,22
> 
> import androidx.core.graphics.ColorUtils;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChatRightsEditActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChatRightsEditActivity.java
526c526
<             if (!canEdit && (!currentChat.creator || currentType != TYPE_ADMIN || position != anonymousRow) && position != 0) {
---
>             if (!canEdit && (!currentChat.creator || currentType != TYPE_ADMIN || position != anonymousRow)) {
1468c1468
<             if (!canEdit && holder.getAdapterPosition() != 0) {
---
>             if (!canEdit) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChatUsersActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChatUsersActivity.java
87,88d86
< import top.qwq2333.nullgram.utils.Log;
< 
371c370
<             if (ChatObject.isChannel(currentChat) && ChatObject.hasAdminRights(currentChat)) {
---
>             if (ChatObject.isChannel(currentChat)) {
2148d2146
<         Log.i("chat users: loadChatParticipants(" + offset + ", " + count + ", " + reset + ")");
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ChooseSpeedLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ChooseSpeedLayout.java
4a5
> import android.view.View;
7a9,11
> import androidx.core.graphics.ColorUtils;
> import androidx.core.math.MathUtils;
> 
9a14
> import org.telegram.messenger.MediaController;
14a20
> import org.telegram.ui.ActionBar.Theme;
16a23
> import org.telegram.ui.Components.SpeedIconDrawable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
128,129d127
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< 
4394,4395c4392
<         builder.setMessage(
<             LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
---
>         builder.setMessage(LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
4407,4408c4404
<             builder.setMessage(LocaleController.getString("ErrorSendRestrictedStickers",
<                 R.string.ErrorSendRestrictedStickers));
---
>             builder.setMessage(LocaleController.getString("ErrorSendRestrictedStickers", R.string.ErrorSendRestrictedStickers));
4410,4411c4406
<             builder.setMessage(LocaleController.getString("ErrorSendRestrictedMedia",
<                 R.string.ErrorSendRestrictedMedia));
---
>             builder.setMessage(LocaleController.getString("ErrorSendRestrictedMedia", R.string.ErrorSendRestrictedMedia));
4413,4414c4408
<             builder.setMessage(LocaleController.getString("ErrorSendRestrictedPolls",
<                 R.string.ErrorSendRestrictedPolls));
---
>             builder.setMessage(LocaleController.getString("ErrorSendRestrictedPolls", R.string.ErrorSendRestrictedPolls));
4416,4417c4410
<             builder.setMessage(LocaleController.getString("ErrorSendRestrictedStickersAll",
<                 R.string.ErrorSendRestrictedStickersAll));
---
>             builder.setMessage(LocaleController.getString("ErrorSendRestrictedStickersAll", R.string.ErrorSendRestrictedStickersAll));
5312d5304
<             if (PasscodeHelper.isAccountHidden(a)) continue;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedEmojiDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedEmojiDrawable.java
1147,1148d1146
<         static int attachedCount;
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedFileDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedFileDrawable.java
770,771d769
<     Paint paint;
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedNumberLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedNumberLayout.java
12a13,14
> import org.telegram.messenger.AndroidUtilities;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AudioPlayerAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AudioPlayerAlert.java
2021a2022
>                 optionsButton.hideSubItem(5);
2025a2027
>                 optionsButton.showSubItem(5);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AudioVisualizerDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AudioVisualizerDrawable.java
8a9
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarConstructorPreviewCell.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarConstructorPreviewCell.java
4a5,6
> import android.graphics.drawable.Drawable;
> import android.graphics.drawable.GradientDrawable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/BlobDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/BlobDrawable.java
8a9
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/BlockingUpdateView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/BlockingUpdateView.java
8a9
> import android.content.Intent;
12a14
> import android.net.Uri;
23a26,27
> import androidx.core.content.FileProvider;
> 
43,44d46
< import top.qwq2333.nullgram.utils.APKUtils;
< 
238a241
>             String fileName = FileLoader.getAttachFileName(document);
241c244,256
<                 APKUtils.installUpdate(activity, SharedConfig.pendingAppUpdate.document);
---
>                 Intent intent = new Intent(Intent.ACTION_VIEW);
>                 intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
> 
>                 if (Build.VERSION.SDK_INT >= 24) {
>                     intent.setDataAndType(FileProvider.getUriForFile(activity, ApplicationLoader.getApplicationId() + ".provider", f), "application/vnd.android.package-archive");
>                 } else {
>                     intent.setDataAndType(Uri.fromFile(f), "application/vnd.android.package-archive");
>                 }
>                 try {
>                     activity.startActivityForResult(intent, 500);
>                 } catch (Exception e) {
>                     FileLog.e(e);
>                 }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/BotCommandsMenuContainer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/BotCommandsMenuContainer.java
11a12
> import android.view.HapticFeedbackConstants;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/BulletinFactory.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/BulletinFactory.java
16a17
> import android.widget.ImageView;
71d71
<         STICKER("StickerSavedHint", R.string.StickerSavedHint, Icon.SAVED_TO_GALLERY),
81,84c81,82
<         PHOTO_TO_DOWNLOADS("PhotoSavedToDownloadsHint", R.string.PhotoSavedToDownloadsHint,
<             Icon.SAVED_TO_DOWNLOADS),
<         VIDEO_TO_DOWNLOADS("VideoSavedToDownloadsHint", R.string.VideoSavedToDownloadsHint,
<             Icon.SAVED_TO_DOWNLOADS),
---
>         PHOTO_TO_DOWNLOADS("PhotoSavedToDownloadsHint", R.string.PhotoSavedToDownloadsHint, Icon.SAVED_TO_DOWNLOADS),
>         VIDEO_TO_DOWNLOADS("VideoSavedToDownloadsHint", R.string.VideoSavedToDownloadsHint, Icon.SAVED_TO_DOWNLOADS),
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/BulletSpan.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/BulletSpan.java
3d2
< import android.content.res.Resources;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
166,169d165
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.ui.syntaxhighlight.SyntaxHighlight;
< import top.qwq2333.nullgram.utils.Defines;
< 
2038,2039d2032
<                 if (ConfigManager.getBooleanOrFalse(Defines.hideQuickSendMediaBottom))
<                     return true;
3969d3961
<         messageEditText.setShowDisableMarkdown(true);
3997c3989
<         messageEditText.setLinkTextColor(getThemedColor(Theme.key_windowBackgroundWhiteLinkText));
---
>         messageEditText.setLinkTextColor(getThemedColor(Theme.key_chat_messageLinkOut));
5295c5287
<             sendMessageInternal(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>             sendMessageInternal(true, 0);
7215,7216d7205
<                                 run.start = entity.offset;
<                                 run.end = entity.offset + entity.length;
7218d7206
<                                 run.urlEntity = entity;
7220d7207
<                                 SyntaxHighlight.highlight(run, stringBuilder);
7620a7608,7627
>         boolean visible = !MessagesController.getInstance(currentAccount).premiumLocked && MessagesController.getInstance(currentAccount).giftAttachMenuIcon &&
>                 MessagesController.getInstance(currentAccount).giftTextFieldIcon && getParentFragment() != null && getParentFragment().getCurrentUser() != null &&
>                 !BuildVars.IS_BILLING_UNAVAILABLE && !getParentFragment().getCurrentUser().self && !getParentFragment().getCurrentUser().premium &&
>                 getParentFragment().getCurrentUserInfo() != null && !getParentFragment().getCurrentUserInfo().premium_gifts.isEmpty() && !isInScheduleMode() &&
>                 MessagesController.getInstance(currentAccount).getMainSettings().getBoolean("show_gift_for_" + parentFragment.getDialogId(), true);
> 
>         if (!visible && giftButton == null) {
>             return;
>         }
>         createGiftButton();
> 
>         AndroidUtilities.updateViewVisibilityAnimated(giftButton, visible, 1f, animated);
>         if (scheduledButton != null && scheduledButton.getVisibility() == View.VISIBLE) {
>             float tX = (visible ? -AndroidUtilities.dp(48) : 0) + AndroidUtilities.dp(botButton != null && botButton.getVisibility() == VISIBLE ? 48 : 0);
>             if (animated) {
>                 scheduledButton.animate().translationX(tX).setDuration(150).start();
>             } else {
>                 scheduledButton.setTranslationX(tX);
>             }
>         }
7713c7720
<         if (defPeer == null && delegate.getSendAsPeers() != null && !delegate.getSendAsPeers().peers.isEmpty() && !delegate.getSendAsPeers().isModifiedByQuickToggleAnonymous) {
---
>         if (defPeer == null && delegate.getSendAsPeers() != null && !delegate.getSendAsPeers().peers.isEmpty()) {
7716,7736d7722
< 
<         if (ConfigManager.getBooleanOrFalse(Defines.quickToggleAnonymous) && delegate.getSendAsPeers() != null && delegate.getSendAsPeers().isModifiedByQuickToggleAnonymous) {
<             var chat = parentFragment.getMessagesController().getChat(-dialog_id);
<             var self = UserConfig.getInstance(currentAccount).getCurrentUser();
<             if (chat != null) {
<                 if (chat.megagroup) {
<                     if (chat.creator && chat.admin_rights != null && defPeer == null) {
<                         if (chat.admin_rights.anonymous) {
<                             defPeer = new TLRPC.TL_peerChannel();
<                             defPeer.channel_id = chat.id;
<                         } else {
<                             defPeer = new TLRPC.TL_peerUser();
<                             defPeer.user_id = self.id;
<                         }
<                     }
<                 }
<             }
< 
< 
<         }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
117,120d116
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.PermissionUtils;
< 
474d469
<                 updateLayout(currentAttachLayout, false, 0);
2062,2063c2057,2058
<                     if (Build.VERSION.SDK_INT >= 23 && !PermissionUtils.isAudioPermissionGranted()) {
<                         PermissionUtils.requestAudioPermission(baseFragment.getParentActivity());
---
>                     if (Build.VERSION.SDK_INT >= 23 && baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
>                         baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE);
2068,2069c2063,2064
<                     if (Build.VERSION.SDK_INT >= 23 && !PermissionUtils.isStoragePermissionGranted()) {
<                         PermissionUtils.requestStoragePermission(baseFragment.getParentActivity());
---
>                     if (Build.VERSION.SDK_INT >= 23 && baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
>                         baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE);
2479c2474
<                     sendPressed(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                     sendPressed(true, 0);
3151d3145
<                 if (currentAttachLayout == null || currentAttachLayout.shouldHideBottomButtons()) {
3153d3146
<                 }
3778,3797d3769
<     }
< 
<     private AnimatorSet mediaPreviewAnimator;
<     public void updateMediaPreview(boolean enabled, boolean animated) {
<         if (mediaPreviewAnimator != null) {
<             mediaPreviewAnimator.cancel();
<             mediaPreviewAnimator = null;
<         }
< 
<         if (!animated) {
<             mediaPreviewView.setAlpha(enabled ? 1f : 0f);
<         } else {
<             mediaPreviewAnimator = new AnimatorSet();
<             mediaPreviewAnimator.playTogether(
<                 ObjectAnimator.ofFloat(mediaPreviewView, View.ALPHA, enabled ? 1f : 0f)
<             );
<             mediaPreviewAnimator.setDuration(200);
<             mediaPreviewAnimator.setInterpolator(CubicBezierInterpolator.EASE_BOTH);
<             mediaPreviewAnimator.start();
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertAudioLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertAudioLayout.java
33,36d32
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.LinearSmoothScroller;
< import androidx.recyclerview.widget.RecyclerView;
< 
55a52,55
> 
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.LinearSmoothScroller;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertLocationLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertLocationLayout.java
24d23
< import android.graphics.Color;
34d32
< import android.text.Html;
36d33
< import android.text.method.LinkMovementMethod;
63d59
< import org.telegram.messenger.OSMDroidMapsProvider;
90,92d85
< import kotlin.Unit;
< import top.qwq2333.nullgram.ui.BottomBuilder;
< 
126,127d118
<     private TextView attributionOverlay;
< 
175d165
<     // Google Maps
180,185d169
<     // OSM
<     private final static int map_list_menu_osm = 2;
<     private final static int map_list_menu_wiki = 3;
<     private final static int map_list_menu_cartodark = 4;
< 
< 
261c245
<             lastPressedMarkerView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogBackground), PorterDuff.Mode.SRC_IN));
---
>             lastPressedMarkerView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogBackground), PorterDuff.Mode.MULTIPLY));
347,348d330
< //            final IMapController controller = mapView.getController();
< //            controller.animateTo(marker.getPosition(), mapView.getZoomLevelDouble(), 300L);
526c508
<             shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.SRC_IN));
---
>             shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
563d544
<         if (false) {
567,571d547
<         } else {
<             mapTypeButton.addSubItem(map_list_menu_map, R.drawable.msg_map, "Standard OSM", resourcesProvider);
<             mapTypeButton.addSubItem(map_list_menu_satellite, R.drawable.msg_map, "Wikimedia", resourcesProvider);
<             mapTypeButton.addSubItem(map_list_menu_hybrid, R.drawable.msg_map, "Carto Dark", resourcesProvider);
<         }
576c552
<             shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.SRC_IN));
---
>             shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
609,645c585
<         /*
<         *         mapTypeButton.setDelegate(id -> {
<             if (mapView == null) {
<                 return;
<             }
<             if (id == map_list_menu_osm) {
<                 attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
<                 mapView.setTileSource(TileSourceFactory.MAPNIK);
<             } else if (id == map_list_menu_wiki) {
<                 // Create a custom tile source
<                 ITileSource tileSource = new XYTileSource(
<                         "Wikimedia", 0, 19,
<                         256, ".png",
<                         new String[]{"https://maps.wikimedia.org/osm-intl/"},
<                         "© OpenStreetMap contributors");
<                 attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
<                 mapView.setTileSource(tileSource);
<             } else if (id == map_list_menu_cartodark) {
<                 // Create a custom tile source
<                 ITileSource tileSource = new XYTileSource(
<                         "Carto Dark", 0, 20,
<                         256, ".png",
<                         new String[]{
<                                 "https://cartodb-basemaps-a.global.ssl.fastly.net/dark_all/",
<                                 "https://cartodb-basemaps-b.global.ssl.fastly.net/dark_all/",
<                                 "https://cartodb-basemaps-c.global.ssl.fastly.net/dark_all/",
<                                 "https://cartodb-basemaps-d.global.ssl.fastly.net/dark_all/"},
<                         "© OpenStreetMap contributors, © CARTO");
<                 attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, © <a href=\"https://carto.com/attributions\">CARTO</a>"));
<                 mapView.setTileSource(tileSource);
<             }
<         });
<         *
<         * */
<         if (ApplicationLoader.getMapsProvider() instanceof OSMDroidMapsProvider) {
<             mapViewClip.addView(getAttributionOverlay(context), LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 0 : 4, 0, LocaleController.isRTL ? 4 : 0, 20));
<         }
---
> 
650c590
<             shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.SRC_IN));
---
>             shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
670c610
<         locationButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_location_actionActiveIcon), PorterDuff.Mode.SRC_IN));
---
>         locationButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_location_actionActiveIcon), PorterDuff.Mode.MULTIPLY));
713c653
<         emptyImageView.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogEmptyImage), PorterDuff.Mode.SRC_IN));
---
>         emptyImageView.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogEmptyImage), PorterDuff.Mode.MULTIPLY));
842,844c782
<                     map.animateCamera(ApplicationLoader.getMapsProvider().newCameraUpdateLatLngZoom(new IMapsProvider.LatLng(liveLocation.marker.getPosition().latitude, liveLocation.marker.getPosition().longitude), map.getMaxZoomLevel() - 2));
< //                    final IMapController controller = mapView.getController();
< //                    controller.animateTo(liveLocation.marker.getPosition(), mapView.getMaxZoomLevel() - 2, null);
---
>                     map.animateCamera(ApplicationLoader.getMapsProvider().newCameraUpdateLatLngZoom(new IMapsProvider.LatLng(liveLocation.marker.getPosition().latitude, liveLocation.marker.getPosition().longitude), map.getMaxZoomLevel() - 4));
1255,1256c1193,1194
<                 IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(new IMapsProvider.LatLng(venue.geo.lat, venue.geo._long));
<                 options.icon(getParentActivity().getResources(), createPlaceBitmap(a));
---
>                 IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(new IMapsProvider.LatLng(venue.geo.lat, venue.geo._long));
>                 options.icon(createPlaceBitmap(a));
1294,1295c1232,1233
<         userLocation.setLatitude(48.85825);
<         userLocation.setLongitude(2.29448);
---
>         userLocation.setLatitude(20.659322);
>         userLocation.setLongitude(-11.406250);
1566,1568d1503
<         if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
<             return null;
<         } else {
1580d1514
<     }
1681,1683d1614
<                         BottomBuilder builder = new BottomBuilder(activity);
<                         builder.addTitle(LocaleController.getString("PermissionNoLocation", R.string.PermissionNoLocation), true);
<                         builder.addItem(LocaleController.getString("Ok", R.string.OK),R.drawable.baseline_check_circle_24, __ -> {
1685,1691d1615
<                             return Unit.INSTANCE;
<                         });
<                         builder.addItem(LocaleController.getString("Decline", R.string.Decline), R.drawable.baseline_block_24, __ -> {
<                             parentAlert.dismiss();
<                             return Unit.INSTANCE;
<                         });
<                         builder.show();
1809,1819d1732
< 
<     // NekoX: OpenStreetMap
<     private TextView getAttributionOverlay(Context context) {
<         attributionOverlay = new TextView(context);
<         attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
<         attributionOverlay.setShadowLayer(1, -1, -1, Color.WHITE);
<         attributionOverlay.setLinksClickable(true);
<         attributionOverlay.setMovementMethod(LinkMovementMethod.getInstance());
<         return attributionOverlay;
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertPhotoLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertPhotoLayout.java
55a56
> import androidx.exifinterface.media.ExifInterface;
89a91
> import org.telegram.ui.BasePermissionsActivity;
106,110d107
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.PermissionUtils;
< 
733c730,734
<                     PermissionUtils.requestImagesAndVideoPermission(parentAlert.baseFragment.getParentActivity());
---
>                     try {
>                         parentAlert.baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE);
>                     } catch (Exception ignore) {
> 
>                     }
823,825d823
<                     if (ConfigManager.getBooleanOrFalse(Defines.disableInstantCamera)) {
<                         showCamera();
<                     }
1969,1971d1966
<                             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
<                                 parentAlert.baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.CAMERA, Manifest.permission.READ_MEDIA_IMAGES, Manifest.permission.READ_MEDIA_VIDEO}, 17);
<                             } else {
1973d1967
<                             }
1992,1996d1985
<         if (deviceHasGoodCamera && ConfigManager.getBooleanOrFalse(Defines.disableInstantCamera)) {
<             // Clear cached bitmap
<             File file = new File(ApplicationLoader.getFilesDirFixed(), "cthumb.jpg");
<             if (file.exists()) file.delete();
<         }
2000c1989
<         if (parentAlert.isShowing() && deviceHasGoodCamera && parentAlert.baseFragment != null && parentAlert.getBackDrawable().getAlpha() != 0 && !cameraOpened && !ConfigManager.getBooleanOrFalse(Defines.disableInstantCamera)) {
---
>         if (parentAlert.isShowing() && deviceHasGoodCamera && parentAlert.baseFragment != null && parentAlert.getBackDrawable().getAlpha() != 0 && !cameraOpened) {
2343c2332
<         if (!canSaveCameraPreview || ConfigManager.getBooleanOrFalse(Defines.disableInstantCamera)) {
---
>         if (!canSaveCameraPreview) {
2656d2644
<         Log.i("caapl: cameraViewH=" + cameraViewH + " (endHeight=" + endHeight + ") value=" + value);
2872c2860
<             noGalleryPermissions = !PermissionUtils.isImagesAndVideoPermissionGranted();
---
>             noGalleryPermissions = parentAlert.baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED;
3227c3215
<             noGalleryPermissions = !PermissionUtils.isImagesAndVideoPermissionGranted();
---
>             noGalleryPermissions = parentAlert.baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertPollLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlertPollLayout.java
21,27d20
< import androidx.recyclerview.widget.DefaultItemAnimator;
< import androidx.recyclerview.widget.ItemTouchHelper;
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.LinearSmoothScroller;
< import androidx.recyclerview.widget.RecyclerView;
< import androidx.recyclerview.widget.SimpleItemAnimator;
< 
51a45,51
> 
> import androidx.recyclerview.widget.DefaultItemAnimator;
> import androidx.recyclerview.widget.ItemTouchHelper;
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.LinearSmoothScroller;
> import androidx.recyclerview.widget.RecyclerView;
> import androidx.recyclerview.widget.SimpleItemAnimator;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachRestrictedLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachRestrictedLayout.java
3a4,6
> import android.graphics.Canvas;
> import android.graphics.Color;
> import android.graphics.Paint;
8a12
> import androidx.recyclerview.widget.LinearSmoothScroller;
Only in TMessagesProj/src/main/java/org/telegram/ui/Components: ChatBlurredFrameLayout.java
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
21a22
> import androidx.annotation.Keep;
25,26d25
< 
< import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox2.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox2.java
9a10
> import android.widget.CheckBox;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBoxBase.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBoxBase.java
2a3,4
> import static org.telegram.messenger.AndroidUtilities.lerp;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ChecksHintView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ChecksHintView.java
12a13
> import android.view.animation.OvershootInterpolator;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ClearHistoryAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ClearHistoryAlert.java
26,27d25
< import androidx.core.widget.NestedScrollView;
< 
41a40,41
> 
> import androidx.core.widget.NestedScrollView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
20,21d19
< import android.view.View;
< 
22a21
> import android.view.View;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropGestureDetector.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropGestureDetector.java
3a4,5
> import androidx.core.view.MotionEventCompat;
> 
10,11d11
< import androidx.core.view.MotionEventCompat;
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropTransform.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropTransform.java
10a11,12
> import androidx.annotation.NonNull;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/CrossfadeDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/CrossfadeDrawable.java
7a8
> import android.util.Log;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextBoldCursor.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextBoldCursor.java
20d19
< import android.graphics.Rect;
22a22
> import android.graphics.Rect;
26a27,32
> 
> import androidx.annotation.Keep;
> import androidx.annotation.Nullable;
> import androidx.core.graphics.ColorUtils;
> import androidx.core.view.accessibility.AccessibilityNodeInfoCompat;
> 
39a46
> import android.widget.EditText;
42,47d48
< import androidx.annotation.Keep;
< import androidx.annotation.Nullable;
< import androidx.core.graphics.ColorUtils;
< import androidx.core.view.accessibility.AccessibilityNodeInfoCompat;
< 
< import org.lsposed.hiddenapibypass.HiddenApiBypass;
63,65d63
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
153,204d150
<     private static Method canUndoMethod;
<     private static Method canRedoMethod;
<     public static boolean disableMarkdown = ConfigManager.getBooleanOrFalse(Defines.markdownDisabled);
<     private boolean showDisableMarkdown = false;
< 
<     static {
<         try {
<             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
<                 canUndoMethod = HiddenApiBypass.getDeclaredMethod(TextView.class, "canUndo");
<                 canRedoMethod = HiddenApiBypass.getDeclaredMethod(TextView.class, "canRedo");
<             } else {
<                 canUndoMethod = TextView.class.getDeclaredMethod("canUndo");
<                 canRedoMethod = TextView.class.getDeclaredMethod("canRedo");
<             }
<             canUndoMethod.setAccessible(true);
<             canRedoMethod.setAccessible(true);
<         } catch (Exception e) {
<             e.printStackTrace();
<             FileLog.e(e);
<             canUndoMethod = null;
<             canRedoMethod = null;
<         }
<     }
< 
<     public final boolean canUndo() {
<         if (canUndoMethod == null) {
<             return false;
<         }
<         try {
<             return (boolean) canUndoMethod.invoke(this);
<         } catch (Exception e) {
<             FileLog.e(e);
<         }
<         return false;
<     }
< 
<     public final boolean canRedo() {
<         if (canRedoMethod == null) {
<             return false;
<         }
<         try {
<             return (boolean) canRedoMethod.invoke(this);
<         } catch (Exception e) {
<             FileLog.e(e);
<         }
<         return false;
<     }
< 
<     public void setShowDisableMarkdown(boolean show) {
<         showDisableMarkdown = show;
<     }
< 
1061d1006
<             addUndoRedo(floatingActionMode.getMenu());
1069,1092d1013
<     }
< 
<     private void addUndoRedo(Menu menu) {
<         if (menu.findItem(android.R.id.undo) == null && menu.findItem(android.R.id.redo) == null) {
<             if (canUndo()) {
<                 menu.add(R.id.menu_undoredo, android.R.id.undo, 2, LocaleController.getString("EditUndo", R.string.EditUndo));
<             }
<             if (canRedo()) {
<                 menu.add(R.id.menu_undoredo, android.R.id.redo, 3, LocaleController.getString("EditRedo", R.string.EditRedo));
<             }
<         }
<         if (showDisableMarkdown) {
<             menu.add(R.id.menu_groupbolditalic, R.id.menu_markdown, 20, disableMarkdown ? LocaleController.getString("EditEnableMarkdown", R.string.EditEnableMarkdown) : LocaleController.getString("EditDisableMarkdown", R.string.EditDisableMarkdown));
<         }
<     }
< 
<     @Override
<     public boolean onTextContextMenuItem(int id) {
<         if (id == R.id.menu_markdown) {
<             disableMarkdown = !disableMarkdown;
<             floatingActionMode.finish();
<             return true;
<         }
<         return super.onTextContextMenuItem(id);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
50d49
< import org.telegram.tgnet.TLRPC;
56,57d54
< import top.qwq2333.nullgram.ui.syntaxhighlight.SyntaxHighlight;
< 
152,216d148
<         AlertDialog.Builder builder = new AlertDialog.Builder(getContext(), resourcesProvider);
<         builder.setTitle(LocaleController.getString("CreateMono", R.string.CreateMono));
< 
<         final EditTextBoldCursor editText = new EditTextBoldCursor(getContext()) {
<             @Override
<             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
<                 super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
<             }
<         };
<         editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
<         editText.setTextColor(getThemedColor(Theme.key_dialogTextBlack));
<         editText.setHintText(LocaleController.getString("CreateMonoLanguage", R.string.CreateMonoLanguage));
<         editText.setHeaderHintColor(getThemedColor(Theme.key_windowBackgroundWhiteBlueHeader));
<         editText.setSingleLine(true);
<         editText.setFocusable(true);
<         editText.setTransformHintToHeader(true);
<         editText.setLineColors(getThemedColor(Theme.key_windowBackgroundWhiteInputField), getThemedColor(Theme.key_windowBackgroundWhiteInputFieldActivated), getThemedColor(Theme.key_text_RedRegular));
<         editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
<         editText.setBackgroundDrawable(null);
<         editText.requestFocus();
<         editText.setPadding(0, 0, 0, 0);
<         builder.setView(editText);
< 
<         final int start;
<         final int end;
<         if (selectionStart >= 0 && selectionEnd >= 0) {
<             start = selectionStart;
<             end = selectionEnd;
<             selectionStart = selectionEnd = -1;
<         } else {
<             start = getSelectionStart();
<             end = getSelectionEnd();
<         }
< 
<         var styleSpans = getText().getSpans(start, end, TextStyleSpan.class);
<         if (styleSpans != null && styleSpans.length > 0) {
<             for (var oldSpan : styleSpans) {
<                 var entity = oldSpan.getTextStyleRun().urlEntity;
<                 if (entity instanceof TLRPC.TL_messageEntityPre) {
<                     var language = entity.language;
<                     if (!TextUtils.isEmpty(language)) {
<                         editText.setText(language);
<                         break;
<                     }
<                 }
<             }
<         }
< 
<         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
<             Editable editable = getText();
<             CharacterStyle[] spans = editable.getSpans(start, end, CharacterStyle.class);
<             if (spans != null && spans.length > 0) {
<                 for (CharacterStyle oldSpan : spans) {
<                     int spanStart = editable.getSpanStart(oldSpan);
<                     int spanEnd = editable.getSpanEnd(oldSpan);
<                     editable.removeSpan(oldSpan);
<                     if (spanStart < start) {
<                         editable.setSpan(oldSpan, spanStart, start, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
<                     }
<                     if (spanEnd > end) {
<                         editable.setSpan(oldSpan, end, spanEnd, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
<                     }
<                 }
<             }
<             try {
219,249c151
<                 var language = editText.getText().toString();
<                 if (!TextUtils.isEmpty(language)) {
<                     run.start = start;
<                     run.end = end;
<                     run.urlEntity = new TLRPC.TL_messageEntityPre();
<                     run.urlEntity.language = language;
<                 }
<                 MediaDataController.addStyleToText(new TextStyleSpan(run), start, end, getText(), allowTextEntitiesIntersection);
<                 SyntaxHighlight.highlight(run, editable);
<             } catch (Exception ignore) {
< 
<             }
<             if (delegate != null) {
<                 delegate.onSpansChanged();
<             }
<         });
<         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
<         builder.show().setOnShowListener(dialog -> {
<             editText.requestFocus();
<             AndroidUtilities.showKeyboard(editText);
<         });
<         ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
<         if (layoutParams != null) {
<             if (layoutParams instanceof FrameLayout.LayoutParams) {
<                 ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
<             }
<             layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(24);
<             layoutParams.height = AndroidUtilities.dp(36);
<             editText.setLayoutParams(layoutParams);
<         }
<         editText.setSelection(0, editText.getText().length());
---
>         applyTextStyleToSelection(new TextStyleSpan(run));
264,352d165
< 
<     public void makeSelectedMention() {
<         AlertDialog.Builder builder = new AlertDialog.Builder(getContext(), resourcesProvider);
<         builder.setTitle(LocaleController.getString("CreateMention", R.string.CreateMention));
< 
<         final EditTextBoldCursor editText = new EditTextBoldCursor(getContext()) {
<             @Override
<             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
<                 super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
<             }
<         };
<         editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
<         editText.setTextColor(getThemedColor(Theme.key_dialogTextBlack));
<         editText.setHintText("ID");
<         editText.setHeaderHintColor(getThemedColor(Theme.key_windowBackgroundWhiteBlueHeader));
<         editText.setSingleLine(true);
<         editText.setFocusable(true);
<         editText.setTransformHintToHeader(true);
<         editText.setLineColors(getThemedColor(Theme.key_windowBackgroundWhiteInputField), getThemedColor(Theme.key_windowBackgroundWhiteInputFieldActivated), getThemedColor(Theme.key_text_RedRegular));
<         editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
<         editText.setBackgroundDrawable(null);
<         editText.requestFocus();
<         editText.setPadding(0, 0, 0, 0);
<         builder.setView(editText);
< 
<         final int start;
<         final int end;
<         if (selectionStart >= 0 && selectionEnd >= 0) {
<             start = selectionStart;
<             end = selectionEnd;
<             selectionStart = selectionEnd = -1;
<         } else {
<             start = getSelectionStart();
<             end = getSelectionEnd();
<         }
< 
<         var urlSpans = getText().getSpans(start, end, URLSpanUserMention.class);
<         if (urlSpans != null) {
<             for (var oldSpan : urlSpans) {
<                 var url = oldSpan.getURL();
<                 if (!TextUtils.isEmpty(url)) {
<                     editText.setText(url);
<                     break;
<                 }
<             }
<         }
< 
<         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
<             Editable editable = getText();
<             CharacterStyle[] spans = editable.getSpans(start, end, CharacterStyle.class);
<             if (spans != null && spans.length > 0) {
<                 for (CharacterStyle oldSpan : spans) {
<                     int spanStart = editable.getSpanStart(oldSpan);
<                     int spanEnd = editable.getSpanEnd(oldSpan);
<                     editable.removeSpan(oldSpan);
<                     if (spanStart < start) {
<                         editable.setSpan(oldSpan, spanStart, start, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
<                     }
<                     if (spanEnd > end) {
<                         editable.setSpan(oldSpan, end, spanEnd, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
<                     }
<                 }
<             }
<             try {
<                 editable.setSpan(new URLSpanUserMention(editText.getText().toString(), 1), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
<             } catch (Exception ignore) {
< 
<             }
<             if (delegate != null) {
<                 delegate.onSpansChanged();
<             }
<         });
<         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
<         builder.show().setOnShowListener(dialog -> {
<             editText.requestFocus();
<             AndroidUtilities.showKeyboard(editText);
<         });
<         ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
<         if (layoutParams != null) {
<             if (layoutParams instanceof FrameLayout.LayoutParams) {
<                 ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
<             }
<             layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(24);
<             layoutParams.height = AndroidUtilities.dp(36);
<             editText.setLayoutParams(layoutParams);
<         }
<         editText.setSelection(0, editText.getText().length());
<     }
< 
389,399d201
<         var urlSpans = getText().getSpans(start, end, URLSpanReplacement.class);
<         if (urlSpans != null) {
<             for (var span : urlSpans) {
<                 var url = span.getURL();
<                 if (!TextUtils.isEmpty(url)) {
<                     editText.setText(url);
<                     break;
<                 }
<             }
<         }
< 
586,588d387
<         } else if (itemId == R.id.menu_mention) {
<             makeSelectedMention();
<             return true;
713d511
<             infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_mention, LocaleController.getString("CreateMention", R.string.CreateMention)));
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextEmoji.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextEmoji.java
33a34
> import org.telegram.messenger.SharedConfig;
106,109d106
<     }
< 
<     public EditTextEmoji(Context context, SizeNotifierFrameLayout parent, BaseFragment fragment, int style) {
<         this(context, parent, fragment, style, true, null);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiTabsStrip.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiTabsStrip.java
712,715d711
<         for (int i = 0; i < attachedEmojiPacks.size(); i++) {
<             attachedEmojiPacks.get(i).keepAttached = false;
<             attachedEmojiPacks.get(i).updateAttachState();
<         }
1270,1273d1265
<         }
< 
<         public void addDrawable(AnimatedEmojiDrawable drawable) {
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
33a34
> import android.graphics.RectF;
46a48
> import android.util.Log;
52a55
> import android.view.KeyEvent;
58a62,63
> import android.view.ViewTreeObserver;
> import android.view.WindowManager;
64a70
> import android.widget.PopupWindow;
126a133
> import org.telegram.ui.Components.Premium.PremiumGradient;
131a139
> import java.lang.reflect.Field;
141,142c149
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
---
> public class EmojiView extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
144,148d150
< @SuppressLint("SoonBlockedPrivateApi")
< public class EmojiView extends FrameLayout implements
<     NotificationCenter.NotificationCenterDelegate {
< 
<     private final ArrayList<View> views = new ArrayList<>();
162c164
<     private final ImageView backspaceButton;
---
>     private ImageView backspaceButton;
184c186
<     private final boolean needEmojiSearch;
---
>     private boolean needEmojiSearch;
193c195
<     private final GifSearchPreloader gifSearchPreloader = new GifSearchPreloader();
---
>     private GifSearchPreloader gifSearchPreloader = new GifSearchPreloader();
222c224
<     private final TextView mediaBanTooltip;
---
>     private TextView mediaBanTooltip;
227c229
<     private final ObjectAnimator[] tabsYAnimators = new ObjectAnimator[3];
---
>     private ObjectAnimator[] tabsYAnimators = new ObjectAnimator[3];
276c277
<     private final int searchFieldHeight;
---
>     private int searchFieldHeight;
306,308c307,309
<     private final TLRPC.StickerSetCovered[] primaryInstallingStickerSets = new TLRPC.StickerSetCovered[10];
<     private final LongSparseArray<TLRPC.StickerSetCovered> installingStickerSets = new LongSparseArray<>();
<     private final LongSparseArray<TLRPC.StickerSetCovered> removingStickerSets = new LongSparseArray<>();
---
>     private TLRPC.StickerSetCovered[] primaryInstallingStickerSets = new TLRPC.StickerSetCovered[10];
>     private LongSparseArray<TLRPC.StickerSetCovered> installingStickerSets = new LongSparseArray<>();
>     private LongSparseArray<TLRPC.StickerSetCovered> removingStickerSets = new LongSparseArray<>();
337c338
<     private final boolean showGifs;
---
>     private boolean showGifs;
357c358
<     private final Runnable checkExpandStickerTabsRunnable = new Runnable() {
---
>     private Runnable checkExpandStickerTabsRunnable = new Runnable() {
479c480
<     private final ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate = new ContentPreviewViewer.ContentPreviewViewerDelegate() {
---
>     private ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate = new ContentPreviewViewer.ContentPreviewViewerDelegate() {
2168c2169
<                     final Paint paint = new Paint();
---
>                     Paint paint = new Paint();
4971c4972
<         if (!ConfigManager.getBooleanOrFalse(Defines.disableTrendingSticker) && !featured.isEmpty() && (featuredStickerSets.isEmpty() || preferences.getLong("featured_hidden", 0) == featured.get(0).set.id)) {
---
>         if (!featured.isEmpty() && (featuredStickerSets.isEmpty() || preferences.getLong("featured_hidden", 0) == featured.get(0).set.id)) {
5053,5058c5054
<                 if (ConfigManager.getBooleanOrFalse(Defines.hideGroupSticker)) {
<                     pack = null;
<                     groupStickersHidden = true;
<                 }
<                 if (pack != null && pack.documents != null && !pack.documents.isEmpty()
<                     && pack.set != null) {
---
>                 if (pack != null && pack.documents != null && !pack.documents.isEmpty() && pack.set != null) {
5160d5155
<         if(!ConfigManager.getBooleanOrFalse(Defines.disableTrendingSticker)) {
5162,5164c5157,5158
<             gifTabs.addIconTab(1, gifIcons[1]).setContentDescription(
<                 LocaleController.getString("FeaturedGifs", R.string.FeaturedGifs));
<         }
---
>         gifTabs.addIconTab(1, gifIcons[1]).setContentDescription(LocaleController.getString("FeaturedGifs", R.string.FeaturedGifs));
> 
5556c5550
<             if (UserConfig.getInstance(currentAccount).isPremium() && !ConfigManager.getBooleanOrFalse(Defines.disablePremiumSticker)) {
---
>             if (UserConfig.getInstance(currentAccount).isPremium()) {
6016c6010
<         private final Context context;
---
>         private Context context;
6018,6022c6012,6016
<         private final SparseArray<Object> rowStartPack = new SparseArray<>();
<         private final HashMap<Object, Integer> packStartPosition = new HashMap<>();
<         private final SparseArray<Object> cache = new SparseArray<>();
<         private final SparseArray<Object> cacheParents = new SparseArray<>();
<         private final SparseIntArray positionToRow = new SparseIntArray();
---
>         private SparseArray<Object> rowStartPack = new SparseArray<>();
>         private HashMap<Object, Integer> packStartPosition = new HashMap<>();
>         private SparseArray<Object> cache = new SparseArray<>();
>         private SparseArray<Object> cacheParents = new SparseArray<>();
>         private SparseIntArray positionToRow = new SparseIntArray();
6284c6278
<                         } else if (object == premiumStickers && !ConfigManager.getBooleanOrFalse(Defines.disablePremiumSticker)) {
---
>                         } else if (object == premiumStickers) {
7188,7191c7182,7183
<                                     req.lang_code = lastSearchAlias != null ? lastSearchAlias
<                                         : lastSearchKeyboardLanguage[0];
<                                     int requestId = ConnectionsManager.getInstance(currentAccount)
<                                         .sendRequest(req, (response, error) -> {
---
>                                     req.lang_code = lastSearchAlias != null ? lastSearchAlias : lastSearchKeyboardLanguage[0];
>                                     int requestId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
7501,7502c7493,7494
<         private final ArrayList<TLRPC.BotInlineResult> results = new ArrayList<>();
<         private final HashMap<String, TLRPC.BotInlineResult> resultsMap = new HashMap<>();
---
>         private ArrayList<TLRPC.BotInlineResult> results = new ArrayList<>();
>         private HashMap<String, TLRPC.BotInlineResult> resultsMap = new HashMap<>();
7958c7950
<         private final Size size = new Size();
---
>         private Size size = new Size();
8108,8113c8100,8105
<         private final Context context;
<         private final SparseArray<Object> rowStartPack = new SparseArray<>();
<         private final SparseArray<Object> cache = new SparseArray<>();
<         private final SparseArray<Object> cacheParent = new SparseArray<>();
<         private final SparseIntArray positionToRow = new SparseIntArray();
<         private final SparseArray<String> positionToEmoji = new SparseArray<>();
---
>         private Context context;
>         private SparseArray<Object> rowStartPack = new SparseArray<>();
>         private SparseArray<Object> cache = new SparseArray<>();
>         private SparseArray<Object> cacheParent = new SparseArray<>();
>         private SparseIntArray positionToRow = new SparseIntArray();
>         private SparseArray<String> positionToEmoji = new SparseArray<>();
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyStubSpan.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyStubSpan.java
4a5,6
> import android.text.Layout;
> import android.text.style.AlignmentSpan;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ExtendedGridLayoutManager.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ExtendedGridLayoutManager.java
13a14,15
> import org.telegram.messenger.AndroidUtilities;
> 
16,17d17
< 
< import org.telegram.messenger.AndroidUtilities;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/FiltersListBottomSheet.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/FiltersListBottomSheet.java
8a9
> import android.graphics.Color;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/FilterTabsView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/FilterTabsView.java
31a32
> import android.util.Log;
63,66d63
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.FolderIconHelper;
< import top.qwq2333.nullgram.utils.Defines;
< 
112,113d108
<         public String emoticon;
<         public int iconWidth;
118c113
<         public Tab(int i, String t, String e) {
---
>         public Tab(int i, String t) {
120,121c115
<             title = ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuIcon ? t : "";
<             emoticon = i != Integer.MAX_VALUE ? e : "\uD83D\uDCAC";
---
>             title = t;
125d118
<             iconWidth = FolderIconHelper.getTotalIconWidth();
127d119
<             width += iconWidth;
150d141
<             newTitle = ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuIcon ? newTitle : "";
170,171d160
<         private String currentEmoticon;
<         private Drawable icon;
184,191d172
<         String lastEmoticon;
<         float lastIconX;
<         float animateFromIconX;
<         boolean animateIconX;
<         private boolean animateIconChange;
<         private Drawable iconAnimateInDrawable;
<         private Drawable iconAnimateOutDrawable;
< 
244,245d224
<             animateIconX = false;
<             animateIconChange = false;
258c237
<             int w = currentTab.getWidth(false) + FolderIconHelper.getPaddingTab() + additionalTabWidth;
---
>             int w = currentTab.getWidth(false) + AndroidUtilities.dp(32) + additionalTabWidth;
353,358c332,333
<             if (ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuIcon) {
<                 tabWidth = currentTab.iconWidth + currentTab.titleWidth + ((countWidth != 0 && !animateCounterRemove) ? countWidth + AndroidUtilities.dp(6 * (counterText != null ? 1.0f : editingStartAnimationProgress)) : 0);
<             } else {
<                 tabWidth = currentTab.iconWidth + ((countWidth != 0 && !animateCounterRemove) ? countWidth + AndroidUtilities.dp(6 * (counterText != null ? 1.0f : editingStartAnimationProgress)) : 0);
<             }
<             float textX = ((getMeasuredWidth() - tabWidth) / 2f) + currentTab.iconWidth;
---
>             tabWidth = currentTab.titleWidth + ((countWidth != 0 && !animateCounterRemove) ? countWidth + AndroidUtilities.dp(6 * (counterText != null ? 1.0f : editingStartAnimationProgress)) : 0);
>             float textX = (getMeasuredWidth() - tabWidth) / 2f;
407,448d382
<             int iconX = 0;
<             if (ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuText) {
<                 int emoticonSize = FolderIconHelper.getIconWidth();
<                 if (!TextUtils.equals(currentTab.emoticon, currentEmoticon)) {
<                     currentEmoticon = currentTab.emoticon;
<                     android.graphics.Rect bounds = new android.graphics.Rect(0, 0, emoticonSize, emoticonSize);
<                     icon = getResources().getDrawable(FolderIconHelper.getTabIcon(currentTab.emoticon)).mutate();
<                     icon.setBounds(bounds);
<                 }
<                 icon.setTint(textPaint.getColor());
<                 iconX = (int) ((getMeasuredWidth() - tabWidth) / 2f);
<                 if (animateIconX) {
<                     iconX = (int) (iconX * changeProgress + animateFromIconX * (1f - changeProgress));
<                 }
<                 int iconY = (int) ((getMeasuredHeight() - emoticonSize) / 2f);
<                 if (animateIconChange) {
<                     if (iconAnimateOutDrawable != null) {
<                         canvas.save();
<                         canvas.translate(iconX, iconY);
<                         int alpha = iconAnimateOutDrawable.getAlpha();
<                         iconAnimateOutDrawable.setAlpha((int) (alpha * (1f - changeProgress)));
<                         iconAnimateOutDrawable.draw(canvas);
<                         canvas.restore();
<                         iconAnimateOutDrawable.setAlpha(alpha);
<                     }
<                     if (iconAnimateInDrawable != null) {
<                         canvas.save();
<                         canvas.translate(iconX, iconY);
<                         int alpha = iconAnimateInDrawable.getAlpha();
<                         iconAnimateInDrawable.setAlpha((int) (alpha * changeProgress));
<                         iconAnimateInDrawable.draw(canvas);
<                         canvas.restore();
<                         iconAnimateInDrawable.setAlpha(alpha);
<                     }
<                 } else {
<                     canvas.save();
<                     canvas.translate(iconX, iconY);
<                     icon.draw(canvas);
<                     canvas.restore();
<                 }
<             }
< 
474d407
<                 int textSpace = ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuIcon ? AndroidUtilities.dp(6) : 0;
476c409
<                     x = textX - titleXOffset + titleOffsetX + titleWidth + textSpace;
---
>                     x = textX - titleXOffset + titleOffsetX + titleWidth + AndroidUtilities.dp(6);
478c411
<                     x = textX + titleWidth + textSpace;
---
>                     x = textX + titleWidth + AndroidUtilities.dp(6);
561d493
<             lastEmoticon = currentEmoticon;
563d494
<             lastIconX = iconX;
591c522
<                 iconX = (int) ((getMeasuredWidth() - lockDrawable.getIntrinsicWidth()) / 2f + locIconXOffset);
---
>                 int iconX = (int) ((getMeasuredWidth() - lockDrawable.getIntrinsicWidth()) / 2f + locIconXOffset);
653,659c584,585
<             int tabWidth;
<             if (ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuIcon) {
<                 tabWidth = currentTab.iconWidth + currentTab.titleWidth + (countWidth != 0 ? countWidth + AndroidUtilities.dp(6 * (counterText != null ? 1.0f : editingStartAnimationProgress)) : 0);
<             } else {
<                 tabWidth = currentTab.iconWidth + (countWidth != 0 ? countWidth + AndroidUtilities.dp(6 * (counterText != null ? 1.0f : editingStartAnimationProgress)) : 0);
<             }
<             int textX = (getMeasuredWidth() - tabWidth) / 2 + currentTab.iconWidth;
---
>             int tabWidth = currentTab.titleWidth + (countWidth != 0 ? countWidth + AndroidUtilities.dp(6 * (counterText != null ? 1.0f : editingStartAnimationProgress)) : 0);
>             int textX = (getMeasuredWidth() - tabWidth) / 2;
712,734d637
<             if (ConfigManager.getIntOrDefault(Defines.tabMenu, Defines.tabMenuMix) != Defines.tabMenuText) {
<                 int iconX = (int) ((getMeasuredWidth() - tabWidth) / 2f);
< 
<                 if (iconX != lastIconX) {
<                     animateIconX = true;
<                     animateFromIconX = lastIconX;
<                     changed = true;
<                 }
< 
<                 if (lastEmoticon != null && !currentTab.emoticon.equals(lastEmoticon)) {
<                     int emoticonWidth = FolderIconHelper.getIconWidth();
<                     android.graphics.Rect bounds = new android.graphics.Rect(0, 0, emoticonWidth, emoticonWidth);
<                     iconAnimateOutDrawable = getResources().getDrawable(FolderIconHelper.getTabIcon(lastEmoticon)).mutate();
<                     iconAnimateInDrawable = getResources().getDrawable(FolderIconHelper.getTabIcon(currentTab.emoticon)).mutate();
<                     iconAnimateOutDrawable.setBounds(bounds);
<                     iconAnimateInDrawable.setBounds(bounds);
<                     iconAnimateOutDrawable.setTint(textPaint.getColor());
<                     iconAnimateInDrawable.setTint(textPaint.getColor());
<                     animateIconChange = true;
<                     changed = true;
<                 }
<             }
< 
773,774d675
<             animateIconX = false;
<             animateIconChange = false;
1126c1027
<                 if (position != 0 || ConfigManager.getBooleanOrFalse(Defines.hideAllTab)) {
---
>                 if (position != 0) {
1256c1157
<     public void addTab(int id, int stableId, String text, String emoticon, boolean isDefault, boolean isLocked) {
---
>     public void addTab(int id, int stableId, String text, boolean isDefault, boolean isLocked) {
1268c1169
<         Tab tab = new Tab(id, text, emoticon);
---
>         Tab tab = new Tab(id, text);
1271c1172
<         allTabsWidth += tab.getWidth(true) + FolderIconHelper.getPaddingTab();
---
>         allTabsWidth += tab.getWidth(true) + AndroidUtilities.dp(32);
1341c1242
<             xOffset += tabWidth + FolderIconHelper.getPaddingTab() + additionalTabWidth;
---
>             xOffset += tabWidth + AndroidUtilities.dp(32) + additionalTabWidth;
1372c1273
<                             indicatorX = (int) (prevX + (newX - prevX) * animatingIndicatorProgress) + (FolderIconHelper.getPaddingTab() >> 1);
---
>                             indicatorX = (int) (prevX + (newX - prevX) * animatingIndicatorProgress) + AndroidUtilities.dp(16);
1375c1276
<                             indicatorX = (int) (prevX + (newX - prevX) * animatingIndicatorProgress) - (x - holder.itemView.getLeft()) + (FolderIconHelper.getPaddingTab() >> 1);
---
>                             indicatorX = (int) (prevX + (newX - prevX) * animatingIndicatorProgress) - (x - holder.itemView.getLeft()) + AndroidUtilities.dp(16);
1454,1455d1354
<             int trueTabsWidth;
<             if(!ConfigManager.getBooleanOrFalse(Defines.hideAllTab)) {
1460c1359
<                 trueTabsWidth = allTabsWidth - tabWith;
---
>             int trueTabsWidth = allTabsWidth - tabWith;
1462,1464d1360
<             } else {
<                 trueTabsWidth = allTabsWidth;
<             }
1626d1521
<                 if (!ConfigManager.getBooleanOrFalse(Defines.hideAllTab)) {
1628d1522
<                 }
1630c1524
<                     allTabsWidth += tabs.get(b).getWidth(true) + FolderIconHelper.getPaddingTab();
---
>                     allTabsWidth += tabs.get(b).getWidth(true) + AndroidUtilities.dp(32);
1659d1552
<             if (!ConfigManager.getBooleanOrFalse(Defines.hideAllTab)) {
1661d1553
<             }
1663c1555
<                 allTabsWidth += tabs.get(b).getWidth(true) + FolderIconHelper.getPaddingTab();
---
>                 allTabsWidth += tabs.get(b).getWidth(true) + AndroidUtilities.dp(32);
1719,1733d1610
<             if (ConfigManager.getBooleanOrFalse(Defines.hideAllTab)) {
<                 int defaultPosition = 0;
<                 for (int i = 0; i < filters.size(); i++) {
<                     if (filters.get(i).isDefault()) {
<                         defaultPosition = i;
<                         break;
<                     }
<                 }
<                 if (idx1 >= defaultPosition) {
<                     idx1++;
<                 }
<                 if (idx2 >= defaultPosition) {
<                     idx2++;
<                 }
<             }
1832c1709
<             if (!ConfigManager.getBooleanOrFalse(Defines.hideAllTab) && MessagesController.getInstance(UserConfig.selectedAccount).premiumLocked && (!isEditing || (viewHolder.getAdapterPosition() == 0 && tabs.get(0).isDefault && !UserConfig.getInstance(UserConfig.selectedAccount).isPremium()))) {
---
>             if (MessagesController.getInstance(UserConfig.selectedAccount).premiumLocked && (!isEditing || (viewHolder.getAdapterPosition() == 0 && tabs.get(0).isDefault && !UserConfig.getInstance(UserConfig.selectedAccount).isPremium()))) {
1840c1717
<             if (!ConfigManager.getBooleanOrFalse(Defines.hideAllTab) && MessagesController.getInstance(UserConfig.selectedAccount).premiumLocked && ((source.getAdapterPosition() == 0 || target.getAdapterPosition() == 0) && !UserConfig.getInstance(UserConfig.selectedAccount).isPremium())) {
---
>             if (MessagesController.getInstance(UserConfig.selectedAccount).premiumLocked && ((source.getAdapterPosition() == 0 || target.getAdapterPosition() == 0) && !UserConfig.getInstance(UserConfig.selectedAccount).isPremium())) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/FragmentContextView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/FragmentContextView.java
37a38
> import android.util.Log;
47a49
> import android.widget.LinearLayout;
51a54,57
> import androidx.core.graphics.ColorUtils;
> import androidx.core.math.MathUtils;
> 
> import com.google.android.gms.vision.Frame;
58a65
> import org.telegram.messenger.LiteMode;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCallPip.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCallPip.java
3,4d2
< import static android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
< 
41a40,41
> 
> import static android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCallRecordAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCallRecordAlert.java
20a21
> import android.view.accessibility.AccessibilityNodeInfo;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateDividerItemDecoration.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateDividerItemDecoration.java
11c11
< import android.graphics.Canvas;
---
> import android.graphics.*;
14,15d13
< import androidx.recyclerview.widget.RecyclerView;
< 
19a18,19
> 
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ImageUpdater.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ImageUpdater.java
28a29
> import androidx.exifinterface.media.ExifInterface;
66,67d66
< import top.qwq2333.nullgram.utils.PermissionUtils;
< 
693,698c692,694
<             if (canSelectVideo ? !PermissionUtils.isImagesAndVideoPermissionGranted() : !PermissionUtils.isImagesPermissionGranted()) {
<                 if (canSelectVideo) {
<                     PermissionUtils.requestImagesAndVideoPermission(parentFragment.getParentActivity(), BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE_FOR_AVATAR);
<                 } else {
<                     PermissionUtils.requestImagesPermission(parentFragment.getParentActivity(), BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE_FOR_AVATAR);
<                 }
---
>             if (parentFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
>                 parentFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE_FOR_AVATAR);
>                 return;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java
71a72
> import com.google.android.exoplayer2.util.Log;
203d203
<     private boolean flipAnimationInProgress;
205a206,207
> 
>     private boolean flipAnimationInProgress;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/JoinCallByUrlAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinCallByUrlAlert.java
22a23
> import org.telegram.messenger.ImageLocation;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/JoinGroupAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinGroupAlert.java
23,26d22
< import androidx.core.widget.NestedScrollView;
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
42a39,42
> 
> import androidx.core.widget.NestedScrollView;
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/JoinToSendSettingsView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinToSendSettingsView.java
6a7
> import android.view.MotionEvent;
10a12
> import org.telegram.messenger.ChatObject;
13a16
> import org.telegram.ui.ActionBar.AlertDialog;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/LerpedLayoutParams.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/LerpedLayoutParams.java
2a3,4
> import android.content.Context;
> import android.util.AttributeSet;
3a6
> import android.widget.FrameLayout;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/LineBlobDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/LineBlobDrawable.java
3a4,5
> import android.graphics.Color;
> import android.graphics.Matrix;
6a9
> import org.telegram.messenger.AndroidUtilities;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/LinkPath.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/LinkPath.java
13d12
< import android.graphics.RectF;
20,21d18
< import java.util.ArrayList;
< 
32d28
<     private ArrayList<RectF> rects = new ArrayList<>();
34,35d29
<     private static final int radius = AndroidUtilities.dp(4);
<     private static final int halfRadius = radius >> 1;
167,195d160
<         rects.clear();
<     }
< 
<     private boolean containsPoint(float x, float y) {
<         for (RectF rect : rects) {
<             if (rect.contains(x, y)) {
<                 return true;
<             }
<         }
<         return false;
<     }
< 
<     public void onPathEnd() {
<         if (useRoundRect) {
<             super.reset();
<             final int count = rects.size();
<             for (int i = 0; i < count; ++i) {
<                 float[] radii = new float[8];
< 
<                 RectF rect = rects.get(i);
< 
<                 radii[0] = radii[1] = containsPoint(rect.left, rect.top - radius) ? 0 : radius; // top left
<                 radii[2] = radii[3] = containsPoint(rect.right, rect.top - radius) ? 0 : radius; // top right
<                 radii[4] = radii[5] = containsPoint(rect.right, rect.bottom + radius) ? 0 : radius; // bottom right
<                 radii[6] = radii[7] = containsPoint(rect.left, rect.bottom + radius) ? 0 : radius; // bottom left
< 
<                 super.addRoundRect(rect, radii, Direction.CW);
<             }
<         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/LinkSpanDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/LinkSpanDrawable.java
26a27
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/LoadingAnimatedTextView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/LoadingAnimatedTextView.java
6a7
> import android.text.SpannableStringBuilder;
9a11,13
> 
> import org.checkerframework.checker.units.qual.C;
> import org.telegram.messenger.AndroidUtilities;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/NumberTextView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberTextView.java
22,23c22
< 
< import androidx.annotation.Keep;
---
> import android.view.accessibility.AccessibilityNodeInfo;
28a28,29
> 
> import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/OptionsSpeedIconDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/OptionsSpeedIconDrawable.java
13a14
> import android.graphics.Xfermode;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/PhotoFace.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/PhotoFace.java
9d8
< import org.telegram.ui.Components.Point;
10a10
> import org.telegram.ui.Components.Point;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/RenderView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/RenderView.java
60,61d59
<     public boolean isColorPicker = false;
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
13,14d12
< import android.graphics.PorterDuff;
< import android.graphics.PorterDuffColorFilter;
24,25d21
< import androidx.annotation.Keep;
< 
31a28,29
> import androidx.annotation.Keep;
> 
40d37
<         boolean onColorPicker();
49,50d45
<     private static final int settingsWidth = 30;
< 
52,53c47
<             0xff000000,
<             0xffff0000,
---
>             0xffea2739,
58c52
<             0xffffff00,
---
>             0xfffcde65,
66d59
<             0.07f,
91,92d83
<     private ImageView colorPickerButton;
<     private PorterDuffColorFilter colorPickerFilter = new PorterDuffColorFilter(0xff51bdf3, PorterDuff.Mode.MULTIPLY);
94c85
<     public ColorPicker(Context context, final boolean isVideo) {
---
>     public ColorPicker(Context context) {
106c97
<         addView(settingsButton, LayoutHelper.createFrame(settingsWidth, 52));
---
>         addView(settingsButton, LayoutHelper.createFrame(46, 52));
113,133d103
<         colorPickerButton = new ImageView(context);
<         colorPickerButton.setScaleType(ImageView.ScaleType.CENTER);
<         colorPickerButton.setImageResource(R.drawable.photo_color_picker);
<         if (!isVideo) {
<             addView(colorPickerButton, LayoutHelper.createFrame(settingsWidth, 52));
<         }
<         colorPickerButton.setOnClickListener(new View.OnClickListener() {
<             @Override
<             public void onClick(View v) {
<                 if (delegate != null) {
<                     boolean p = delegate.onColorPicker();
< 
<                     PorterDuffColorFilter f = null;
<                     if (p) f = colorPickerFilter;
< 
<                     colorPickerButton.setColorFilter(f);
<                     colorPickerButton.setImageResource(R.drawable.photo_color_picker);
<                 }
<             }
<         });
< 
225,231d194
<     public void setSwatchPaintColor(int color) {
<         findColorLocation(color);
<         swatchPaint.setColor(color);
<         swatchStrokePaint.setColor(color);
<         invalidate();
<     }
< 
314c277
<         gradientPaint.setShader(new LinearGradient(AndroidUtilities.dp(56), 0, width - AndroidUtilities.dp(52) * 2, 0, COLORS, LOCATIONS, Shader.TileMode.REPEAT));
---
>         gradientPaint.setShader(new LinearGradient(AndroidUtilities.dp(56), 0, width - AndroidUtilities.dp(56), 0, COLORS, LOCATIONS, Shader.TileMode.REPEAT));
316c279
<         rectF.set(AndroidUtilities.dp(56), y, width - AndroidUtilities.dp(52) * 2, y + AndroidUtilities.dp(12));
---
>         rectF.set(AndroidUtilities.dp(56), y, width - AndroidUtilities.dp(56), y + AndroidUtilities.dp(12));
318,323c281,282
<         // Move settingButton left after coloPickerButton.
<         final int colorX = width - colorPickerButton.getMeasuredWidth();
<         final int yPos = height - AndroidUtilities.dp(52);
<         settingsButton.layout((int)rectF.right + AndroidUtilities.dp(5), yPos, colorX, height);
<         undoButton.layout(0, yPos, settingsButton.getMeasuredWidth(), height);
<         colorPickerButton.layout(colorX, yPos, width, height);
---
>         settingsButton.layout(width - settingsButton.getMeasuredWidth(), height - AndroidUtilities.dp(52), width, height);
>         undoButton.layout(0, height - AndroidUtilities.dp(52), settingsButton.getMeasuredWidth(), height);
374,384d332
< 
<     private void findColorLocation(int color) {
<         for (float i = 0; i <= 1; i += 0.001f) {
<             int colorOnLine = colorForLocation(i);
<             if (Math.abs(color - colorOnLine) < 10000) {
<                 setLocation(i);
<                 return;
<             }
<         }
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PaintingOverlay.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PaintingOverlay.java
7a8
> import android.graphics.Typeface;
33a35,36
> import java.util.Map;
> import java.util.Set;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
76,77d75
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< 
949c947
<             if (!PasscodeHelper.checkPasscode((Activity) getContext(), password) && !SharedConfig.checkPasscode(password)) {
---
>             if (!SharedConfig.checkPasscode(password)) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
9,13c9
< import android.graphics.Bitmap;
< import android.graphics.Canvas;
< import android.graphics.Color;
< import android.graphics.PorterDuff;
< import android.graphics.PorterDuffColorFilter;
---
> import android.graphics.*;
55,56d50
< import org.telegram.ui.Components.Paint.Brush;
< import org.telegram.ui.Components.Paint.Painting;
58,61d51
< import org.telegram.ui.Components.Paint.RenderView;
< import org.telegram.ui.Components.Paint.Swatch;
< import org.telegram.ui.Components.Paint.UndoStore;
< import org.telegram.ui.Components.Paint.Views.ColorPicker;
65a56,61
> import org.telegram.ui.Components.Paint.UndoStore;
> import org.telegram.ui.Components.Paint.Brush;
> import org.telegram.ui.Components.Paint.RenderView;
> import org.telegram.ui.Components.Paint.Painting;
> import org.telegram.ui.Components.Paint.Swatch;
> import org.telegram.ui.Components.Paint.Views.ColorPicker;
244c240
<         colorPicker = new ColorPicker(context, originalBitmap == null);
---
>         colorPicker = new ColorPicker(context);
284,289d279
<             }
< 
<             @Override
<             public boolean onColorPicker() {
<                 renderView.isColorPicker = !renderView.isColorPicker;
<                 return renderView.isColorPicker;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
220d219
<         messageEditText.setShowDisableMarkdown(true);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerWebView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerWebView.java
4a5,7
> import android.animation.AnimatorSet;
> import android.animation.ObjectAnimator;
> import android.animation.ValueAnimator;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PipRoundVideoView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PipRoundVideoView.java
29a30
> import androidx.annotation.Keep;
39,40d39
< 
< import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PollVotesAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PollVotesAlert.java
43,47d42
< import androidx.annotation.Keep;
< import androidx.recyclerview.widget.DefaultItemAnimator;
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
72a68,72
> 
> import androidx.annotation.Keep;
> import androidx.recyclerview.widget.DefaultItemAnimator;
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
23d22
< import org.telegram.messenger.FileLoader;
26d24
< import org.telegram.messenger.MessageObject;
27a26,27
> import org.telegram.messenger.FileLoader;
> import org.telegram.messenger.MessageObject;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/DoubledLimitsBottomSheet.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/DoubledLimitsBottomSheet.java
317a318,322
>             limits.add(new Limit(
>                     LocaleController.getString("ConnectedAccountsLimitTitle", R.string.ConnectedAccountsLimitTitle),
>                     LocaleController.formatString("ConnectedAccountsLimitSubtitle", R.string.ConnectedAccountsLimitSubtitle, 4),
>                     UserConfig.MAX_ACCOUNT_DEFAULT_COUNT, UserConfig.MAX_ACCOUNT_COUNT
>             ));
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/PremiumAppIconsPreviewView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/PremiumAppIconsPreviewView.java
11a12
> import org.telegram.messenger.FileLog;
38a40,44
>         if (icons.size() < 3) {
>             FileLog.e(new IllegalArgumentException("There should be at least 3 premium icons!"));
>             isEmpty = true;
>             return;
>         }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/PremiumButtonView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/PremiumButtonView.java
10a11
> import android.util.TypedValue;
14a16
> import android.widget.TextView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/PremiumFeatureBottomSheet.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/PremiumFeatureBottomSheet.java
2a3,5
> import android.animation.Animator;
> import android.animation.AnimatorListenerAdapter;
> import android.animation.ValueAnimator;
38a42
> import org.telegram.ui.Components.CubicBezierInterpolator;
260c264
<                     if (!enterAnimationIsRunning) {
---
>                     if (!enterAnimationIsRunning || !(page.topView instanceof PremiumAppIconsPreviewView)) {
268a273,278
> 
>                     if (page.topView instanceof PremiumAppIconsPreviewView) {
>                         page.setTranslationX(-offset);
>                         page.title.setTranslationX(offset);
>                         page.description.setTranslationX(offset);
>                     }
426a437,439
>             } else if (startType == PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS) {
>                 premiumButtonView.buttonTextView.setText(LocaleController.getString(R.string.UnlockPremiumIcons));
>                 premiumButtonView.setIcon(R.raw.unlock_icon);
601a615,617
>                 } else if (startType == PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS) {
>                     title.setText(LocaleController.getString("PremiumPreviewAppIcon", R.string.PremiumPreviewAppIcon));
>                     description.setText(LocaleController.getString("PremiumPreviewAppIconDescription2", R.string.PremiumPreviewAppIconDescription2));
647a664,665
>         } else if (featureData.type == PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS) {
>             return new PremiumAppIconsPreviewView(context);
656a675,698
>             if (page.topView instanceof PremiumAppIconsPreviewView) {
>                 PremiumAppIconsPreviewView premiumAppIconsPreviewView = (PremiumAppIconsPreviewView) page.topView;
>                 ValueAnimator valueAnimator = ValueAnimator.ofFloat(page.getMeasuredWidth(), 0);
>                 premiumAppIconsPreviewView.setOffset(page.getMeasuredWidth());
>                 enterAnimationIsRunning = true;
>                 valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
>                     @Override
>                     public void onAnimationUpdate(ValueAnimator animation) {
>                         premiumAppIconsPreviewView.setOffset((Float) animation.getAnimatedValue());
>                     }
>                 });
>                 valueAnimator.addListener(new AnimatorListenerAdapter() {
>                     @Override
>                     public void onAnimationEnd(Animator animation) {
>                         enterAnimationIsRunning = false;
>                         premiumAppIconsPreviewView.setOffset(0);
>                         super.onAnimationEnd(animation);
>                     }
>                 });
>                 valueAnimator.setDuration(500);
>                 valueAnimator.setStartDelay(100);
>                 valueAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
>                 valueAnimator.start();
>             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/VideoScreenPreview.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/VideoScreenPreview.java
129c129,134
<         } else if (type == PremiumPreviewFragment.PREMIUM_FEATURE_PROFILE_BADGE || type == PremiumPreviewFragment.PREMIUM_FEATURE_ADVANCED_CHAT_MANAGEMENT || type == PremiumPreviewFragment.PREMIUM_FEATURE_ADS || type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_AVATARS || type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_EMOJI || type == PremiumPreviewFragment.PREMIUM_FEATURE_REACTIONS) {
---
>         } else if (type == PremiumPreviewFragment.PREMIUM_FEATURE_PROFILE_BADGE ||
>                 type == PremiumPreviewFragment.PREMIUM_FEATURE_ADVANCED_CHAT_MANAGEMENT ||
>                 type == PremiumPreviewFragment.PREMIUM_FEATURE_ADS ||
>                 type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_AVATARS ||
>                 type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_EMOJI ||
>                 type == PremiumPreviewFragment.PREMIUM_FEATURE_REACTIONS) {
317c322,327
<                 if (type == PremiumPreviewFragment.PREMIUM_FEATURE_PROFILE_BADGE || type == PremiumPreviewFragment.PREMIUM_FEATURE_ADVANCED_CHAT_MANAGEMENT || type == PremiumPreviewFragment.PREMIUM_FEATURE_ADS || type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_AVATARS || type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_EMOJI || type == PremiumPreviewFragment.PREMIUM_FEATURE_REACTIONS) {
---
>                 if (type == PremiumPreviewFragment.PREMIUM_FEATURE_PROFILE_BADGE ||
>                         type == PremiumPreviewFragment.PREMIUM_FEATURE_ADVANCED_CHAT_MANAGEMENT ||
>                         type == PremiumPreviewFragment.PREMIUM_FEATURE_ADS ||
>                         type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_AVATARS ||
>                         type == PremiumPreviewFragment.PREMIUM_FEATURE_ANIMATED_EMOJI ||
>                         type == PremiumPreviewFragment.PREMIUM_FEATURE_REACTIONS) {
322c332,336
<                     starDrawable.rect.set(AndroidUtilities.rectTmp.centerX() - getParticlesWidth, AndroidUtilities.rectTmp.centerY() - getParticlesWidth, AndroidUtilities.rectTmp.centerX() + getParticlesWidth, AndroidUtilities.rectTmp.centerY() + getParticlesWidth);
---
>                     starDrawable.rect.set(
>                             AndroidUtilities.rectTmp.centerX() - getParticlesWidth,
>                             AndroidUtilities.rectTmp.centerY() - getParticlesWidth,
>                             AndroidUtilities.rectTmp.centerX() + getParticlesWidth,
>                             AndroidUtilities.rectTmp.centerY() + getParticlesWidth);
581c595,603
<                     String params = "?account=" + currentAccount + "&id=" + document.id + "&hash=" + document.access_hash + "&dc=" + document.dc_id + "&size=" + document.size + "&mime=" + URLEncoder.encode(document.mime_type, "UTF-8") + "&rid=" + FileLoader.getInstance(currentAccount).getFileReference(MediaDataController.getInstance(currentAccount).getPremiumPromo()) + "&name=" + URLEncoder.encode(FileLoader.getDocumentFileName(document), "UTF-8") + "&reference=" + Utilities.bytesToHex(document.file_reference != null ? document.file_reference : new byte[0]);
---
>                     String params = "?account=" + currentAccount +
>                             "&id=" + document.id +
>                             "&hash=" + document.access_hash +
>                             "&dc=" + document.dc_id +
>                             "&size=" + document.size +
>                             "&mime=" + URLEncoder.encode(document.mime_type, "UTF-8") +
>                             "&rid=" + FileLoader.getInstance(currentAccount).getFileReference(MediaDataController.getInstance(currentAccount).getPremiumPromo()) +
>                             "&name=" + URLEncoder.encode(FileLoader.getDocumentFileName(document), "UTF-8") +
>                             "&reference=" + Utilities.bytesToHex(document.file_reference != null ? document.file_reference : new byte[0]);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/RadioButton.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/RadioButton.java
19,20d18
< import android.view.View;
< 
21a20
> import android.view.View;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ReactedHeaderView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ReactedHeaderView.java
7a8
> import android.util.Pair;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ReactedUsersListView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ReactedUsersListView.java
11a12
> import android.util.Log;
12a14
> import android.util.Pair;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Reactions/AnimatedEmojiEffect.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Reactions/AnimatedEmojiEffect.java
13a14
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Reactions/CustomEmojiReactionsWindow.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Reactions/CustomEmojiReactionsWindow.java
26a27
> import org.checkerframework.checker.units.qual.A;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/Reactions/ReactionsEffectOverlay.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/Reactions/ReactionsEffectOverlay.java
22a23
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
86,87c86
<     public @interface SectionsType {
<     }
---
>     public @interface SectionsType {}
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerViewItemRangeSelector.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerViewItemRangeSelector.java
6,7d5
< import androidx.recyclerview.widget.RecyclerView;
< 
8a7,8
> 
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SearchViewPager.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SearchViewPager.java
31d30
< import org.telegram.messenger.MediaController;
62a62
> import java.util.Iterator;
65,67d64
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
90,93c87,88
<     public final static int forwardNoQuoteItemId = 202;
<     public final static int saveItemId = 203;
<     public final static int deleteItemId = 204;
<     public final static int speedItemId = 205;
---
>     public final static int deleteItemId = 202;
>     public final static int speedItemId = 203;
98,99d92
<     private ActionBarMenuItem forwardNoQuoteItem;
<     private ActionBarMenuItem saveItem;
427,431c420
<             forwardNoQuoteItem = actionMode.addItemWithWidth(forwardNoQuoteItemId, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("NoQuoteForward", R.string.NoQuoteForward));
<             forwardItem = actionMode.addItemWithWidth(forwardItemId, ConfigManager.getBooleanOrFalse(Defines.showNoQuoteForward) ? R.drawable.msg_noquote_forward :
<                     R.drawable.msg_forward,
<                 AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward));
<             saveItem = actionMode.addItemWithWidth(saveItemId, R.drawable.msg_download, AndroidUtilities.dp(54), LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
---
>             forwardItem = actionMode.addItemWithWidth(forwardItemId, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward));
452,458d440
<             if (ConfigManager.getBooleanOrFalse(Defines.showNoQuoteForward)) {
<                 forwardNoQuoteItem.setVisibility(View.VISIBLE);
<                 forwardItem.setIcon(R.drawable.msg_noquote_forward);
<             } else {
<                 forwardNoQuoteItem.setVisibility(View.GONE);
<                 forwardItem.setIcon(R.drawable.msg_forward);
<             }
489c471
<             if (obj.getDocument() != null && obj.getDocument().size >= 300 * 1024 * 1024) {
---
>             if (obj.getDocument() != null && obj.getDocument().size >= 150 * 1024 * 1024) {
536,547c518
<         } else if (id == saveItemId) {
<             ArrayList<MessageObject> messageObjects = new ArrayList<>(selectedFiles.values());
<             hideActionMode();
<             MediaController.saveFilesFromMessages(getContext(), AccountInstance.getInstance(currentAccount), messageObjects, (count) -> {
<                 if (count > 0) {
<                     if (getContext() == null) {
<                         return;
<                     }
<                     BulletinFactory.of(fragmentView, null).createDownloadBulletin(BulletinFactory.FileType.UNKNOWNS, count, null).show();
<                 }
<             });
<         } else if (id == forwardItemId || id == forwardNoQuoteItemId) {
---
>         } else if (id == forwardItemId) {
552,555d522
<             ArrayList<MessageObject> fmessages = new ArrayList<>(selectedFiles.values());
<             fragment.forwardContext = () -> fmessages;
<             var forwardParams = fragment.forwardContext.getForwardParams();
<             forwardParams.noQuote = id == forwardNoQuoteItemId;
556a524,529
>                 ArrayList<MessageObject> fmessages = new ArrayList<>();
>                 Iterator<FilteredSearchView.MessageHashId> idIterator = selectedFiles.keySet().iterator();
>                 while (idIterator.hasNext()) {
>                     FilteredSearchView.MessageHashId hashId = idIterator.next();
>                     fmessages.add(selectedFiles.get(hashId));
>                 }
565c538
<                             AccountInstance.getInstance(currentAccount).getSendMessagesHelper().sendMessage(message.toString(), did, null, null, null, true, null, null, null, forwardParams.notify, forwardParams.scheduleDate, null, false);
---
>                             AccountInstance.getInstance(currentAccount).getSendMessagesHelper().sendMessage(message.toString(), did, null, null, null, true, null, null, null, true, 0, null, false);
567c540
<                         AccountInstance.getInstance(currentAccount).getSendMessagesHelper().sendMessage(fmessages, did, forwardParams.noQuote, forwardParams.noCaption, forwardParams.notify, forwardParams.scheduleDate);
---
>                         AccountInstance.getInstance(currentAccount).getSendMessagesHelper().sendMessage(fmessages, did, false,false, true, 0);
573,574d545
<                     args1.putBoolean("forward_noquote", forwardParams.noQuote);
<                     args1.putBoolean("forward_nocaption", forwardParams.noCaption);
669a641
>             if (deleteItem != null) {
671d642
<             boolean canShowSave = true;
674,675c645
<                 var messageObject = selectedFiles.get(key);
<                 if (!messageObject.isDownloadingFile) {
---
>                     if (!selectedFiles.get(key).isDownloadingFile) {
677d646
<                     canShowSave = false;
680,681d648
<                 if (messageObject.getDocument() == null) {
<                     canShowSave = false;
683,687d649
<             }
<             if (saveItem != null) {
<                 saveItem.setVisibility(canShowSave ? View.VISIBLE : View.GONE);
<             }
<             if (deleteItem != null) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarAccessibilityDelegate.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarAccessibilityDelegate.java
58c58
<     public void postAccessibilityEventRunnable(@NonNull View host) {
---
>     private void postAccessibilityEventRunnable(@NonNull View host) {
68d67
<             host.removeOnAttachStateChangeListener(onAttachStateChangeListener);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarWaveform.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarWaveform.java
17a18
> import android.util.Log;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SenderSelectPopup.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SenderSelectPopup.java
55,57d54
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
146,167d142
<         if (ConfigManager.getBooleanOrFalse(Defines.quickToggleAnonymous)) {
<             var chat = messagesController.getChat(chatFull.id);
<             if (chat != null && chat.creator) {
<                 if (peers.stream().noneMatch(peer -> peer.peer.channel_id == chat.id)) {
<                     peers.add(0,new TLRPC.TL_sendAsPeer() {{
<                         peer = new TLRPC.TL_peerChannel() {{
<                             channel_id = chat.id;
<                         }};
<                     }});
<                 }
< 
<                 var selfId = UserConfig.getInstance(UserConfig.selectedAccount).getCurrentUser().id;
<                 if (peers.stream().noneMatch(peer -> peer.peer.user_id == selfId)) {
<                     peers.add(peers.size() >= 1 ? 1 : 0, new TLRPC.TL_sendAsPeer() {{
<                         peer = new TLRPC.TL_peerUser() {{
<                             user_id = selfId;
<                         }};
<                     }});
<                 }
<             }
<         }
< 
197,203d171
<                 final var currentChat = messagesController.getChat(chatFull.id);
<                 final var isQuickToggleAnonymousEnabled = ConfigManager.getBooleanOrFalse(Defines.quickToggleAnonymous);
<                 var flag = -1; // for private select check
<                 if (currentChat.creator && isQuickToggleAnonymousEnabled) {
<                     flag = currentChat.admin_rights.anonymous ? 0 : 1;
<                 }
< 
221,227c189
<                         final String text;
<                         if (chat.creator && isQuickToggleAnonymousEnabled && -peerId == currentChat.id) {
<                             text = LocaleController.getString("SwitchToAnonymously", R.string.SwitchToAnonymously);
<                         } else {
<                             text = LocaleController.formatPluralString(ChatObject.isChannel(chat) && !chat.megagroup ? "Subscribers" : "Members", chat.participants_count);
<                         }
<                         senderView.subtitle.setText(text);
---
>                         senderView.subtitle.setText(LocaleController.formatPluralString(ChatObject.isChannel(chat) && !chat.megagroup ? "Subscribers" : "Members", chat.participants_count));
230c192
<                     senderView.avatar.setSelected((chatFull.default_send_as != null ? chatFull.default_send_as.channel_id == peer.channel_id : position == 0)  || flag == 0, false);
---
>                     senderView.avatar.setSelected(chatFull.default_send_as != null ? chatFull.default_send_as.channel_id == peer.channel_id : position == 0, false);
236,242c197
<                         final String text;
<                         if (currentChat.creator && isQuickToggleAnonymousEnabled) {
<                             text = LocaleController.getString("SwitchToPersonalAccount", R.string.SwitchToPersonalAccount);
<                         } else {
<                             text = LocaleController.getString("VoipGroupPersonalAccount", R.string.VoipGroupPersonalAccount);
<                         }
<                         senderView.subtitle.setText(text);
---
>                         senderView.subtitle.setText(LocaleController.getString("VoipGroupPersonalAccount", R.string.VoipGroupPersonalAccount));
245c200
<                     senderView.avatar.setSelected((chatFull.default_send_as != null ? chatFull.default_send_as.user_id == peer.user_id : position == 0) || flag == 1, false);
---
>                     senderView.avatar.setSelected(chatFull.default_send_as != null ? chatFull.default_send_as.user_id == peer.user_id : position == 0, false);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SenderSelectView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SenderSelectView.java
11a12
> import android.view.accessibility.AccessibilityNodeInfo;
13a15
> import androidx.annotation.Nullable;
16a19,20
> 
> import com.google.android.exoplayer2.util.Log;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
89a90
> import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
115,118d115
< import top.qwq2333.nullgram.config.ForwardContext;
< import top.qwq2333.nullgram.ui.SendOptionsMenuLayout;
< 
< 
356d352
<             clearSearchImageView.setContentDescription(LocaleController.getString("ClearButton", R.string.ClearButton));
468,471d463
<         this(context, fragment, messages, text, text2, channel, copyLink, copyLink2, fullScreen, forCall, false, resourcesProvider);
<     }
< 
<     public ShareAlert(final Context context, ChatActivity fragment, ArrayList<MessageObject> messages, final String text, final String text2, boolean channel, final String copyLink, final String copyLink2, boolean fullScreen, boolean forCall, boolean noQuote, Theme.ResourcesProvider resourcesProvider) {
474,475d465
<         this.forwardContext = () -> sendingMessageObjects;
<         this.forwardContext.getForwardParams().noQuote = noQuote;
1808c1798
<     private final ForwardContext forwardContext;
---
>     private boolean showSendersName = true;
1813a1804,1841
>         LinearLayout layout = new LinearLayout(getContext());
>         layout.setOrientation(LinearLayout.VERTICAL);
>         if (sendingMessageObjects != null) {
>             ActionBarPopupWindow.ActionBarPopupWindowLayout sendPopupLayout1 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity, resourcesProvider);
>             if (darkTheme) {
>                 sendPopupLayout1.setBackgroundColor(getThemedColor(Theme.key_voipgroup_inviteMembersBackground));
>             }
>             sendPopupLayout1.setAnimationEnabled(false);
>             sendPopupLayout1.setOnTouchListener(new View.OnTouchListener() {
>                 private android.graphics.Rect popupRect = new android.graphics.Rect();
> 
>                 @Override
>                 public boolean onTouch(View v, MotionEvent event) {
>                     if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
>                         if (sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                             v.getHitRect(popupRect);
>                             if (!popupRect.contains((int) event.getX(), (int) event.getY())) {
>                                 sendPopupWindow.dismiss();
>                             }
>                         }
>                     }
>                     return false;
>                 }
>             });
>             sendPopupLayout1.setDispatchKeyEventListener(keyEvent -> {
>                 if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                     sendPopupWindow.dismiss();
>                 }
>             });
>             sendPopupLayout1.setShownFromBottom(false);
> 
>             ActionBarMenuSubItem showSendersNameView = new ActionBarMenuSubItem(getContext(), true, true, false, resourcesProvider);
>             if (darkTheme) {
>                 showSendersNameView.setTextColor(getThemedColor(Theme.key_voipgroup_nameText));
>             }
>             sendPopupLayout1.addView(showSendersNameView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
>             showSendersNameView.setTextAndIcon(false ? LocaleController.getString("ShowSenderNames", R.string.ShowSenderNames) : LocaleController.getString("ShowSendersName", R.string.ShowSendersName), 0);
>             showSendersNameView.setChecked(showSendersName = true);
1815,1818c1843,1921
<         SendOptionsMenuLayout layout = new SendOptionsMenuLayout(parentActivity, forwardContext, true, true, darkTheme, () -> {
<             var params = forwardContext.getForwardParams();
<             sendInternal(params.notify, params.scheduleDate);
<         }, resourcesProvider);
---
>             ActionBarMenuSubItem hideSendersNameView = new ActionBarMenuSubItem(getContext(), true, false, true, resourcesProvider);
>             if (darkTheme) {
>                 hideSendersNameView.setTextColor(getThemedColor(Theme.key_voipgroup_nameText));
>             }
>             sendPopupLayout1.addView(hideSendersNameView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
>             hideSendersNameView.setTextAndIcon(false ? LocaleController.getString("HideSenderNames", R.string.HideSenderNames) : LocaleController.getString("HideSendersName", R.string.HideSendersName), 0);
>             hideSendersNameView.setChecked(!showSendersName);
>             showSendersNameView.setOnClickListener(e -> {
>                 showSendersNameView.setChecked(showSendersName = true);
>                 hideSendersNameView.setChecked(!showSendersName);
>             });
>             hideSendersNameView.setOnClickListener(e -> {
>                 showSendersNameView.setChecked(showSendersName = false);
>                 hideSendersNameView.setChecked(!showSendersName);
>             });
>             sendPopupLayout1.setupRadialSelectors(getThemedColor(darkTheme ? Theme.key_voipgroup_listSelector : Theme.key_dialogButtonSelector));
> 
>             layout.addView(sendPopupLayout1, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, -8));
>         }
> 
>         ActionBarPopupWindow.ActionBarPopupWindowLayout sendPopupLayout2 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity, resourcesProvider);
>         if (darkTheme) {
>             sendPopupLayout2.setBackgroundColor(Theme.getColor(Theme.key_voipgroup_inviteMembersBackground));
>         }
>         sendPopupLayout2.setAnimationEnabled(false);
>         sendPopupLayout2.setOnTouchListener(new View.OnTouchListener() {
>             private android.graphics.Rect popupRect = new android.graphics.Rect();
> 
>             @Override
>             public boolean onTouch(View v, MotionEvent event) {
>                 if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
>                     if (sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                         v.getHitRect(popupRect);
>                         if (!popupRect.contains((int) event.getX(), (int) event.getY())) {
>                             sendPopupWindow.dismiss();
>                         }
>                     }
>                 }
>                 return false;
>             }
>         });
>         sendPopupLayout2.setDispatchKeyEventListener(keyEvent -> {
>             if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                 sendPopupWindow.dismiss();
>             }
>         });
>         sendPopupLayout2.setShownFromBottom(false);
> 
>         ActionBarMenuSubItem sendWithoutSound = new ActionBarMenuSubItem(getContext(), true, true, resourcesProvider);
>         if (darkTheme) {
>             sendWithoutSound.setTextColor(getThemedColor(Theme.key_voipgroup_nameText));
>             sendWithoutSound.setIconColor(getThemedColor(Theme.key_windowBackgroundWhiteHintText));
>         }
>         sendWithoutSound.setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
>         sendWithoutSound.setMinimumWidth(AndroidUtilities.dp(196));
>         sendPopupLayout2.addView(sendWithoutSound, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
>         sendWithoutSound.setOnClickListener(v -> {
>             if (sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                 sendPopupWindow.dismiss();
>             }
>             sendInternal(false);
>         });
>         ActionBarMenuSubItem sendMessage = new ActionBarMenuSubItem(getContext(), true, true, resourcesProvider);
>         if (darkTheme) {
>             sendMessage.setTextColor(getThemedColor(Theme.key_voipgroup_nameText));
>             sendMessage.setIconColor(getThemedColor(Theme.key_windowBackgroundWhiteHintText));
>         }
>         sendMessage.setTextAndIcon(LocaleController.getString("SendMessage", R.string.SendMessage), R.drawable.msg_send);
>         sendMessage.setMinimumWidth(AndroidUtilities.dp(196));
>         sendPopupLayout2.addView(sendMessage, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
>         sendMessage.setOnClickListener(v -> {
>             if (sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                 sendPopupWindow.dismiss();
>             }
>             sendInternal(true);
>         });
>         sendPopupLayout2.setupRadialSelectors(getThemedColor(darkTheme ? Theme.key_voipgroup_listSelector : Theme.key_dialogButtonSelector));
> 
>         layout.addView(sendPopupLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
1830d1932
<         layout.setSendPopupWindow(sendPopupWindow);
1848,1852c1950
<     private void sendInternal(boolean withSound) {
<         sendInternal(withSound, 0);
<     }
< 
<     private void sendInternal(boolean withSound, int scheduleDate) {
---
>     protected void sendInternal(boolean withSound) {
1872c1970
<                     SendMessagesHelper.getInstance(currentAccount).sendMessage(text[0] == null ? null : text[0].toString(), key, null, null, null, true, entities, null, null, withSound, scheduleDate, null, false);
---
>                     SendMessagesHelper.getInstance(currentAccount).sendMessage(text[0] == null ? null : text[0].toString(), key, replyTopMsg, replyTopMsg, null, true, entities, null, null, withSound, 0, null, false);
1874c1972
<                 int result = SendMessagesHelper.getInstance(currentAccount).sendMessage(sendingMessageObjects, key, forwardContext.getForwardParams().noQuote, forwardContext.getForwardParams().noCaption, withSound, 0, replyTopMsg);
---
>                 int result = SendMessagesHelper.getInstance(currentAccount).sendMessage(sendingMessageObjects, key, !showSendersName,false, withSound, 0, replyTopMsg);
1910c2008
<                         SendMessagesHelper.getInstance(currentAccount).sendMessage(text[0] == null ? null : text[0].toString(), key, null, replyTopMsg, null, true, entities, null, null, withSound, scheduleDate, null, false);
---
>                         SendMessagesHelper.getInstance(currentAccount).sendMessage(text[0] == null ? null : text[0].toString(), key, null, replyTopMsg, null, true, entities, null, null, withSound, 0, null, false);
1912c2010
<                     SendMessagesHelper.getInstance(currentAccount).sendMessage(sendingText[num], key, null, replyTopMsg, null, true, null, null, null, withSound, scheduleDate, null, false);
---
>                     SendMessagesHelper.getInstance(currentAccount).sendMessage(sendingText[num], key, null, replyTopMsg, null, true, null, null, null, withSound, 0, null, false);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SharedMediaFastScrollTooltip.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SharedMediaFastScrollTooltip.java
4a5
> import android.graphics.Color;
20a22
> import org.telegram.ui.ActionBar.SimpleTextView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SharedMediaLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SharedMediaLayout.java
121,123d120
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
464d460
<     private ActionBarMenuItem forwardNoQuoteItem;
847a844,845
>                 String fileName = (String) args[0];
>                 if (fileName != null) {
850a849,855
>                             for (int i = 0; i < allMessages.size(); i++) {
>                                 if (!fileName.equals(allMessages.get(i).getFileName())) {
>                                     allMessages.remove(i);
>                                     i--;
>                                 }
>                             }
>                             if (allMessages.size() > 0) {
852a858
>                         }
855a862
>         }
1164d1170
<     private final static int forward_noquote = 1001;
1541c1547,1548
<         gotoItem = new ActionBarMenuItem(context, null, getThemedColor(Theme.key_actionBarActionModeDefaultSelector), getThemedColor(Theme.key_windowBackgroundWhiteGrayText2), false);
---
>         if (!DialogObject.isEncryptedDialog(dialog_id)) {
>             gotoItem = new ActionBarMenuItem(context, null, getThemedColor(Theme.key_actionBarActionModeDefaultSelector), getThemedColor(Theme.key_actionBarActionModeDefaultIcon), false);
1548,1557d1554
<         if (!DialogObject.isEncryptedDialog(dialog_id)) {
<             if (ConfigManager.getBooleanOrFalse(Defines.showNoQuoteForward)) {
<                 forwardNoQuoteItem = new ActionBarMenuItem(context, null, getThemedColor(Theme.key_actionBarActionModeDefaultSelector), getThemedColor(Theme.key_windowBackgroundWhiteGrayText2), false);
<                 forwardNoQuoteItem.setIcon(R.drawable.msg_forward);
<                 forwardNoQuoteItem.setContentDescription(LocaleController.getString("NoQuoteForward", R.string.NoQuoteForward));
<                 forwardNoQuoteItem.setDuplicateParentStateEnabled(false);
<                 actionModeLayout.addView(forwardNoQuoteItem, new LinearLayout.LayoutParams(AndroidUtilities.dp(54), ViewGroup.LayoutParams.MATCH_PARENT));
<                 actionModeViews.add(forwardNoQuoteItem);
<                 forwardNoQuoteItem.setOnClickListener(v -> onActionBarItemClick(v, forward_noquote));
<             }
1559,1560c1556,1557
<             forwardItem = new ActionBarMenuItem(context, null, getThemedColor(Theme.key_actionBarActionModeDefaultSelector), getThemedColor(Theme.key_windowBackgroundWhiteGrayText2), false);
<             forwardItem.setIcon(ConfigManager.getBooleanOrFalse(Defines.showNoQuoteForward) ? R.drawable.msg_noquote_forward : R.drawable.msg_forward);
---
>             forwardItem = new ActionBarMenuItem(context, null, getThemedColor(Theme.key_actionBarActionModeDefaultSelector), getThemedColor(Theme.key_actionBarActionModeDefaultIcon), false);
>             forwardItem.setIcon(R.drawable.msg_forward);
2359d2355
<         if (forwardNoQuoteItem != null) forwardNoQuoteItem.setAlpha(noforwards ? 0.5f : 1f);
2362d2357
<             if (forwardNoQuoteItem != null) forwardNoQuoteItem.setBackground(null);
2365,2366d2359
<             if (forwardNoQuoteItem != null)
<                 forwardNoQuoteItem.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 5));
3259c3252
<         } else if (id == forward || id == forward_noquote) {
---
>         } else if (id == forward) {
3283a3277
>             fragment.setDelegate((fragment1, dids, message, param, topicsFragment) -> {
3296,3301d3289
<             }
<             fragment.forwardContext = () -> fmessages;
<             var forwardParams = fragment.forwardContext.getForwardParams();
<             forwardParams.noQuote = id == forward_noquote;
<             fragment.setDelegate((fragment1, dids, message, param, topicsFragment) -> {
<                 for (int a = 1; a >= 0; a--) {
3312c3300
<                             profileActivity.getSendMessagesHelper().sendMessage(message.toString(), did, null, null, null, true, null, null, null, forwardParams.notify, forwardParams.scheduleDate, null, false);
---
>                             profileActivity.getSendMessagesHelper().sendMessage(message.toString(), did, null, null, null, true, null, null, null, true, 0, null, false);
3314c3302
<                         profileActivity.getSendMessagesHelper().sendMessage(fmessages, did, forwardParams.noQuote, forwardParams.noCaption, forwardParams.notify, forwardParams.scheduleDate);
---
>                         profileActivity.getSendMessagesHelper().sendMessage(fmessages, did, false, false, true, 0);
3331,3332d3318
<                     args1.putBoolean("forward_noquote", forwardParams.noQuote);
<                     args1.putBoolean("forward_nocaption", forwardParams.noCaption);
6226c6212
<             View view = new UserCell(mContext, 9, 0, true, false, false, resourcesProvider);
---
>             View view = new UserCell(mContext, 9, 0, true, false, resourcesProvider);
6566,6569d6551
<         }
<         if (forwardNoQuoteItem != null) {
<             arrayList.add(new ThemeDescription(forwardNoQuoteItem.getIconView(), ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteGrayText2));
<             arrayList.add(new ThemeDescription(forwardNoQuoteItem, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SharingLocationsAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SharingLocationsAlert.java
26,28d25
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
41a39,41
> 
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ShutterButton.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ShutterButton.java
19a20
> import android.view.ViewConfiguration;
23,24d23
< import androidx.annotation.Keep;
< 
27a27,28
> 
> import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SideMenultItemAnimator.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SideMenultItemAnimator.java
10,12d9
< import androidx.recyclerview.widget.RecyclerView;
< import androidx.recyclerview.widget.SimpleItemAnimator;
< 
14a12,14
> 
> import androidx.recyclerview.widget.RecyclerView;
> import androidx.recyclerview.widget.SimpleItemAnimator;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/SpeedIconDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/SpeedIconDrawable.java
8a9
> import android.util.Log;
14a16,21
> import org.telegram.messenger.LocaleController;
> import org.telegram.messenger.R;
> 
> import java.text.DecimalFormat;
> import java.text.DecimalFormatSymbols;
> import java.util.Locale;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/spoilers/SpoilerEffect.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/spoilers/SpoilerEffect.java
65c65
<     private final Paint[] particlePaints = new Paint[ALPHAS.length];
---
>     private Paint[] particlePaints = new Paint[ALPHAS.length];
67c67
<     private final Stack<Particle> particlesPool = new Stack<>();
---
>     private Stack<Particle> particlesPool = new Stack<>();
70,71c70,71
<     private final float[] particleRands = new float[RAND_REPEAT];
<     private final int[] renderCount = new int[ALPHAS.length];
---
>     private float[] particleRands = new float[RAND_REPEAT];
>     private int[] renderCount = new int[ALPHAS.length];
73c73
<     private static final Path tempPath = new Path();
---
>     private static Path tempPath = new Path();
77c77
<     private final ArrayList<Particle> particles = new ArrayList<>();
---
>     private ArrayList<Particle> particles = new ArrayList<>();
97,98c97,98
<     private final boolean isLowDevice;
<     private final boolean enableAlpha;
---
>     private boolean isLowDevice;
>     private boolean enableAlpha;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/spoilers/SpoilersTextView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/spoilers/SpoilersTextView.java
22,24d21
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
26,28c23,25
<     private final SpoilersClickDetector clickDetector;
<     private final List<SpoilerEffect> spoilers = new ArrayList<>();
<     private final Stack<SpoilerEffect> spoilersPool = new Stack<>();
---
>     private SpoilersClickDetector clickDetector;
>     private List<SpoilerEffect> spoilers = new ArrayList<>();
>     private Stack<SpoilerEffect> spoilersPool = new Stack<>();
30c27
<     private final Path path = new Path();
---
>     private Path path = new Path();
63c60
<         isSpoilersRevealed = ConfigManager.getBooleanOrFalse(Defines.displaySpoilerMsgDirectly);
---
>         isSpoilersRevealed = false;
106,107c103
<                 canvas.saveLayer(0, 0, getMeasuredWidth(), getMeasuredHeight(), null,
<                     Canvas.ALL_SAVE_FLAG);
---
>                 canvas.saveLayer(0, 0, getMeasuredWidth(), getMeasuredHeight(), null, canvas.ALL_SAVE_FLAG);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/StaticLayoutEx.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/StaticLayoutEx.java
18a19
> import android.text.style.CharacterStyle;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/StatusDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/StatusDrawable.java
10a11
> import android.graphics.Paint;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/StickerCategoriesListView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/StickerCategoriesListView.java
35a36
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/StickerMasksAlert.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/StickerMasksAlert.java
35a36
> import androidx.core.math.MathUtils;
41a43
> import org.telegram.messenger.DocumentObject;
43a46
> import org.telegram.messenger.ImageLocation;
47a51
> import org.telegram.messenger.MessageObject;
50a55
> import org.telegram.messenger.SvgHelper;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/TableLayout.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/TableLayout.java
3,15d2
< import static android.view.Gravity.AXIS_PULL_AFTER;
< import static android.view.Gravity.AXIS_PULL_BEFORE;
< import static android.view.Gravity.AXIS_SPECIFIED;
< import static android.view.Gravity.AXIS_X_SHIFT;
< import static android.view.Gravity.AXIS_Y_SHIFT;
< import static android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
< import static android.view.Gravity.RELATIVE_LAYOUT_DIRECTION;
< import static android.view.Gravity.VERTICAL_GRAVITY_MASK;
< import static android.view.View.MeasureSpec.EXACTLY;
< import static android.view.View.MeasureSpec.makeMeasureSpec;
< import static java.lang.Math.max;
< import static java.lang.Math.min;
< 
36a24,36
> 
> import static android.view.Gravity.AXIS_PULL_AFTER;
> import static android.view.Gravity.AXIS_PULL_BEFORE;
> import static android.view.Gravity.AXIS_SPECIFIED;
> import static android.view.Gravity.AXIS_X_SHIFT;
> import static android.view.Gravity.AXIS_Y_SHIFT;
> import static android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
> import static android.view.Gravity.RELATIVE_LAYOUT_DIRECTION;
> import static android.view.Gravity.VERTICAL_GRAVITY_MASK;
> import static android.view.View.MeasureSpec.EXACTLY;
> import static android.view.View.MeasureSpec.makeMeasureSpec;
> import static java.lang.Math.max;
> import static java.lang.Math.min;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/ThemeEditorView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/ThemeEditorView.java
34a35,38
> import androidx.annotation.Keep;
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
> 
57,60d60
< import androidx.annotation.Keep;
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
67a68
> import org.telegram.ui.ActionBar.ActionBarLayout;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/TranscribeButton.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/TranscribeButton.java
16a17
> import android.util.Log;
25a27
> import org.telegram.messenger.AccountInstance;
39a42
> import org.telegram.ui.PremiumPreviewFragment;
Only in TMessagesProj/src/main/java/org/telegram/ui/Components: TranslateAlert.java
Only in ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components: TranslateButton.java
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/UndoView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/UndoView.java
62,64d61
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
465,470d461
< 
<         if (ConfigManager.getBooleanOrFalse(Defines.disableUndo) && !isTooltipAction()) {
<             if (actionRunnable != null) actionRunnable.run();
<             return;
<         }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/UpdateAppAlertDialog.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/UpdateAppAlertDialog.java
255c255
<         textView.setText(LocaleController.getString("AppUpdateNullgram", R.string.AppUpdateNullgram));
---
>         textView.setText(LocaleController.getString("AppUpdate", R.string.AppUpdate));
265c265
<         linearLayout.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 23, 5, 23, 5));
---
>         linearLayout.addView(messageTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 23, 0, 23, 5));
280,285d279
<         changelogTextView.setOnLongClickListener(v -> {
<             if (TextUtils.isEmpty(appUpdate.text)) {
<                 return false;
<             }
<             return true;
<         });
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/URLSpanMono.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/URLSpanMono.java
14d13
< import android.text.TextUtils;
41,44d39
<     public String getTextToCopy() {
<         return currentMessage.subSequence(currentStart, currentEnd).toString();
<     }
< 
47,53d41
<     }
< 
<     public String getLanguage() {
<         if (style == null || style.urlEntity == null || TextUtils.isEmpty(style.urlEntity.language)) {
<             return null;
<         }
<         return style.urlEntity.language;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/VectorAvatarThumbDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/VectorAvatarThumbDrawable.java
10a11,12
> import com.google.android.exoplayer2.util.Log;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/VideoPlayer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoPlayer.java
26a27
> import com.google.android.exoplayer2.ExoPlaybackException;
32a34,35
> import com.google.android.exoplayer2.Renderer;
> import com.google.android.exoplayer2.SimpleExoPlayer;
36a40
> import com.google.android.exoplayer2.audio.AudioRendererEventListener;
40a45
> import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
50a56
> import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
61a68
> import java.util.ArrayList;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/voip/CallSwipeView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/CallSwipeView.java
25,26d24
< import androidx.annotation.Keep;
< 
31a30,31
> 
> import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/voip/FabBackgroundDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/FabBackgroundDrawable.java
11,15c11
< import android.graphics.Bitmap;
< import android.graphics.Canvas;
< import android.graphics.ColorFilter;
< import android.graphics.Paint;
< import android.graphics.PixelFormat;
---
> import android.graphics.*;
19,20d14
< import androidx.annotation.Keep;
< 
21a16,17
> 
> import androidx.annotation.Keep;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/voip/GroupCallRenderersContainer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/GroupCallRenderersContainer.java
39a40
> import org.telegram.messenger.NotificationCenter;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/voip/PrivateVideoPreviewDialog.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/PrivateVideoPreviewDialog.java
30,33d29
< import androidx.core.graphics.ColorUtils;
< import androidx.viewpager.widget.PagerAdapter;
< import androidx.viewpager.widget.ViewPager;
< 
52a49,52
> 
> import androidx.core.graphics.ColorUtils;
> import androidx.viewpager.widget.PagerAdapter;
> import androidx.viewpager.widget.ViewPager;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPStatusTextView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPStatusTextView.java
4a5
> import android.animation.AnimatorSet;
9a11
> import android.text.TextPaint;
10a13
> import android.text.style.CharacterStyle;
24a28,29
> 
> import java.util.ArrayList;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/WallpaperUpdater.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/WallpaperUpdater.java
10a11
> import android.Manifest;
12a14
> import android.content.pm.PackageManager;
31a34
> import org.telegram.ui.BasePermissionsActivity;
38,39d40
< import top.qwq2333.nullgram.utils.PermissionUtils;
< 
113,114c114,115
<                 if (!PermissionUtils.isImagesPermissionGranted()) {
<                     PermissionUtils.requestImagesPermission(parentFragment.getParentActivity());
---
>                 if (parentFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
>                     parentFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, BasePermissionsActivity.REQUEST_CODE_EXTERNAL_STORAGE);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Components/WaveDrawable.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Components/WaveDrawable.java
15a16
> import org.telegram.messenger.SharedConfig;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ContentPreviewViewer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ContentPreviewViewer.java
74,76d73
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
538c535
<                         delegate.sendGif(currentDocument != null ? currentDocument : inlineResult, parentObject, !ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                         delegate.sendGif(currentDocument != null ? currentDocument : inlineResult, parentObject, true, 0);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/Delegates/MemberRequestsDelegate.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/Delegates/MemberRequestsDelegate.java
392,400d391
<     @Override
<     public void onBanClicked(TLRPC.TL_chatInviteImporter importer) {
<         TLRPC.User user = users.get(importer.user_id);
<         if (user != null) {
<             fragment.getMessagesController().deleteParticipantFromChat(chatId, user);
<         }
<         hideChatJoinRequest(importer, false);
<     }
< 
560c551
<                     MemberRequestCell cell = new MemberRequestCell(parent.getContext(), MemberRequestsDelegate.this, isChannel, MessagesController.getInstance(currentAccount).getChat(chatId));
---
>                     MemberRequestCell cell = new MemberRequestCell(parent.getContext(), MemberRequestsDelegate.this, isChannel);
784,797d774
< 
<             ActionBarMenuSubItem banCell = new ActionBarMenuSubItem(context, false, true);
<             banCell.setColors(Theme.getColor(Theme.key_text_RedRegular, resourcesProvider), Theme.getColor(Theme.key_text_RedRegular, resourcesProvider));
<             banCell.setSelectorColor(Theme.getColor(Theme.key_dialogButtonSelector, resourcesProvider));
<             banCell.setTextAndIcon(LocaleController.getString("Ban", R.string.Ban), R.drawable.msg_disable);
<             banCell.setOnClickListener((v) -> {
<                 if (importer != null) {
<                     onBanClicked(importer);
<                 }
<                 hidePreview();
<             });
<             if (ChatObject.canBlockUsers(MessagesController.getInstance(currentAccount).getChat(chatId))) {
<                 popupLayout.addView(banCell);
<             }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
53a54
> import android.view.KeyEvent;
70a72
> import android.widget.LinearLayout;
123a126
> import org.telegram.ui.ActionBar.BottomSheet;
205d207
< import java.util.Random;
208,220d209
< import kotlin.Unit;
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.config.ForwardContext;
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< import top.qwq2333.nullgram.helpers.QrHelper;
< import top.qwq2333.nullgram.ui.AppLinkVerifyBottomSheet;
< import top.qwq2333.nullgram.ui.BottomBuilder;
< import top.qwq2333.nullgram.ui.SendOptionsMenuLayout;
< import top.qwq2333.nullgram.utils.APKUtils;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.PrivacyUtils;
< import top.qwq2333.nullgram.utils.UpdateUtil;
< 
304d292
<     private ActionBarMenuItem qrItem;
454d441
<     public ForwardContext forwardContext = () -> null;
887c874
<                     } else if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward)) {
---
>                     } else if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) {
1021c1006
<                     if (!onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) {
---
>                     if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) {
1677c1662
<             if (!onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) {
---
>             if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) {
1698c1683
<             if (!onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) {
---
>             if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) {
1866,1876d1850
< 
<                                 if (ConfigManager.getBooleanOrFalse(Defines.openArchiveOnPull)) {
<                                     AndroidUtilities.runOnUIThread(() -> {
<                                         Bundle args = new Bundle();
<                                         args.putInt("folderId", 1);
<                                         args.putBoolean("onlySelect", onlySelect);
<                                         DialogsActivity dialogsActivity = new DialogsActivity(args);
<                                         dialogsActivity.setDelegate(delegate);
<                                         presentFragment(dialogsActivity, onlySelect);
<                                     }, 200);
<                                 }
2601,2606c2575,2582
<                     qrItem = new ActionBarMenuItem(context, menu, Theme.getColor(Theme.key_actionBarDefaultSelector), Theme.getColor(Theme.key_actionBarDefaultIcon));
<                     qrItem.setIcon(R.drawable.ic_line_scan);
<                     qrItem.setTranslationX(AndroidUtilities.dp(32));
<                     qrItem.setOnClickListener(v -> QrHelper.openCameraScanActivity(DialogsActivity.this));
<                     qrItem.setFixBackground(true);
<                     qrItem.setContentDescription(LocaleController.getString("AuthAnotherClientScan", R.string.AuthAnotherClientScan));
---
>                     speedItem = new ActionBarMenuItem(context, menu, Theme.getColor(Theme.key_actionBarActionModeDefaultSelector), Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
>                     speedItem.setIcon(R.drawable.avd_speed);
>                     speedItem.getIconView().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon), PorterDuff.Mode.SRC_IN));
>                     speedItem.setTranslationX(AndroidUtilities.dp(32));
>                     speedItem.setAlpha(0f);
>                     speedItem.setOnClickListener(v -> showDialog(new PremiumFeatureBottomSheet(DialogsActivity.this, PremiumPreviewFragment.PREMIUM_FEATURE_DOWNLOAD_SPEED, true)));
>                     speedItem.setClickable(false);
>                     speedItem.setFixBackground(true);
2610,2611c2586,2589
<                     searchContainer.addView(qrItem, speedParams);
<                     searchItem.setSearchAdditionalButton(qrItem);
---
>                     searchContainer.addView(speedItem, speedParams);
>                     searchItem.setSearchAdditionalButton(speedItem);
> 
>                     updateSpeedItem(searchViewPager.getCurrentPosition() == 2);
2774c2752
<         if (!onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) {
---
>         if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) {
2787c2765
<             (initialDialogsType == DIALOGS_TYPE_DEFAULT && !onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) &&
---
>             (initialDialogsType == DIALOGS_TYPE_DEFAULT && !onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) &&
3067c3045
<         if (allowSwitchAccount && UserConfig.getVisibleAccountsCount() > 1) {
---
>         if (allowSwitchAccount && UserConfig.getActivatedAccountsCount() > 1) {
3083d3060
<                 if (PasscodeHelper.isAccountHidden(a)) continue;
3105c3082
<         int pagesCount = folderId == 0 && (initialDialogsType == DIALOGS_TYPE_DEFAULT && !onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) ? 2 : 1;
---
>         int pagesCount = folderId == 0 && (initialDialogsType == DIALOGS_TYPE_DEFAULT && !onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) ? 2 : 1;
4208c4185
<         if (!onlySelect || (initialDialogsType == DIALOGS_TYPE_FORWARD && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward))) {
---
>         if (!onlySelect || initialDialogsType == DIALOGS_TYPE_FORWARD) {
4276c4253
<                 APKUtils.installUpdate(getParentActivity(), SharedConfig.pendingAppUpdate.document);
---
>                 AndroidUtilities.openForView(SharedConfig.pendingAppUpdate.document, true, getParentActivity());
4371,4373d4347
<         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
<             AppLinkVerifyBottomSheet.checkBottomSheet(this);
<         }
4532,4536d4505
< 
<         PrivacyUtils.postCheckAll(getParentActivity(), currentAccount);
<         if (new Random().nextInt(100) < 50)
<             UpdateUtil.postCheckFollowChannel(getParentActivity(), currentAccount);
< 
4547a4517,4524
>         if (!MessagesController.getInstance(currentAccount).premiumLocked && folderId == 0) {
>             if (MessagesController.getInstance(currentAccount).pendingSuggestions.contains("PREMIUM_UPGRADE") && getUserConfig().isPremium() || MessagesController.getInstance(currentAccount).pendingSuggestions.contains("PREMIUM_ANNUAL") && !getUserConfig().isPremium()) {
>                 if (UserConfig.getInstance(currentAccount).isPremium() ? !BuildVars.useInvoiceBilling() && MediaDataController.getInstance(currentAccount).getPremiumHintAnnualDiscount(true) != null : MediaDataController.getInstance(currentAccount).getPremiumHintAnnualDiscount(false) != null) {
>                     isPremiumHintUpgrade = MessagesController.getInstance(currentAccount).pendingSuggestions.contains("PREMIUM_UPGRADE");
>                     return true;
>                 }
>             }
>         }
4678c4655,4691
<         if (isCacheHintVisible()) {
---
>         if (isPremiumRestoreHintVisible()) {
>             dialogsHintCell.setVisibility(View.VISIBLE);
>             dialogsHintCell.setOnClickListener(v -> {
>                 presentFragment(new PremiumPreviewFragment("dialogs_hint").setSelectAnnualByDefault());
>                 AndroidUtilities.runOnUIThread(() -> {
>                     MessagesController.getInstance(currentAccount).removeSuggestion(0, "PREMIUM_RESTORE");
>                     updateDialogsHint();
>                 }, 250);
>             });
>             dialogsHintCell.setText(
>                     AndroidUtilities.replaceSingleTag(
>                             LocaleController.formatString(R.string.RestorePremiumHintTitle, MediaDataController.getInstance(currentAccount).getPremiumHintAnnualDiscount(false)),
>                             Theme.key_windowBackgroundWhiteValueText,
>                             0,
>                             null
>                     ),
>                     LocaleController.getString(R.string.RestorePremiumHintMessage)
>             );
>         } else if (isPremiumHintVisible()) {
>             dialogsHintCell.setVisibility(View.VISIBLE);
>             dialogsHintCell.setOnClickListener(v -> {
>                 presentFragment(new PremiumPreviewFragment("dialogs_hint").setSelectAnnualByDefault());
>                 AndroidUtilities.runOnUIThread(() -> {
>                     MessagesController.getInstance(currentAccount).removeSuggestion(0, isPremiumHintUpgrade ? "PREMIUM_UPGRADE" : "PREMIUM_ANNUAL");
>                     updateDialogsHint();
>                 }, 250);
>             });
>             dialogsHintCell.setText(
>                 AndroidUtilities.replaceSingleTag(
>                     LocaleController.formatString(isPremiumHintUpgrade ? R.string.SaveOnAnnualPremiumTitle : R.string.UpgradePremiumTitle, MediaDataController.getInstance(currentAccount).getPremiumHintAnnualDiscount(false)),
>                     Theme.key_windowBackgroundWhiteValueText,
>                     0,
>                     null
>                 ),
>                 LocaleController.getString(isPremiumHintUpgrade ? R.string.UpgradePremiumMessage : R.string.SaveOnAnnualPremiumMessage)
>             );
>         } else if (isCacheHintVisible()) {
5231c5244
<                                     FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.emoticon, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
---
>                                     FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
5273c5286
<                             FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.emoticon, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, false, false, DialogsActivity.this, null);
---
>                             FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, false, false, DialogsActivity.this, null);
5400,5402c5413
<                         if (!ConfigManager.getBooleanOrFalse(Defines.hideAllTab)) {
<                             filterTabsView.addTab(a, 0, LocaleController.getString("FilterAllChats", R.string.FilterAllChats), "\uD83D\uDCAC", true, filters.get(a).locked);
<                         }
---
>                         filterTabsView.addTab(a, 0, LocaleController.getString("FilterAllChats", R.string.FilterAllChats), true,  filters.get(a).locked);
5404c5415
<                         filterTabsView.addTab(a, filters.get(a).localId, filters.get(a).name, filters.get(a).emoticon == null ? "\uD83D\uDCC1" : filters.get(a).emoticon, false, filters.get(a).locked);
---
>                         filterTabsView.addTab(a, filters.get(a).localId, filters.get(a).name, false,  filters.get(a).locked);
5407,5412c5418
<                 if (ConfigManager.getBooleanOrFalse(Defines.hideAllTab) && stableId <= 0) {
<                     id = filterTabsView.getFirstTabId();
<                     updateCurrentTab = true;
<                     viewPages[0].selectedType = id;
<                     filterTabsView.selectTabWithStableId(filterTabsView.getStableId(0));
<                 } else if (stableId >= 0) {
---
>                 if (stableId >= 0) {
5587d5592
<                 boolean hasNotNotificationPermission = Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && activity.checkSelfPermission(Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED;
5590c5595
<                     if (hasNotContactsPermission || hasNotStoragePermission || hasNotNotificationPermission) {
---
>                     if (hasNotContactsPermission || hasNotStoragePermission) {
5888,5897d5892
<             if (qrItem != null) {
<                 if (whiteActionBar) {
<                     qrItem.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_actionBarActionModeDefaultSelector), 1));
<                     qrItem.setIconColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
<                 } else {
<                     qrItem.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_actionBarDefaultSelector), 1));
<                     qrItem.setIconColor(Theme.getColor(Theme.key_actionBarDefaultIcon));
<                 }
<             }
< 
6740c6735
<         BottomBuilder builder = new BottomBuilder(getParentActivity());
---
>         BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
6744c6739
<             hasUnread ? R.drawable.menu_read : 0,
---
>                 hasUnread ? R.drawable.msg_markread : 0,
6747c6742
<         String[] items = new String[]{
---
>         CharSequence[] items = new CharSequence[]{
6751c6746
<         builder.addItems(items, icons, (which, t, c) -> {
---
>         builder.setItems(items, icons, (d, which) -> {
6767d6761
<             return Unit.INSTANCE;
7046c7039
<                         FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.emoticon, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
---
>                         FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
7267c7260
<                 FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.emoticon, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
---
>                 FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
7667c7660
<                 FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.emoticon, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
---
>                 FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, false, false, true, true, false, DialogsActivity.this, null);
8553,8556d8545
<         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && activity.checkSelfPermission(Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {
<             permissons.add(Manifest.permission.POST_NOTIFICATIONS);
<         }
< 
8890,8894d8878
<             if (MessagesController.getInstance(currentAccount).pendingSuggestions.contains("PREMIUM_UPGRADE")) {
<                 MessagesController.getInstance(currentAccount).removeSuggestion(0, "PREMIUM_UPGRADE");
<             } else if (MessagesController.getInstance(currentAccount).pendingSuggestions.contains("PREMIUM_ANNUAL")) {
<                 MessagesController.getInstance(currentAccount).removeSuggestion(0, "PREMIUM_ANNUAL");
<             } else {
8897d8880
<             }
9874a9858,9864
>         LinearLayout layout = new LinearLayout(parentActivity);
>         layout.setOrientation(LinearLayout.VERTICAL);
> 
>         ActionBarPopupWindow.ActionBarPopupWindowLayout sendPopupLayout2 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity, resourcesProvider);
>         sendPopupLayout2.setAnimationEnabled(false);
>         sendPopupLayout2.setOnTouchListener(new View.OnTouchListener() {
>             private android.graphics.Rect popupRect = new android.graphics.Rect();
9876,9877c9866,9875
<         var forwardContext = delegate instanceof ForwardContext ? (ForwardContext) delegate : this.forwardContext;
<         if (forwardContext == null) {
---
>             @Override
>             public boolean onTouch(View v, MotionEvent event) {
>                 if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
>                     if (sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                         v.getHitRect(popupRect);
>                         if (!popupRect.contains((int) event.getX(), (int) event.getY())) {
>                             sendPopupWindow.dismiss();
>                         }
>                     }
>                 }
9880,9884c9878,9881
<         boolean hasEncrypted = false;
<         for (Long did : selectedDialogs) {
<             if (DialogObject.isEncryptedDialog(did)) {
<                 hasEncrypted = true;
<                 break;
---
>         });
>         sendPopupLayout2.setDispatchKeyEventListener(keyEvent -> {
>             if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                 sendPopupWindow.dismiss();
9885a9883,9893
>         });
>         sendPopupLayout2.setShownFromBottom(false);
>         sendPopupLayout2.setupRadialSelectors(getThemedColor(Theme.key_dialogButtonSelector));
> 
>         ActionBarMenuSubItem sendWithoutSound = new ActionBarMenuSubItem(parentActivity, true, true, resourcesProvider);
>         sendWithoutSound.setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
>         sendWithoutSound.setMinimumWidth(AndroidUtilities.dp(196));
>         sendPopupLayout2.addView(sendWithoutSound, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
>         sendWithoutSound.setOnClickListener(v -> {
>             if (sendPopupWindow != null && sendPopupWindow.isShowing()) {
>                 sendPopupWindow.dismiss();
9887c9895
<         SendOptionsMenuLayout layout = new SendOptionsMenuLayout(parentActivity, forwardContext, (forwardContext.forceShowScheduleAndSound() || selectedDialogs.size() > 1) && !hasEncrypted, forwardContext.forceShowScheduleAndSound() || selectedDialogs.size() > 1, false, () -> {
---
>             this.notify = false;
9896c9904
<         }, resourcesProvider);
---
>         });
9897a9906
>         layout.addView(sendPopupLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
9909d9917
<         layout.setSendPopupWindow(sendPopupWindow);
10669,10673d10676
<     public boolean isSwipeBackEnabled(MotionEvent event) {
<         return !((initialDialogsType == 3 && ConfigManager.getBooleanOrFalse(Defines.showTabsOnForward)) && viewPages[0].selectedType != filterTabsView.getFirstTabId());
<     }
< 
<     @Override
Only in TMessagesProj/src/main/java/org/telegram/ui: DocumentSelectActivity.java
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ExternalActionActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ExternalActionActivity.java
51,53d50
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
83d79
<                 if(!ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat))
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
17,20d16
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
< import org.telegram.messenger.LocaleController;
21a18
> import org.telegram.messenger.LocaleController;
35a33,35
> 
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/FilterCreateActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/FilterCreateActivity.java
95,97d94
< import top.qwq2333.nullgram.helpers.FolderIconHelper;
< import top.qwq2333.nullgram.ui.IconSelector;
< 
117d113
<     private String newFilterEmoticon;
186d181
<         newFilterEmoticon = filter.emoticon;
761,763c756,788
<         var result = FolderIconHelper.getEmoticonFromFlags(flags);
<         String newName = result.first;
<         String newEmoticon = result.second;
---
>         String newName = "";
>         if ((flags & MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS) == MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS) {
>             if ((newFilterFlags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
>                 newName = LocaleController.getString("FilterNameUnread", R.string.FilterNameUnread);
>             } else if ((newFilterFlags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
>                 newName = LocaleController.getString("FilterNameNonMuted", R.string.FilterNameNonMuted);
>             }
>         } else if ((flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
>             flags &=~ MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
>             if (flags == 0) {
>                 newName = LocaleController.getString("FilterContacts", R.string.FilterContacts);
>             }
>         } else if ((flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
>             flags &=~ MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
>             if (flags == 0) {
>                 newName = LocaleController.getString("FilterNonContacts", R.string.FilterNonContacts);
>             }
>         } else if ((flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
>             flags &=~ MessagesController.DIALOG_FILTER_FLAG_GROUPS;
>             if (flags == 0) {
>                 newName = LocaleController.getString("FilterGroups", R.string.FilterGroups);
>             }
>         } else if ((flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
>             flags &=~ MessagesController.DIALOG_FILTER_FLAG_BOTS;
>             if (flags == 0) {
>                 newName = LocaleController.getString("FilterBots", R.string.FilterBots);
>             }
>         } else if ((flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
>             flags &=~ MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
>             if (flags == 0) {
>                 newName = LocaleController.getString("FilterChannels", R.string.FilterChannels);
>             }
>         }
768d792
<         newFilterEmoticon = newEmoticon;
856c880
<         saveFilterToServer(filter, newFilterFlags, newFilterEmoticon, newFilterName, newAlwaysShow, newNeverShow, newPinned, creatingNew, false, hasUserChanged, true, true, this, () -> {
---
>         saveFilterToServer(filter, newFilterFlags, newFilterName, newAlwaysShow, newNeverShow, newPinned, creatingNew, false, hasUserChanged, true, progress, this, () -> {
871c895
<     private static void processAddFilter(MessagesController.DialogFilter filter, int newFilterFlags, String newFilterEmoticon, String newFilterName, ArrayList<Long> newAlwaysShow, ArrayList<Long> newNeverShow, boolean creatingNew, boolean atBegin, boolean hasUserChanged, boolean resetUnreadCounter, BaseFragment fragment, Runnable onFinish) {
---
>     private static void processAddFilter(MessagesController.DialogFilter filter, int newFilterFlags, String newFilterName, ArrayList<Long> newAlwaysShow, ArrayList<Long> newNeverShow, boolean creatingNew, boolean atBegin, boolean hasUserChanged, boolean resetUnreadCounter, BaseFragment fragment, Runnable onFinish) {
880d903
<         filter.emoticon = newFilterEmoticon;
902c925
<     public static void saveFilterToServer(MessagesController.DialogFilter filter, int newFilterFlags, String newFilterEmoticon, String newFilterName, ArrayList<Long> newAlwaysShow, ArrayList<Long> newNeverShow, LongSparseIntArray newPinned, boolean creatingNew, boolean atBegin, boolean hasUserChanged, boolean resetUnreadCounter, boolean progress, BaseFragment fragment, Runnable onFinish) {
---
>     public static void saveFilterToServer(MessagesController.DialogFilter filter, int newFilterFlags, String newFilterName, ArrayList<Long> newAlwaysShow, ArrayList<Long> newNeverShow, LongSparseIntArray newPinned, boolean creatingNew, boolean atBegin, boolean hasUserChanged, boolean resetUnreadCounter, boolean progress, BaseFragment fragment, Runnable onFinish) {
928,931d950
<         if (newFilterEmoticon != null) {
<             req.filter.emoticon = newFilterEmoticon;
<             req.filter.flags |= 33554432;
<         }
1007c1026
<                 processAddFilter(filter, newFilterFlags, newFilterEmoticon, newFilterName, newAlwaysShow, newNeverShow, creatingNew, atBegin, hasUserChanged, resetUnreadCounter, fragment, onFinish);
---
>                 processAddFilter(filter, newFilterFlags, newFilterName, newAlwaysShow, newNeverShow, creatingNew, atBegin, hasUserChanged, resetUnreadCounter, fragment, onFinish);
1013c1032
<             processAddFilter(filter, newFilterFlags, newFilterEmoticon, newFilterName, newAlwaysShow, newNeverShow, creatingNew, atBegin, hasUserChanged, resetUnreadCounter, fragment, null);
---
>             processAddFilter(filter, newFilterFlags, newFilterName, newAlwaysShow, newNeverShow, creatingNew, atBegin, hasUserChanged, resetUnreadCounter, fragment, null);
1045,1047d1063
<         if (!TextUtils.equals(filter.emoticon, newFilterEmoticon)) {
<             return true;
<         }
1265,1270c1281
<                     PollEditTextCell cell = new PollEditTextCell(mContext, false, null, view1 -> IconSelector.show(FilterCreateActivity.this, (emoticon) -> {
<                         newFilterEmoticon = emoticon;
<                         adapter.notifyItemChanged(nameRow);
<                         checkDoneButton(true);
<                     }));
<                     cell.setIcon(FolderIconHelper.getTabIcon(newFilterEmoticon), newFilterEmoticon);
---
>                     PollEditTextCell cell = new PollEditTextCell(mContext, null);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/FilteredSearchView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/FilteredSearchView.java
32a33
> import org.telegram.messenger.ContactsController;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/FiltersSetupActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/FiltersSetupActivity.java
65,66d64
< import top.qwq2333.nullgram.helpers.FolderIconHelper;
< 
905,907c903
<                         filter.emoticon = TextUtils.isEmpty(suggested.filter.emoticon) ? FolderIconHelper.getEmoticonFromFlags(filter.flags).second : suggested.filter.emoticon;
<                         ignoreUpdates = true;
<                         FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.emoticon, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, true, true, true, true, false, FiltersSetupActivity.this, () -> {
---
>                         FilterCreateActivity.saveFilterToServer(filter, filter.flags, filter.name, filter.alwaysShow, filter.neverShow, filter.pinnedDialogs, true, true, true, true, true, FiltersSetupActivity.this, () -> {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/GroupCallTabletGridAdapter.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/GroupCallTabletGridAdapter.java
2a3
> import android.graphics.Color;
14a16
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
36d35
< import org.telegram.messenger.ApplicationLoader;
41c40
< import org.telegram.messenger.MessagesController;
---
> import org.telegram.messenger.ApplicationLoader;
43d41
< import org.telegram.messenger.R;
45a44,45
> import org.telegram.messenger.MessagesController;
> import org.telegram.messenger.R;
48d47
< import org.telegram.ui.ActionBar.Theme;
51a51
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/KeyboardHideHelper.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/KeyboardHideHelper.java
8a9
> import android.util.Log;
19a21,22
> import androidx.recyclerview.widget.GridLayoutManagerFixed;
> import androidx.recyclerview.widget.RecyclerView;
20a24
> import org.telegram.messenger.AndroidUtilities;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
53a54
> import org.telegram.ui.Components.TranslateAlert2;
58a60
> import java.util.Iterator;
61,62d62
< import top.qwq2333.nullgram.activity.GeneralSettingActivity;
< 
234c234
<                     presentFragment(new GeneralSettingActivity());
---
>                     presentFragment(new RestrictedLanguagesSelectActivity());
242c242
<                     position -= 4;
---
>                     position -= (7 - (!(getChatValue() || getContextValue()) ? 1 : 0) - (getMessagesController().premiumLocked ? 1 : 0));
307c307
<                     position -= 4;
---
>                     position -= (7 - (!(getChatValue() || getContextValue()) ? 1 : 0) - (getMessagesController().premiumLocked ? 1 : 0));
320c320
<                 if (localeInfo == null || localeInfo.pathToFile == null || localeInfo.builtIn || localeInfo.isRemote() && localeInfo.serverIndex != Integer.MAX_VALUE) {
---
>                 if (localeInfo == null || localeInfo.pathToFile == null || localeInfo.isRemote() && localeInfo.serverIndex != Integer.MAX_VALUE) {
544c544
<                 return 3 + (getChatValue() || getContextValue() ? 1 : 0) + 1 + count;
---
>                 return 4 + (getMessagesController().premiumLocked ? 0 : 1) + (getChatValue() || getContextValue() ? 1 : 0) + 1 + count;
597c597
<                         position -= 4;
---
>                         position -= (7 - (!(getChatValue() || getContextValue()) ? 1 : 0) - (getMessagesController().premiumLocked ? 1 : 0));
644,645c644
<                     settingsCell.setText(LocaleController.getString("NullSettings", R.string.NullSettings), false);
<                     /*HashSet<String> langCodes = RestrictedLanguagesSelectActivity.getRestrictedLanguages();
---
>                     HashSet<String> langCodes = RestrictedLanguagesSelectActivity.getRestrictedLanguages();
678c677
<                     settingsCell.setTextAndValue(doNotTranslateCellName, doNotTranslateCellValue, true, false);*/
---
>                     settingsCell.setTextAndValue(doNotTranslateCellName, doNotTranslateCellValue, true, false);
723,725c722
<                 if (i-- == 0) return VIEW_TYPE_SETTINGS;
<                 if (i-- == 0) return VIEW_TYPE_SHADOW;
<                 /*if (i-- == 0) return VIEW_TYPE_SWITCH;
---
>                 if (i-- == 0) return VIEW_TYPE_SWITCH;
733c730
<                 if (i-- == 0) return VIEW_TYPE_INFO;*/
---
>                 if (i-- == 0) return VIEW_TYPE_INFO;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
10a11,12
> import static org.telegram.ui.Components.Premium.LimitReachedBottomSheet.TYPE_ACCOUNTS;
> 
41a44
> import android.os.StrictMode;
94d96
< import org.telegram.messenger.BuildConfig;
203,211d204
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.MonetHelper;
< import top.qwq2333.nullgram.helpers.SettingsHelper;
< import top.qwq2333.nullgram.helpers.UpdateHelper;
< import top.qwq2333.nullgram.utils.APKUtils;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.Utils;
< 
322,334c315,318
<         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
<             getSplashScreen().setOnExitAnimationListener(splashScreenView -> {
<                 ObjectAnimator animator = ObjectAnimator.ofFloat(splashScreenView, View.ALPHA, 1f, 0f);
<                 animator.setInterpolator(CubicBezierInterpolator.DEFAULT);
<                 animator.setDuration(150L);
<                 animator.addListener(new AnimatorListenerAdapter() {
<                     @Override
<                     public void onAnimationEnd(Animator animation) {
<                         splashScreenView.remove();
<                     }
<                 });
<                 animator.start();
<             });
---
>         if (BuildVars.DEBUG_VERSION) {
>             StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder(StrictMode.getVmPolicy())
>                     .detectLeakedClosableObjects()
>                     .build());
374d357
<                 if (!ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat))
531a515,517
>                 if (!UserConfig.hasPremiumOnAccounts()) {
>                     freeAccounts -= (UserConfig.MAX_ACCOUNT_COUNT - UserConfig.MAX_ACCOUNT_DEFAULT_COUNT);
>                 }
534a521,527
>                 } else if (!UserConfig.hasPremiumOnAccounts()) {
>                     if (actionBarLayout.getFragmentStack().size() > 0) {
>                         BaseFragment fragment = actionBarLayout.getFragmentStack().get(0);
>                         LimitReachedBottomSheet limitReachedBottomSheet = new LimitReachedBottomSheet(fragment, this, TYPE_ACCOUNTS, currentAccount);
>                         fragment.showDialog(limitReachedBottomSheet);
>                         limitReachedBottomSheet.onShowPremiumScreenRunnable = () -> drawerLayoutContainer.closeDrawer(false);
>                     }
896,899d888
<             MonetHelper.registerReceiver(this);
<         }
< 
<         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
912a902,903
> 
>         RestrictedLanguagesSelectActivity.checkRestrictedLanguages(false);
1342a1334
>             RestrictedLanguagesSelectActivity.checkRestrictedLanguages(true);
2116,2126d2107
<                                             } else if (path.startsWith("nullsetting/")) {
<                                                 SettingsHelper.processDeepLink(data, fragment -> {
<                                                     AndroidUtilities.runOnUIThread(() -> presentFragment(fragment, false, false));
<                                                     if (AndroidUtilities.isTablet()) {
<                                                         actionBarLayout.showLastFragment();
<                                                         rightActionBarLayout.showLastFragment();
<                                                         drawerLayoutContainer.setAllowOpenDrawer(false, false);
<                                                     } else {
<                                                         drawerLayoutContainer.setAllowOpenDrawer(true, false);
<                                                     }
<                                                 }, () -> showBulletin(factory -> factory.createErrorBulletin(LocaleController.getString("UnknownSettings", R.string.UnknownSettings))));
2531,2532d2511
<                                     } else if (url.startsWith("tg:upgrade") || url.startsWith("tg://upgrade") || url.startsWith("tg:update") || url.startsWith("tg://update")) {
<                                         checkAppUpdate(true);
2544,2567d2522
<                                     } else if (url.startsWith("tg:null") || url.startsWith("tg://null")) {
<                                         url = url.replace("tg:null", "tg://t.me/nullsetting").replace("tg://null", "tg://t.me/nullsetting");
<                                         data = Uri.parse(url);
<                                         SettingsHelper.processDeepLink(data, fragment -> {
<                                             AndroidUtilities.runOnUIThread(() -> presentFragment(fragment, false, false));
<                                             if (AndroidUtilities.isTablet()) {
<                                                 actionBarLayout.showLastFragment();
<                                                 rightActionBarLayout.showLastFragment();
<                                                 drawerLayoutContainer.setAllowOpenDrawer(false, false);
<                                             } else {
<                                                 drawerLayoutContainer.setAllowOpenDrawer(true, false);
<                                             }
<                                         }, () -> showBulletin(factory -> factory.createErrorBulletin(LocaleController.getString("UnknownSettings", R.string.UnknownSettings))));
<                                     } else if (url.startsWith("tg:user") || url.startsWith("tg://user")) {
<                                         try {
<                                             url = url.replace("tg:user", "tg://telegram.org").replace("tg://user", "tg://telegram.org");
<                                             data = Uri.parse(url);
<                                             int userId = Utilities.parseInt(data.getQueryParameter("id"));
<                                             if (userId != 0) {
<                                                 push_user_id = userId;
<                                             }
<                                         } catch (Exception e) {
<                                             Log.e(e);
<                                         }
4871c4826
<                 APKUtils.installUpdate(this, SharedConfig.pendingAppUpdate.document);
---
>                 AndroidUtilities.openForView(SharedConfig.pendingAppUpdate.document, true, this);
4989d4943
<     @SuppressLint("NotifyDataSetChanged")
4991,4992c4945
<         if (ConfigManager.getIntOrDefault(Defines.updateChannel, Defines.stableChannel)
<             == Defines.disableAutoUpdate) {
---
>         if (!force && BuildVars.DEBUG_VERSION || !force && !BuildVars.CHECK_UPDATES) {
4995,4996c4948
<         if (!force && System.currentTimeMillis()
<             < ConfigManager.getLongOrDefault(Defines.lastCheckUpdateTime, 0L) + 1000L * 60 * 60) {
---
>         if (!force && Math.abs(System.currentTimeMillis() - SharedConfig.lastUpdateCheckTime) < MessagesController.getInstance(0).updateCheckDelay * 1000) {
4999,5000c4951,4959
<         ConfigManager.putLong(Defines.lastCheckUpdateTime, System.currentTimeMillis());
<         Log.d("checking update");
---
>         TLRPC.TL_help_getAppUpdate req = new TLRPC.TL_help_getAppUpdate();
>         try {
>             req.source = ApplicationLoader.applicationContext.getPackageManager().getInstallerPackageName(ApplicationLoader.applicationContext.getPackageName());
>         } catch (Exception ignore) {
> 
>         }
>         if (req.source == null) {
>             req.source = "";
>         }
5002,5005c4961,4970
<         UpdateHelper.checkUpdate((res, error) -> AndroidUtilities.runOnUIThread(() -> {
<             if (res != null) {
<                 Log.d("checkUpdate: res is not null");
<                 SharedConfig.setNewAppVersionAvailable(res);
---
>         ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
>             SharedConfig.lastUpdateCheckTime = System.currentTimeMillis();
>             SharedConfig.saveConfig();
>             if (response instanceof TLRPC.TL_help_appUpdate) {
>                 final TLRPC.TL_help_appUpdate res = (TLRPC.TL_help_appUpdate) response;
>                 AndroidUtilities.runOnUIThread(() -> {
>                     if (SharedConfig.pendingAppUpdate != null && SharedConfig.pendingAppUpdate.version.equals(res.version)) {
>                         return;
>                     }
>                     if (SharedConfig.setNewAppVersionAvailable(res)) {
5013,5023c4978
<                         Log.e(e);
<                     }
<                 }
<             } else {
<                 Log.d("checkUpdate: res is null");
<                 if (force) {
<                     if (!error) {
<                         if (!BuildConfig.isPlay) {
<                             showBulletin(factory -> factory.createErrorBulletin(LocaleController.getString("VersionUpdateNoUpdate", R.string.VersionUpdateNoUpdate)));
<                         } else {
<                             showBulletin(factory -> factory.createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString("NoUpdateAvailablePlay", R.string.NoUpdateAvailablePlay), LocaleController.getString("NoUpdateAvailablePlayDelay", R.string.NoUpdateAvailablePlayDelay)));
---
>                                 FileLog.e(e);
5025,5026d4979
<                     } else {
<                         AlertsCreator.createSimpleAlert(this, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error).show();
5027a4981
>                         NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.appUpdateAvailable);
5029,5030c4983
<                 SharedConfig.setNewAppVersionAvailable(null);
<                 drawerLayoutAdapter.notifyDataSetChanged();
---
>                 });
5032,5034c4985
<             NotificationCenter.getGlobalInstance()
<                 .postNotificationName(NotificationCenter.appUpdateAvailable);
<         }));
---
>         });
5166,5167c5117
<             boolean notify = dialogsFragment == null || dialogsFragment.forwardContext == null || dialogsFragment.forwardContext.getForwardParams().notify;
<             int scheduleDate = dialogsFragment == null || dialogsFragment.forwardContext == null ? 0 : dialogsFragment.forwardContext.getForwardParams().scheduleDate;
---
>             boolean notify = dialogsFragment == null || dialogsFragment.notify;
5184,5186d5133
<                 if (scheduleDate != 0) {
<                     args.putInt("chatMode", ChatActivity.MODE_SCHEDULED);
<                 }
5233c5180
<                 alert.setDelegate((user, notify2, scheduleDate2) -> {
---
>                 alert.setDelegate((user, notify2, scheduleDate) -> {
5295c5242
<                             SendMessagesHelper.prepareSendingDocuments(accountInstance, arrayList, arrayList, null, captionToSend, null, did, null, null, null, null, notify, scheduleDate);
---
>                             SendMessagesHelper.prepareSendingDocuments(accountInstance, arrayList, arrayList, null, captionToSend, null, did, replyToMsg, replyToMsg, null, null, notify, 0);
5303c5250
<                         SendMessagesHelper.prepareSendingMedia(accountInstance, photoPathsArray, did, null, null, null, false, false, null, notify, scheduleDate, false);
---
>                         SendMessagesHelper.prepareSendingMedia(accountInstance, photoPathsArray, did, replyToMsg, replyToMsg, null, false, false, null, notify, 0, false);
5339c5286
<                         SendMessagesHelper.prepareSendingText(accountInstance, sendingText, did, notify, scheduleDate);
---
>                         SendMessagesHelper.prepareSendingText(accountInstance, sendingText, did, topicId, notify, 0);
5344c5291
<                             SendMessagesHelper.getInstance(account).sendMessage(user, did, null, null, null, null, notify, scheduleDate);
---
>                             SendMessagesHelper.getInstance(account).sendMessage(user, did, replyToMsg, replyToMsg, null, null, notify, 0);
5348c5295
<                         SendMessagesHelper.prepareSendingText(accountInstance, message.toString(), did, notify, scheduleDate);
---
>                         SendMessagesHelper.prepareSendingText(accountInstance, message.toString(), did, topicId, notify, 0);
5611,5613d5557
<         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
<             MonetHelper.unregisterReceiver(this);
<         }
5731,5741d5674
< 
<         if (ConfigManager.getBooleanOrFalse(Defines.autoDisableBuiltInProxy)) {
<             if (SharedConfig.proxyEnabled && Utils.isVPNEnabled()) {
<                 SharedConfig.setProxyEnable(false);
<             } else if (!Utils.isVPNEnabled()) {
<                 SharedConfig.setProxyEnable(true);
<             }
<             Utils.registerNetworkCallback();
<             NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.proxySettingsChanged);
<         }
< 
5991d5923
<                     if (!ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat))
7070,7073c7002
<             } else if (
<                 !mainFragmentsStack.isEmpty() && (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) && event.getRepeatCount() == 0
<                 && !ConfigManager.getBooleanOrFalse(Defines.disablePreviewVideoSoundShortcut)
<             ) {
---
>             } else if (!mainFragmentsStack.isEmpty() && (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) && event.getRepeatCount() == 0) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/LauncherIconController.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/LauncherIconController.java
37,44c37,42
<         DEFAULT("DefaultIcon", R.drawable.icon, R.drawable.icon, R.string.AppIconDefault),
<         MAINICON("MainIcon", R.drawable.mainicon, R.drawable.mainicon, R.string.AppIconMain),
<         ICON1("ICON1", R.drawable.icon_1, R.drawable.icon_1, R.string.icon_1),
<         ICON2("ICON2", R.drawable.icon_2, R.drawable.icon_2, R.string.icon_2),
<         ICON3("ICON3", R.drawable.icon_3, R.drawable.icon_3, R.string.icon_3),
<         ICON4("ICON4", R.drawable.icon_4, R.drawable.icon_4, R.string.icon_4),
<         ICON5("ICON5", R.drawable.icon_5, R.drawable.icon_5, R.string.icon_5);
< 
---
>         DEFAULT("DefaultIcon", R.drawable.icon_background_sa, R.mipmap.icon_foreground_sa, R.string.AppIconDefault),
>         VINTAGE("VintageIcon", R.drawable.icon_6_background_sa, R.mipmap.icon_6_foreground_sa, R.string.AppIconVintage),
>         AQUA("AquaIcon", R.drawable.icon_4_background_sa, R.mipmap.icon_foreground_sa, R.string.AppIconAqua),
>         PREMIUM("PremiumIcon", R.drawable.icon_3_background_sa, R.mipmap.icon_3_foreground_sa, R.string.AppIconPremium, true),
>         TURBO("TurboIcon", R.drawable.icon_5_background_sa, R.mipmap.icon_5_foreground_sa, R.string.AppIconTurbo, true),
>         NOX("NoxIcon", R.drawable.icon_2_background_sa, R.mipmap.icon_foreground_sa, R.string.AppIconNox, true);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
7d6
<  * Copyright Ruslan Boitsov, 2017-2020.
46d44
< import android.text.Html;
48d45
< import android.text.method.LinkMovementMethod;
69a67
> import org.telegram.messenger.BuildVars;
79d76
< import org.telegram.messenger.OSMDroidMapsProvider;
169,170d165
<     private TextView attributionOverlay;
< 
184a180
>     private long selectedMarkerId = -1;
225,226d220
< 
<     // Official: Google Maps
231,235d224
<     // OSM
<     private final static int map_list_menu_osm = 2;
<     private final static int map_list_menu_wiki = 3;
<     private final static int map_list_menu_cartodark = 4;
< 
745,749d733
<         if (ApplicationLoader.getMapsProvider() instanceof OSMDroidMapsProvider) {
<             mapTypeButton.addSubItem(map_list_menu_map, R.drawable.msg_map, "Standard OSM");
<             mapTypeButton.addSubItem(map_list_menu_satellite, R.drawable.msg_map, "Wikimedia");
<             mapTypeButton.addSubItem(map_list_menu_hybrid, R.drawable.msg_map, "Carto Dark");
<         } else {
753d736
<         }
791,793d773
<         if (ApplicationLoader.getMapsProvider() instanceof OSMDroidMapsProvider) {
<             mapViewClip.addView(getAttributionOverlay(context), LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 0 : 4, 0, LocaleController.isRTL ? 4 : 0, 20));
<         }
982a963,964
>             private boolean firstSet = true;
> 
994a977,980
>                     if (firstSet && otherPeopleLocations == 1) {
>                         selectedMarkerId = liveLocations.get(0).id;
>                     }
>                     firstSet = false;
1065a1052
>             selectedMarkerId = -1;
1145a1133
>                     selectedMarkerId = liveLocation.id;
1213,1219c1201,1207
< //        new Thread(() -> {
< //            try {
< //                map.onCreate(null);
< //            } catch (Exception e) {
< //                //this will cause exception, but will preload google maps?
< //            }
< //            AndroidUtilities.runOnUIThread(() -> {
---
>         new Thread(() -> {
>             try {
>                 map.onCreate(null);
>             } catch (Exception e) {
>                 //this will cause exception, but will preload google maps?
>             }
>             AndroidUtilities.runOnUIThread(() -> {
1242,1243c1230,1231
< //            });
< //        }).start();
---
>             });
>         }).start();
1389c1377,1379
<         {
---
>         if (BuildVars.isHuaweiStoreApp()) {
>             domain = "mapapp://navigation";
>         } else {
1440,1448d1429
<     private TextView getAttributionOverlay(Context context) {
<         attributionOverlay = new TextView(context);
<         attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
<         attributionOverlay.setShadowLayer(1, -1, -1, Color.WHITE);
<         attributionOverlay.setLinksClickable(true);
<         attributionOverlay.setMovementMethod(LinkMovementMethod.getInstance());
<         return attributionOverlay;
<     }
< 
1667,1668c1648,1649
<                 IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(new IMapsProvider.LatLng(venue.geo.lat, venue.geo._long));
<                 options.icon(getParentActivity().getResources(), createPlaceBitmap(a));
---
>                 IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(new IMapsProvider.LatLng(venue.geo.lat, venue.geo._long));
>                 options.icon(createPlaceBitmap(a));
1704c1685
<                 IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(latLng);
---
>                 IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(latLng);
1707c1688
<                     options.icon(getParentActivity().getResources(), bitmap);
---
>                     options.icon(bitmap);
1712c1693
<                         IMapsProvider.IMarkerOptions dirOptions = ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(latLng).flat(true);
---
>                         IMapsProvider.IMarkerOptions dirOptions = ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(latLng).flat(true);
1718c1699
<                             liveLocation.directionMarker.setIcon(getParentActivity().getResources(), R.drawable.map_pin_cone2);
---
>                             liveLocation.directionMarker.setIcon(R.drawable.map_pin_cone2);
1722c1703
<                             liveLocation.directionMarker.setIcon(getParentActivity().getResources(), R.drawable.map_pin_circle);
---
>                             liveLocation.directionMarker.setIcon(R.drawable.map_pin_circle);
1740a1722,1724
>             if (selectedMarkerId == liveLocation.id) {
>                 map.animateCamera(ApplicationLoader.getMapsProvider().newCameraUpdateLatLng(liveLocation.marker.getPosition()));
>             }
1759c1743
<             IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(latLng);
---
>             IMapsProvider.IMarkerOptions options = ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(latLng);
1762c1746
<                 options.icon(getParentActivity().getResources(), bitmap);
---
>                 options.icon(bitmap);
1767,1768c1751,1752
<                     IMapsProvider.IMarkerOptions dirOptions = ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(latLng).flat(true);
<                     dirOptions.icon(getParentActivity().getResources(), R.drawable.map_pin_circle);
---
>                     IMapsProvider.IMarkerOptions dirOptions = ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(latLng).flat(true);
>                     dirOptions.icon(R.drawable.map_pin_circle);
1800c1784
<                     map.addMarker(ApplicationLoader.getMapsProvider().onCreateMarkerOptions(mapView).position(latLng).icon(getParentActivity().getResources(), R.drawable.map_pin2));
---
>                     map.addMarker(ApplicationLoader.getMapsProvider().onCreateMarkerOptions().position(latLng).icon(R.drawable.map_pin2));
1818,1819c1802,1803
<                 userLocation.setLatitude(48.85825);
<                 userLocation.setLongitude(2.29448);
---
>                 userLocation.setLatitude(20.659322);
>                 userLocation.setLongitude(-11.406250);
1835a1820,1821
>                 selectedMarkerId = -1;
> 
1867a1854,1861
>             for (int i = 0; i < markers.size(); ++i) {
>                 LiveLocation loc = markers.get(i);
>                 if (loc != null && loc.marker == marker) {
>                     selectedMarkerId = loc.id;
>                     map.animateCamera(ApplicationLoader.getMapsProvider().newCameraUpdateLatLngZoom(loc.marker.getPosition(), map.getMaxZoomLevel() - 4));
>                     break;
>                 }
>             }
2181,2183d2174
<         if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
<             return null;
<         } else {
2195d2185
<     }
2209a2200,2202
>             if (selectedMarkerId == liveLocation.id) {
>                 map.animateCamera(ApplicationLoader.getMapsProvider().newCameraUpdateLatLng(liveLocation.marker.getPosition()));
>             }
2539a2533,2535
>                         if (selectedMarkerId == liveLocation.id) {
>                             map.animateCamera(ApplicationLoader.getMapsProvider().newCameraUpdateLatLng(liveLocation.marker.getPosition()));
>                         }
2546c2542
<                                     liveLocation.directionMarker.setIcon(getParentActivity().getResources(), R.drawable.map_pin_cone2);
---
>                                     liveLocation.directionMarker.setIcon(R.drawable.map_pin_cone2);
2552c2548
<                                     liveLocation.directionMarker.setIcon(getParentActivity().getResources(), R.drawable.map_pin_circle);
---
>                                     liveLocation.directionMarker.setIcon(R.drawable.map_pin_circle);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
47d46
< import android.text.InputFilter;
95a95,96
> import com.google.android.gms.safetynet.SafetyNet;
> import com.google.zxing.common.detector.MathUtils;
96a98,99
> import org.json.JSONException;
> import org.json.JSONObject;
125d127
< import org.telegram.ui.ActionBar.ActionBarMenuItem;
177d178
< import java.util.concurrent.atomic.AtomicInteger;
180,190d180
< import kotlin.Unit;
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< import top.qwq2333.nullgram.ui.BottomBuilder;
< import top.qwq2333.nullgram.ui.EditTextAutoFill;
< import top.qwq2333.nullgram.utils.AlertUtil;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.NumberUtils;
< import top.qwq2333.nullgram.utils.StringUtils;
< 
292c282
<     private boolean syncContacts = false;
---
>     private boolean syncContacts = true;
346c336
<     private boolean forceDisableSafetyNet = true;
---
>     private boolean forceDisableSafetyNet;
1135c1125
<                     mailer.putExtra(Intent.EXTRA_TEXT, "I'm trying to use my mobile phone number: " + phoneNumber + "\nBut Nullgram says it's banned. Please help.\n\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault());
---
>                     mailer.putExtra(Intent.EXTRA_TEXT, "I'm trying to use my mobile phone number: " + phoneNumber + "\nBut Telegram says it's banned. Please help.\n\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault());
1138c1128
<                     mailer.putExtra(Intent.EXTRA_TEXT, "I'm trying to use my mobile phone number: " + phoneNumber + "\nBut Nullgram says it's invalid. Please help.\n\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault());
---
>                     mailer.putExtra(Intent.EXTRA_TEXT, "I'm trying to use my mobile phone number: " + phoneNumber + "\nBut Telegram says it's invalid. Please help.\n\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault());
1586a1577
>                 RestrictedLanguagesSelectActivity.checkRestrictedLanguages(true);
1598d1588
<         PasscodeHelper.removePasscodeForAccount(currentAccount);
1675,1678c1665
<             AlertUtil.showSimpleAlert(getContext(),LocaleController.getString("SmsDisabled", R.string.SmsDisabled));
<             return;
< 
< /*            if (PushListenerController.GooglePushListenerServiceProvider.INSTANCE.hasServices()) {
---
>             if (PushListenerController.GooglePushListenerServiceProvider.INSTANCE.hasServices()) {
1738c1725
<             return;*/
---
>             return;
1816,1818d1802
<         AlertDialog qrDialog = null;
<         ImageView imageView = null;
< 
1834d1817
<         @SuppressLint("SuspiciousIndentation")
2281c2264
<             if (activityMode == MODE_LOGIN) {
---
>             if (BuildVars.DEBUG_VERSION && activityMode == MODE_LOGIN) {
2283c2266
<                 testBackendCheckBox.setText(LocaleController.getString("TestBackend", R.string.TestBackend), "", testBackend, false);
---
>                 testBackendCheckBox.setText(LocaleController.getString(R.string.DebugTestBackend), "", testBackend, false);
2293,2523d2275
<                     if (testBackend) {
<                         BulletinFactory.of(slideViewsContainer, null).createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString("TestBackendOn", R.string.TestBackendOn)).show();
<                     } else {
<                         BulletinFactory.of(slideViewsContainer, null).createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString("TestBackendOff", R.string.TestBackendOff)).show();
<                     }
<                 });
<             }
<             if (bottomMargin > 0 && !AndroidUtilities.isSmallScreen()) {
<                 Space bottomSpacer = new Space(context);
<                 bottomSpacer.setMinimumHeight(AndroidUtilities.dp(bottomMargin));
<                 addView(bottomSpacer, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
<             }
< 
<             bottomMargin -= 36;
<             var optionsButton = new ActionBarMenuItem(context, null, 0, Theme.getColor(Theme.key_windowBackgroundWhiteGrayText6));
<             optionsButton.setIcon(R.drawable.arrow_more);
<             optionsButton.setSubMenuOpenSide(1);
<             optionsButton.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector)));
<             optionsButton.addSubItem(0, LocaleController.getString("ProxySettings", R.string.ProxySettings));
<             optionsButton.addSubItem(1, LocaleController.getString("BotLogin", R.string.BotLogin));
<             optionsButton.addSubItem(2, LocaleController.getString("QRLoginTitle", R.string.QRLoginTitle));
<             if (ConfigManager.getBooleanOrFalse(Defines.showHiddenSettings))
<                 optionsButton.addSubItem(3, LocaleController.getString("CustomApiLogin", R.string.customAPI));
<             optionsButton.setDelegate(new ActionBarMenuItem.ActionBarMenuItemDelegate() {
<                 @Override
<                 public void onItemClick(int id) {
<                     if (id == 0) {
<                         presentFragment(new ProxyListActivity());
<                     } else if (id == 1) {
<                         AlertDialog.Builder builder = new AlertDialog.Builder(context);
<                         builder.setTitle(LocaleController.getString("BotLogin", R.string.BotLogin));
< 
<                         final EditTextBoldCursor editText = new EditTextBoldCursor(context) {
<                             @Override
<                             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
<                                 super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
<                             }
<                         };
<                         editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
<                         editText.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
<                         editText.setHintText(LocaleController.getString("BotToken", R.string.BotToken));
<                         editText.setHeaderHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlueHeader));
<                         editText.setSingleLine(true);
<                         editText.setFocusable(true);
<                         editText.setTransformHintToHeader(true);
<                         editText.setLineColors(Theme.getColor(Theme.key_windowBackgroundWhiteInputField), Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated), Theme.getColor(Theme.key_text_RedRegular));
<                         editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
<                         editText.setBackgroundDrawable(null);
<                         editText.requestFocus();
<                         editText.setPadding(0, 0, 0, 0);
<                         builder.setView(editText);
< 
<                         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
<                             if (getParentActivity() == null) {
<                                 return;
<                             }
<                             String token = editText.getText().toString();
< 
<                             if (token.length() == 0) {
<                                 needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidAccessToken", R.string.InvalidAccessToken));
<                                 return;
<                             }
< 
<                             ConnectionsManager.getInstance(currentAccount).cleanup(false);
<                             final TLRPC.TL_auth_importBotAuthorization req = new TLRPC.TL_auth_importBotAuthorization ();
< 
<                             req.api_hash = BuildVars.APP_HASH;
<                             req.api_id = BuildVars.APP_ID;
<                             req.bot_auth_token = token;
<                             req.flags = 0;
<                             int reqId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
<                                 if (error == null) {
<                                     TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
<                                     onAuthSuccess(res);
<                                 } else {
<                                     if (error.text != null) {
<                                         if (error.text.contains("ACCESS_TOKEN_INVALID")) {
<                                             needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidAccessToken", R.string.InvalidAccessToken));
<                                         } else if (error.text.startsWith("FLOOD_WAIT")) {
<                                             needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
<                                         } else if (error.code != -1000) {
<                                             needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
<                                         }
<                                     }
<                                 }
<                                 needHideProgress(false);
<                             }), ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagTryDifferentDc | ConnectionsManager.RequestFlagEnableUnauthorized);
<                             needShowProgress(reqId);
<                         });
<                         builder.setOnPreDismissListener(dialogInterface -> AndroidUtilities.hideKeyboard(editText));
<                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
<                         var dialog = builder.show();
<                         dialog.setOnShowListener(dialog1 -> {
<                             editText.requestFocus();
<                             AndroidUtilities.showKeyboard(editText);
<                         });
<                         ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
<                         if (layoutParams != null) {
<                             if (layoutParams instanceof FrameLayout.LayoutParams) {
<                                 ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
<                             }
<                             layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(24);
<                             layoutParams.height = AndroidUtilities.dp(36);
<                             editText.setLayoutParams(layoutParams);
<                         }
<                     } else if (id == 2) {
<                         exportLoginToken(true);
<                     }
<                     if (id == 3 && ConfigManager.getBooleanOrFalse(Defines.showHiddenSettings)) {
<                         AtomicInteger targetApi = new AtomicInteger(-1);
< 
<                         BottomBuilder builder = new BottomBuilder(getParentActivity());
< 
<                         EditText[] inputs = new EditText[2];
< 
<                         builder.addTitle(LocaleController.getString("customAPI", R.string.customAPI), true, LocaleController.getString("useCustomApiNotice", R.string.useCustomApiNotice));
< 
<                         builder.addRadioItem(LocaleController.getString("disableCustonAPI", R.string.disableCustomAPI), ConfigManager.getIntOrDefault(Defines.customAPI, Defines.disableCustomAPI) == Defines.disableCustomAPI, (cell) -> {
<                             targetApi.set(0);
<                             builder.doRadioCheck(cell);
<                             for (EditText input : inputs) {
<                                 input.setVisibility(View.GONE);
<                             }
<                             return Unit.INSTANCE;
<                         });
< 
<                         builder.addRadioItem(LocaleController.getString("useOfficialAPI", R.string.useOfficialAPI), ConfigManager.getIntOrDefault(Defines.customAPI, Defines.disableCustomAPI) == Defines.useTelegramAPI, (cell) -> {
< 
<                             targetApi.set(1);
< 
<                             builder.doRadioCheck(cell);
< 
<                             for (EditText input : inputs) {
<                                 input.setVisibility(View.GONE);
<                             }
< 
<                             return Unit.INSTANCE;
< 
<                         });
< 
<                         builder.addRadioItem(LocaleController.getString("useCustomAPI", R.string.useCustomAPI), ConfigManager.getIntOrDefault(Defines.customAPI, Defines.disableCustomAPI) == Defines.useCustomAPI, (cell) -> {
< 
<                             targetApi.set(3);
< 
<                             builder.doRadioCheck(cell);
< 
<                             for (EditText input : inputs) {
<                                 input.setVisibility(View.VISIBLE);
<                             }
< 
<                             return Unit.INSTANCE;
< 
<                         });
< 
<                         inputs[0] = builder.addEditText("App Id");
<                         inputs[0].setInputType(InputType.TYPE_CLASS_NUMBER);
<                         if (ConfigManager.getIntOrDefault(Defines.customAppId, 0) != 0) {
<                             inputs[0].setText(ConfigManager.getIntOrDefault(Defines.customAppId, 0) + "");
<                         }
<                         inputs[0].addTextChangedListener(new TextWatcher() {
<                             @Override
<                             public void beforeTextChanged(CharSequence s, int start, int count, int after) {
<                             }
< 
<                             @Override
<                             public void onTextChanged(CharSequence s, int start, int before, int count) {
<                                 if (StringUtils.isBlank(s.toString())) {
<                                     ConfigManager.putInt(Defines.customAppId, 0);
<                                 } else if (!NumberUtils.isInteger(s.toString())) {
<                                     inputs[0].setText("0");
<                                 } else {
<                                     ConfigManager.putInt(Defines.customAppId, NumberUtils.parseInt(s.toString()));
<                                 }
<                             }
< 
<                             @Override
<                             public void afterTextChanged(Editable s) {
<                             }
<                         });
< 
<                         inputs[1] = builder.addEditText("App Hash");
<                         inputs[1].setFilters(new InputFilter[]{new InputFilter.LengthFilter(Defines.telegramHash.length())});
<                         if (!StringUtils.isBlank(ConfigManager.getStringOrDefault(Defines.customAppHash, null))) {
<                             inputs[1].setText(ConfigManager.getStringOrDefault(Defines.customAppHash, "It shouldn't be happened"));
<                         }
<                         inputs[1].addTextChangedListener(new TextWatcher() {
<                             @Override
<                             public void beforeTextChanged(CharSequence s, int start, int count, int after) {
<                             }
< 
<                             @Override
<                             public void onTextChanged(CharSequence s, int start, int before, int count) {
<                                 ConfigManager.putString(Defines.customAppHash, s.toString());
<                             }
< 
<                             @Override
<                             public void afterTextChanged(Editable s) {
<                             }
<                         });
< 
<                         if (ConfigManager.getIntOrDefault(Defines.customAPI, Defines.disableCustomAPI) <= Defines.useTelegramAPI) {
< 
<                             for (EditText input : inputs) {
<                                 input.setVisibility(View.GONE);
<                             }
< 
<                         }
< 
<                         builder.addCancelButton();
< 
<                         builder.addButton(LocaleController.getString("Set", R.string.Set), (it) -> {
< 
<                             int target = targetApi.get();
< 
<                             if (target > 2) {
< 
<                                 if (ConfigManager.getIntOrDefault(Defines.customAppId, 0) == 0) {
< 
<                                     inputs[0].requestFocus();
<                                     AndroidUtilities.showKeyboard(inputs[0]);
< 
<                                     return Unit.INSTANCE;
< 
<                                 } else if (StringUtils.isBlank(ConfigManager.getStringOrDefault(Defines.customAppHash, null))) {
< 
<                                     inputs[1].requestFocus();
<                                     AndroidUtilities.showKeyboard(inputs[1]);
< 
<                                     return Unit.INSTANCE;
< 
<                                 }
2524a2277,2279
>                     boolean testBackend = BuildVars.DEBUG_VERSION && getConnectionsManager().isTestBackend();
>                     if (testBackend != LoginActivity.this.testBackend) {
>                         getConnectionsManager().switchBackend(false);
2526,2530c2281
< 
<                             ConfigManager.putInt(Defines.customAPI, target);
< 
<                             return Unit.INSTANCE;
< 
---
>                     loadCountries();
2532,2533d2282
< 
<                         builder.show();
2535,2540d2283
<                 }
<             });
<             optionsButton.setOnClickListener(view -> optionsButton.toggleSubMenu());
<             optionsButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
<             addView(optionsButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 36, Gravity.LEFT | Gravity.TOP, 16, 0, 16 + (LocaleController.isRTL && AndroidUtilities.isSmallScreen() ? 56 : 0), 0));
< 
2700,2708d2442
<                         CountrySelectActivity.Country countryWithCode = new CountrySelectActivity.Country();
<                         String test_code = "999";
<                         countryWithCode.name = "Test Number";
<                         countryWithCode.code = test_code;
<                         countryWithCode.shortname = "YL";
< 
<                         countriesArray.add(countryWithCode);
<                         codesMap.put(test_code, new ArrayList<>(Collections.singletonList(countryWithCode)));
<                         phoneFormatMap.put(test_code, Collections.singletonList("XX X XXXX"));
2915d2648
<             String phoneCode = codeField.getText().toString();
3116,3195c2849,2852
<             if (countryState == COUNTRY_STATE_EMPTY) {
<                 needShowAlert(LocaleController.getString(R.string.RestorePasswordNoEmailTitle), LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
<                 needHideProgress(false);
<                 return;
<             } else if (countryState == COUNTRY_STATE_INVALID && !BuildVars.DEBUG_VERSION) {
<                 needShowAlert(LocaleController.getString(R.string.RestorePasswordNoEmailTitle), LocaleController.getString("WrongCountry", R.string.WrongCountry));
<                 needHideProgress(false);
<                 return;
<             }
<             if (!testBackend && "999".equals(codeField.getText().toString())) {
<                 testBackend = true;
<                 if (testBackendCheckBox != null) {
<                     testBackendCheckBox.setChecked(true, true);
<                 }
<             }
<             boolean testBackend = /*BuildVars.DEBUG_PRIVATE_VERSION && */getConnectionsManager().isTestBackend();
<             if (testBackend != LoginActivity.this.testBackend) {
<                 getConnectionsManager().switchBackend(false);
<                 testBackend = LoginActivity.this.testBackend;
<             }
<             if (getParentActivity() instanceof LaunchActivity) {
<                 for (int a = 0; a < UserConfig.MAX_ACCOUNT_COUNT; a++) {
<                     UserConfig userConfig = UserConfig.getInstance(a);
<                     if (!userConfig.isClientActivated()) {
<                         continue;
<                     }
<                     String userPhone = userConfig.getCurrentUser().phone;
<                     if (PhoneNumberUtils.compare(phone, userPhone) && ConnectionsManager.getInstance(a).isTestBackend() == testBackend) {
<                         final int num = a;
<                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
<                         builder.setTitle(LocaleController.getString(R.string.AppName));
<                         builder.setMessage(LocaleController.getString("AccountAlreadyLoggedIn", R.string.AccountAlreadyLoggedIn));
<                         builder.setPositiveButton(LocaleController.getString("AccountSwitch", R.string.AccountSwitch), (dialog, which) -> {
<                             if (UserConfig.selectedAccount != num) {
<                                 ((LaunchActivity) getParentActivity()).switchToAccount(num, false);
<                             }
<                             finishFragment();
<                         });
<                         builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
<                         showDialog(builder.create());
<                         needHideProgress(false);
<                         return;
<                     }
<                 }
<             }
< 
<             ConnectionsManager.getInstance(currentAccount).cleanup(false);
<             final TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
<             String appHash = BuildVars.APP_HASH;
<             int appId = BuildVars.APP_ID;
<             switch(ConfigManager.getIntOrDefault(Defines.customAPI,Defines.disableCustomAPI)){
<                 case Defines.disableCustomAPI:
<                     appId = BuildVars.APP_ID;
<                     appHash = BuildVars.APP_HASH;
<                     break;
<                 case Defines.useTelegramAPI:
<                     appId = Defines.telegramID;
<                     appHash = Defines.telegramHash;
<                     break;
<                 case Defines.useCustomAPI:
<                     appId = ConfigManager.getIntOrDefault(Defines.customAppId, BuildVars.APP_ID);
<                     appHash = ConfigManager.getStringOrDefault(Defines.customAppHash,
<                         BuildVars.APP_HASH);
<                     break;
< 
<             }
<             Log.i("customAPI:" + ConfigManager.getIntOrDefault(Defines.customAPI, Defines.disableCustomAPI));
<             Log.i("appID:" + appId);
<             Log.i("appHash:" + appHash);
<             req.api_hash = appHash;
<             req.api_id = appId;
<             req.phone_number = phone;
<             req.settings = new TLRPC.TL_codeSettings();
<             req.settings.allow_flashcall = simcardAvailable && allowCall && allowCancelCall && allowReadCallLog;
<             req.settings.allow_missed_call = simcardAvailable && allowCall;
<             req.settings.allow_app_hash = PushListenerController.GooglePushListenerServiceProvider.INSTANCE.hasServices();
<             ArrayList<TLRPC.TL_auth_loggedOut> tokens = AuthTokensHelper.getSavedLogOutTokens();
<             req.settings.allow_flashcall = simcardAvailable && allowCall && allowCancelCall && allowReadCallLog;
<             req.settings.allow_missed_call = simcardAvailable && allowCall;
<             req.settings.allow_app_hash = req.settings.allow_firebase = PushListenerController.GooglePushListenerServiceProvider.INSTANCE.hasServices();
---
>             TLRPC.TL_codeSettings settings = new TLRPC.TL_codeSettings();
>             settings.allow_flashcall = simcardAvailable && allowCall && allowCancelCall && allowReadCallLog;
>             settings.allow_missed_call = simcardAvailable && allowCall;
>             settings.allow_app_hash = settings.allow_firebase = PushListenerController.GooglePushListenerServiceProvider.INSTANCE.hasServices();
3197c2854
<                 req.settings.allow_firebase = false;
---
>                 settings.allow_firebase = false;
3206,3207c2863,2864
<                     if (req.settings.logout_tokens == null) {
<                         req.settings.logout_tokens = new ArrayList<>();
---
>                     if (settings.logout_tokens == null) {
>                         settings.logout_tokens = new ArrayList<>();
3212,3213c2869,2870
<                     req.settings.logout_tokens.add(loginTokens.get(i).future_auth_token);
<                     if (req.settings.logout_tokens.size() >= 20) {
---
>                     settings.logout_tokens.add(loginTokens.get(i).future_auth_token);
>                     if (settings.logout_tokens.size() >= 20) {
3217a2875
>             ArrayList<TLRPC.TL_auth_loggedOut> tokens = AuthTokensHelper.getSavedLogOutTokens();
3220,3221c2878,2879
<                     if (req.settings.logout_tokens == null) {
<                         req.settings.logout_tokens = new ArrayList<>();
---
>                     if (settings.logout_tokens == null) {
>                         settings.logout_tokens = new ArrayList<>();
3223,3224c2881,2882
<                     req.settings.logout_tokens.add(tokens.get(i).future_auth_token);
<                     if (req.settings.logout_tokens.size() >= 20) {
---
>                     settings.logout_tokens.add(tokens.get(i).future_auth_token);
>                     if (settings.logout_tokens.size() >= 20) {
3230,3231c2888,2889
<             if (req.settings.logout_tokens != null) {
<                 req.settings.flags |= 64;
---
>             if (settings.logout_tokens != null) {
>                 settings.flags |= 64;
3235c2893
<             if (req.settings.allow_app_hash) {
---
>             if (settings.allow_app_hash) {
3240c2898
<             if (req.settings.allow_flashcall) {
---
>             if (settings.allow_flashcall) {
3244,3246c2902,2904
<                         req.settings.current_number = PhoneNumberUtils.compare(phone, number);
<                         if (!req.settings.current_number) {
<                             req.settings.allow_flashcall = false;
---
>                         settings.current_number = PhoneNumberUtils.compare(phone, number);
>                         if (!settings.current_number) {
>                             settings.allow_flashcall = false;
3250c2908
<                             req.settings.allow_flashcall = false;
---
>                             settings.allow_flashcall = false;
3252c2910
<                             req.settings.current_number = false;
---
>                             settings.current_number = false;
3256c2914
<                     req.settings.allow_flashcall = false;
---
>                     settings.allow_flashcall = false;
3261c2919
<             TLObject req1;
---
>             TLObject req;
3265,3266c2923,2924
<                 changePhoneCode.settings = req.settings;
<                 req1 = changePhoneCode;
---
>                 changePhoneCode.settings = settings;
>                 req = changePhoneCode;
3274,3275c2932,2933
<                 sendCode.settings = req.settings;
<                 req1 = sendCode;
---
>                 sendCode.settings = settings;
>                 req = sendCode;
3537,3693d3194
<         public void exportLoginToken(boolean show) {
<             getNotificationCenter().removeObserver(this, NotificationCenter.onUpdateLoginToken);
< 
<             Context context = getContext();
<             if (context == null) {
<                 return;
<             }
< 
<             if (show)  {
<                 getConnectionsManager().cleanup(false);
<             } else if (qrDialog == null || !qrDialog.isShowing()) {
<                 return;
<             }
< 
<             TLRPC.TL_auth_exportLoginToken req = new TLRPC.TL_auth_exportLoginToken();
<             req.api_hash = BuildVars.APP_HASH;
<             req.api_id = BuildVars.APP_ID;
<             for (int a = 0; a < UserConfig.MAX_ACCOUNT_COUNT; a++) {
<                 UserConfig userConfig = UserConfig.getInstance(a);
<                 if (userConfig.isClientActivated()) {
<                     long uid = userConfig.getClientUserId();
<                     req.except_ids.add(uid);
<                 }
<             }
< 
<             AlertDialog progressDialog = new AlertDialog(getParentActivity(), 3);
<             int requestId = getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
<                 progressDialog.dismiss();
<                 if (error == null) {
<                     if (response instanceof TLRPC.TL_auth_loginToken) {
<                         getNotificationCenter().addObserver(this, NotificationCenter.onUpdateLoginToken);
<                         TLRPC.TL_auth_loginToken res = (TLRPC.TL_auth_loginToken) response;
<                         if (show) {
<                             LinearLayout linearLayout = new LinearLayout(context);
<                             linearLayout.setOrientation(LinearLayout.VERTICAL);
<                             linearLayout.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 4, 4, 4, 4));
< 
<                             TextView titleTextView = new TextView(context);
<                             titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
<                             titleTextView.setGravity(Gravity.CENTER_HORIZONTAL);
<                             titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
<                             titleTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
<                             titleTextView.setText(LocaleController.getString("QRLoginTitle", R.string.QRLoginTitle));
<                             linearLayout.addView(titleTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 8, 24, 8, 0));
< 
<                             TextView descriptionTextView = new TextView(context);
<                             descriptionTextView.setGravity(Gravity.CENTER_HORIZONTAL);
<                             descriptionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
<                             descriptionTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
<                             descriptionTextView.setText(LocaleController.getString("QRLoginMessage", R.string.QRLoginMessage));
<                             descriptionTextView.setPadding(0, AndroidUtilities.dp(8), 0, 0);
<                             linearLayout.addView(descriptionTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 8, 0, 8, 0));
< 
<                             imageView = new ImageView(context) {
<                                 @Override
<                                 protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
<                                     int size = MeasureSpec.getSize(widthMeasureSpec);
<                                     super.onMeasure(MeasureSpec.makeMeasureSpec(size, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(size, MeasureSpec.EXACTLY));
<                                 }
<                             };
<                             imageView.setScaleType(ImageView.ScaleType.FIT_XY);
<                             imageView.setOutlineProvider(new ViewOutlineProvider() {
<                                 @Override
<                                 public void getOutline(View view, Outline outline) {
<                                     outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), AndroidUtilities.dp(12));
<                                 }
<                             });
<                             imageView.setClipToOutline(true);
< 
<                             linearLayout.addView(imageView, LayoutHelper.createLinear(240, 240, Gravity.CENTER_HORIZONTAL | Gravity.TOP, 24, 24, 24, 24));
< 
<                             AlertDialog.Builder builder = new AlertDialog.Builder(context);
<                             builder.setView(linearLayout);
<                             qrDialog = builder.create();
<                             qrDialog.setOnDismissListener(d -> getNotificationCenter().removeObserver(this, NotificationCenter.onUpdateLoginToken));
<                             showDialog(qrDialog);
<                         }
<                         String link = "tg://login?token=" + Base64.encodeToString(res.token, Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING);
<                         imageView.setImageBitmap(getMessageUtils().createQR(link));
<                         long expires = res.expires - getConnectionsManager().getCurrentTime();
<                         if (expires < 0) {
<                             expires = 20;
<                         }
<                         AndroidUtilities.runOnUIThread(() -> exportLoginToken(false), expires * 1000L);
<                     } else if (response instanceof TLRPC.TL_auth_loginTokenSuccess) {
<                         qrDialog.dismiss();
<                         postDelayed(() -> {
<                             AndroidUtilities.hideKeyboard(codeField);
<                             onAuthSuccess((TLRPC.TL_auth_authorization) ((TLRPC.TL_auth_loginTokenSuccess) response).authorization);
<                         }, 150);
<                     } else if (response instanceof TLRPC.TL_auth_loginTokenMigrateTo) {
<                         qrDialog.dismiss();
<                         showDoneButton(true, true);
<                         TLRPC.TL_auth_loginTokenMigrateTo res = (TLRPC.TL_auth_loginTokenMigrateTo) response;
< 
<                         ConnectionsManager.native_moveToDatacenter(currentAccount, res.dc_id);
<                         TLRPC.TL_auth_importLoginToken request = new TLRPC.TL_auth_importLoginToken();
<                         request.token = res.token;
<                         getConnectionsManager().sendRequest(request, (response1, error1) -> AndroidUtilities.runOnUIThread(() -> {
<                             if (error1 == null) {
<                                 if (response1 instanceof TLRPC.TL_auth_loginTokenSuccess) {
<                                     postDelayed(() -> {
<                                         showDoneButton(false, true);
<                                         AndroidUtilities.hideKeyboard(codeField);
<                                         onAuthSuccess((TLRPC.TL_auth_authorization) ((TLRPC.TL_auth_loginTokenSuccess) response1).authorization);
<                                     }, 150);
<                                 }
<                             } else if (error1.text != null) {
<                                 handleError(error1.text);
<                             }
<                         }), ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagTryDifferentDc | ConnectionsManager.RequestFlagEnableUnauthorized);
<                     }
<                 } else if (error.text != null) {
<                     handleError(error.text);
<                 }
< 
<             }), ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagTryDifferentDc | ConnectionsManager.RequestFlagEnableUnauthorized);
<             progressDialog.setOnCancelListener(dialog -> {
<                 getConnectionsManager().cancelRequest(requestId, true);
<                 if (qrDialog != null) {
<                     qrDialog.dismiss();
<                 }
<             });
<             progressDialog.showDelayed(300);
<         }
< 
<         private void handleError(String errorText) {
<             if (qrDialog != null) {
<                 qrDialog.dismiss();
<             }
<             if (errorText.contains("SESSION_PASSWORD_NEEDED")) {
<                 TLRPC.TL_account_getPassword req = new TLRPC.TL_account_getPassword();
<                 getConnectionsManager().sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
<                     nextPressed = false;
<                     showDoneButton(false, true);
<                     if (error == null) {
<                         TLRPC.TL_account_password password = (TLRPC.TL_account_password) response;
<                         if (!TwoStepVerificationActivity.canHandleCurrentPassword(password, true)) {
<                             AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
<                             return;
<                         }
<                         Bundle bundle = new Bundle();
<                         SerializedData data = new SerializedData(password.getObjectSize());
<                         password.serializeToStream(data);
<                         bundle.putString("password", Utilities.bytesToHex(data.toByteArray()));
<                         setPage(VIEW_PASSWORD, true, bundle, false);
<                     } else {
<                         needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
<                     }
<                 }), ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
<             } else if (errorText.startsWith("FLOOD_WAIT")) {
<                 needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
<             } else {
<                 needShowAlert(LocaleController.getString("AppName", R.string.AppName), errorText);
<             }
<         }
< 
3698,3699d3198
<             } else if (id == NotificationCenter.onUpdateLoginToken) {
<                 exportLoginToken(false);
5293c4792
<             codeField = new EditTextAutoFill(context);
---
>             codeField = new EditTextBoldCursor(context);
7274c6773
<             codeField = new EditTextAutoFill[stage == 1 ? 1 : 2];
---
>             codeField = new EditTextBoldCursor[stage == 1 ? 1 : 2];
7296c6795
<                 codeField[a] = new EditTextAutoFill(context);
---
>                 codeField[a] = new EditTextBoldCursor(context);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/LogoutActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/LogoutActivity.java
132a133,135
>                 if (!UserConfig.hasPremiumOnAccounts()) {
>                     freeAccounts -= (UserConfig.MAX_ACCOUNT_COUNT - UserConfig.MAX_ACCOUNT_DEFAULT_COUNT);
>                 }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/MessageSeenView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/MessageSeenView.java
3a4,6
> import android.graphics.Canvas;
> import android.graphics.ColorFilter;
> import android.graphics.PixelFormat;
7a11,12
> import android.text.SpannableStringBuilder;
> import android.text.Spanned;
8a14,16
> import android.text.style.DynamicDrawableSpan;
> import android.text.style.ImageSpan;
> import android.util.Log;
19a28
> import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
96,97d95
< import top.qwq2333.nullgram.helpers.PasscodeHelper;
< 
166,174d163
<     private int account = -1;
< 
<     public PasscodeActivity(@PasscodeActivityType int type, int account) {
<         super();
<         this.type = type;
<         this.account = account;
<     }
< 
< 
1026,1031c1015
<             boolean isFirst;
<             if (account != -1) {
<                 isFirst = false;
<                 PasscodeHelper.setPasscodeForAccount(firstPassword, account);
<             } else {
<                 isFirst = SharedConfig.passcodeHash.length() == 0;
---
>             boolean isFirst = SharedConfig.passcodeHash.length() == 0;
1044d1027
<             }
1081c1064
<             if (!PasscodeHelper.checkPasscode(getParentActivity(), password) && !SharedConfig.checkPasscode(password)) {
---
>             if (!SharedConfig.checkPasscode(password)) {
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
51a52
> import org.telegram.messenger.SharedConfig;
76,78d76
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
433c431
<                 sendSelectedPhotos(selectedPhotos, selectedPhotosOrder, !ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                 sendSelectedPhotos(selectedPhotos, selectedPhotosOrder, true, 0);
500c498
<                             sendSelectedPhotos(selectedPhotos, selectedPhotosOrder, !ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                             sendSelectedPhotos(selectedPhotos, selectedPhotosOrder, true, 0);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
24d23
< import org.telegram.messenger.FileLog;
25a25
> import org.telegram.messenger.FileLog;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
67a68
> import org.telegram.messenger.SharedConfig;
103,105d103
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.utils.Defines;
< 
388c386
<             delegate.actionButtonPressed(true, !ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>             delegate.actionButtonPressed(true, true, 0);
1072c1070
<                     sendSelectedPhotos(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                     sendSelectedPhotos(true, 0);
1135c1133
<                                 sendSelectedPhotos(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                                 sendSelectedPhotos(true, 0);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
121a122
> import androidx.exifinterface.media.ExifInterface;
151d151
< import org.telegram.messenger.LanguageDetector;
266,273d265
< import kotlin.Unit;
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.QrHelper;
< import top.qwq2333.nullgram.helpers.TranslateHelper;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.MessageUtils;
< 
292d283
<     private String translateFromLanguage = null;
762,765d752
<     private ActionBarMenuItem shareItem;
<     private ActionBarMenuSubItem qrItem;
<     private ActionBarMenuSubItem translateItem;
<     private AlertDialog progressDialog;
1764,1766d1750
<     private final static int gallery_menu_qr = 84;
<     private final static int gallery_menu_translate = 91;
< 
4843,4845d4826
<                         fragment.forwardContext = () -> fmessages;
<                         var forwardParams = fragment.forwardContext.getForwardParams();
<                         forwardParams.noQuote = id == gallery_menu_send;
5289,5292d5269
<                 } else if (id == gallery_menu_translate) {
<                     translateCaption();
<                 } else if (id == gallery_menu_qr) {
<                     QrHelper.showQrDialog(parentFragment, resourcesProvider, qrResults, true);
5375,5379d5351
<         translateItem = menuItem.addSubItem(gallery_menu_translate, R.drawable.msg_translate, LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
<         translateItem.setColors(0xfffafafa, 0xfffafafa);
<         qrItem = menuItem.addSubItem(gallery_menu_qr, R.drawable.msg_qrcode, LocaleController.getString("QrCode", R.string.QrCode));
<         qrItem.setColors(0xfffafafa, 0xfffafafa);
< 
6018c5990
<                 sendPressed(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                 sendPressed(true, 0);
6128c6100
<                         sendPressed(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0);
---
>                         sendPressed(true, 0);
6130c6102
<                         sendPressed(!ConfigManager.getBooleanOrFalse(Defines.alwaysSendWithoutSound), 0, false, true, false);
---
>                         sendPressed(true, 0, false, true, false);
6611d6582
<                 detectQr();
11673d11643
<         menuItem.hideSubItem(gallery_menu_translate);
12102,12123d12071
<                 menuItem.hideSubItem(gallery_menu_translate);
<                 if (TranslateHelper.getCurrentStatus() != TranslateHelper.Status.External) {
<                     var messageUtils = MessageUtils.getInstance(currentAccount);
<                     var messageObject = messageUtils.getMessageForTranslate(newMessageObject, null);
<                     if (messageObject != null) {
<                         if (!messageObject.translated && LanguageDetector.hasSupport()) {
<                             LanguageDetector.detectLanguage(
<                                 messageUtils.getMessagePlainText(messageObject),
<                                 (String lang) -> {
<                                     translateFromLanguage = TranslateHelper.stripLanguageCode(lang);
<                                     if (!TranslateHelper.isLanguageRestricted(lang)) {
<                                         menuItem.showSubItem(gallery_menu_translate);
<                                     }
<                                 }, e -> Log.e("mlkit: failed to detect language")
<                             );
<                         } else {
<                             menuItem.showSubItem(gallery_menu_translate);
<                         }
<                         translateItem.setText(newMessageObject.translated ? LocaleController.getString("UndoTranslate", R.string.UndoTranslate) : LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
<                     }
<                 }
< 
12341a12290,12292
>             if (noforwards) {
>                 menuItem.hideSubItem(gallery_menu_save);
>             } else {
12343c12294
< 
---
>             }
12725a12677
>                     if (allowShare) {
12726a12679,12681
>                     } else {
>                         menuItem.hideSubItem(gallery_menu_save);
>                     }
13011d12965
<         detectQr();
14196c14150
<             if (!ConfigManager.getBooleanOrFalse(Defines.allowScreenshotOnNoForwardChat) && ((chatActivity != null && chatActivity.getCurrentEncryptedChat() != null ||
---
>             if (chatActivity != null && chatActivity.getCurrentEncryptedChat() != null ||
14198,14199c14152,14153
<                 messageObject != null && (MessagesController.getInstance(currentAccount).isChatNoForwards(messageObject.getChatId()) || (messageObject.messageOwner != null && messageObject.messageOwner.noforwards)))
<             )) {
---
>                     messageObject != null && (MessagesController.getInstance(currentAccount).isChatNoForwards(messageObject.getChatId()) ||
>                             (messageObject.messageOwner != null && messageObject.messageOwner.noforwards)) || messageObject != null && messageObject.hasRevealedExtendedMedia()) {
18105,18204d18058
<     }
< 
<         private void translateCaption() {
<         if (currentMessageObject == null) {
<             return;
<         }
<         if (currentMessageObject.translated && currentMessageObject.originalMessage != null) {
<             final String finalMessage = (String) currentMessageObject.originalMessage;
<             currentMessageObject.messageOwner.message = finalMessage;
<             currentMessageObject.translated = false;
<             currentMessageObject.caption = null;
<             currentMessageObject.generateCaption();
< 
<             setCurrentCaption(currentMessageObject, finalMessage, true);
<             translateItem.setText(LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
<             return;
<         }
<         if (TranslateHelper.getCurrentStatus() != TranslateHelper.Status.InMessage) {
<             TranslateHelper.showTranslateDialog(parentActivity, currentMessageObject.messageOwner.message,
<                 null, translateFromLanguage, urlSpan -> {
<                     onLinkClick(urlSpan, captionTextViewSwitcher.getCurrentView());
<                     return true;
<                 });
<             return;
<         }
<         Object original = currentMessageObject.messageOwner.message;
<         currentMessageObject.originalMessage = original;
<         final MessageObject finalMessageObject = currentMessageObject;
<         try {
<             progressDialog.dismiss();
<         } catch (Throwable ignore) {
< 
<         }
<         progressDialog = new AlertDialog(parentActivity, 3, resourcesProvider);
<         progressDialog.showDelayed(400);
<         TranslateHelper.translate(original, translateFromLanguage,(translation, sourceLanguage, targetLanguage) -> {
<             try {
<                 progressDialog.dismiss();
<             } catch (Throwable ignore) {
< 
<             }
<             if (translation instanceof String) {
<                 final String finalMessage = original +
<                     "\n" +
<                     "--------" +
<                     "\n" +
<                     translation;
<                 finalMessageObject.messageOwner.message = finalMessage;
<                 finalMessageObject.translated = true;
<                 finalMessageObject.caption = null;
<                 finalMessageObject.generateCaption();
< 
<                 setCurrentCaption(finalMessageObject, finalMessage, true);
<                 translateItem.setText(LocaleController.getString("UndoTranslate", R.string.UndoTranslate));
<             }
<             return Unit.INSTANCE;
<         }, e -> {
<             try {
<                 progressDialog.dismiss();
<             } catch (Throwable ignore) {
<             }
<             TranslateHelper.handleTranslationError(parentActivity, e, () -> translateCaption(), resourcesProvider);
<             return Unit.INSTANCE;
<         });
<     }
< 
<     ArrayList<QrHelper.QrResult> qrResults;
<     private void detectQr() {
<         menuItem.hideSubItem(gallery_menu_qr);
<         Utilities.globalQueue.postRunnable(() -> {
<             Bitmap bitmap = centerImage.getBitmap();
<             if (bitmap == null) {
<                 return;
<             }
<             ArrayList<QrHelper.QrResult> qrResults = new ArrayList<>(QrHelper.readQr(bitmap));
<             AndroidUtilities.runOnUIThread(() -> {
<                 if (menuItem == null || qrItem == null) {
<                     return;
<                 }
<                 PhotoViewer.this.qrResults = qrResults;
<                 if (qrResults.size() == 1) {
<                     menuItem.showSubItem(gallery_menu_qr);
<                     var text = qrResults.get(0).text;
<                     var username = Browser.extractUsername(text);
<                     if (username != null) {
<                         qrItem.setSubtext("@" + username);
<                     } else if (text.startsWith("http://") || text.startsWith("https://")) {
<                         Uri uri = Uri.parse(qrResults.get(0).text);
<                         qrItem.setSubtext(uri.getHost());
<                     } else {
<                         qrItem.setSubtext(null);
<                     }
<                 } else if (!qrResults.isEmpty()) {
<                     menuItem.showSubItem(gallery_menu_qr);
<                     qrItem.setSubtext(null);
<                 } else {
<                     menuItem.hideSubItem(gallery_menu_qr);
<                 }
<             });
<         });
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PollCreateActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PollCreateActivity.java
21,25d20
< import androidx.recyclerview.widget.DefaultItemAnimator;
< import androidx.recyclerview.widget.ItemTouchHelper;
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
57a53,57
> 
> import androidx.recyclerview.widget.DefaultItemAnimator;
> import androidx.recyclerview.widget.ItemTouchHelper;
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
40d39
< import org.telegram.PhoneFormat.PhoneFormat;
42d40
< import org.telegram.messenger.ApplicationLoader;
46,47d43
< import org.telegram.messenger.FileLoader;
< import org.telegram.messenger.FileLog;
51d46
< import org.telegram.messenger.MessageObject;
53c48
< import org.telegram.messenger.NotificationCenter;
---
> import org.telegram.PhoneFormat.PhoneFormat;
55d49
< import org.telegram.messenger.R;
59a54,58
> import org.telegram.messenger.ApplicationLoader;
> import org.telegram.messenger.FileLoader;
> import org.telegram.messenger.FileLog;
> import org.telegram.messenger.NotificationCenter;
> import org.telegram.messenger.R;
62a62
> import org.telegram.messenger.MessageObject;
67d66
< import org.telegram.ui.ActionBar.Theme;
77a77
> import org.telegram.ui.ActionBar.Theme;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PremiumPreviewFragment.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PremiumPreviewFragment.java
148c148
<     // public final static int PREMIUM_FEATURE_APPLICATION_ICONS = 10;
---
>     public final static int PREMIUM_FEATURE_APPLICATION_ICONS = 10;
196,197c196,197
<             // case "app_icons":
<             // return PREMIUM_FEATURE_APPLICATION_ICONS;
---
>             case "app_icons":
>                 return PREMIUM_FEATURE_APPLICATION_ICONS;
231a232,233
>             case PREMIUM_FEATURE_APPLICATION_ICONS:
>                 return "app_icons";
604a607
>         premiumFeatures.add(new PremiumFeatureData(PREMIUM_FEATURE_APPLICATION_ICONS, R.drawable.msg_premium_icons, LocaleController.getString("PremiumPreviewAppIcon", R.string.PremiumPreviewAppIcon), LocaleController.getString("PremiumPreviewAppIconDescription", R.string.PremiumPreviewAppIconDescription)));
686c689
<                         launchActivity.onNewIntent(new Intent(Intent.ACTION_VIEW, Uri.parse("https://t.me/" + fragment.getMessagesController().premiumBotUsername + "?start=" + source)).putExtra("internal", true));
---
>                         launchActivity.onNewIntent(new Intent(Intent.ACTION_VIEW, Uri.parse("https://t.me/" + fragment.getMessagesController().premiumBotUsername + "?start=" + source)));
688c691
<                         launchActivity.onNewIntent(new Intent(Intent.ACTION_VIEW, Uri.parse("https://t.me/$" + fragment.getMessagesController().premiumInvoiceSlug)).putExtra("internal", true));
---
>                         launchActivity.onNewIntent(new Intent(Intent.ACTION_VIEW, Uri.parse("https://t.me/$" + fragment.getMessagesController().premiumInvoiceSlug)));
1025c1028
<                     MediaDataController.addTextStyleRuns(premiumPromo.status_entities, premiumPromo.status_text, spannableString, -1);
---
>                     MediaDataController.addTextStyleRuns(premiumPromo.status_entities, premiumPromo.status_text, spannableString);
1462,1468c1465
<             String text;
<             if (subscriptionTiers.isEmpty()) {
<                 text = LocaleController.getString(R.string.SubscribeToPremiumNotAvailable);
<             } else {
<                 text = getPremiumButtonText(currentAccount, subscriptionTiers.get(selectedTierIndex));
<             }
<             premiumButtonView.setButton(text, v -> buyPremium(this), animated);
---
>             premiumButtonView.setButton(getPremiumButtonText(currentAccount, subscriptionTiers.get(selectedTierIndex)), v -> buyPremium(this), animated);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/PrivacyControlActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/PrivacyControlActivity.java
19d18
< import android.os.Build;
1265,1287c1264
<                                 SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
< 
<                                 String phoneLinkStr = String.format(Locale.ENGLISH, "https//t.me/+%s", getUserConfig().getClientPhone());
<                                 SpannableString phoneLink = new SpannableString(phoneLinkStr);
<                                 phoneLink.setSpan(new ClickableSpan() {
<                                     @Override
<                                     public void onClick(@NonNull View view) {
<                                         android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
<                                         android.content.ClipData clip = android.content.ClipData.newPlainText("label", phoneLinkStr);
<                                         clipboard.setPrimaryClip(clip);
<                                         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
<                                             BulletinFactory.of(PrivacyControlActivity.this).createCopyBulletin(LocaleController.getString("PhoneCopied", R.string.PhoneCopied)).show();
<                                         }
<                                     }
<                                 }, 0, phoneLinkStr.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
< 
<                                 spannableStringBuilder.append(LocaleController.getString("PrivacyPhoneInfo3", R.string.PrivacyPhoneInfo3))
<                                         .append("\n\n")
<                                         .append(LocaleController.getString("PrivacyPhoneInfo4", R.string.PrivacyPhoneInfo4))
<                                         .append("\n")
<                                         .append(phoneLink);
< 
<                                 privacyCell.setText(spannableStringBuilder);
---
>                                 privacyCell.setText(LocaleController.getString("PrivacyPhoneInfo3", R.string.PrivacyPhoneInfo3));
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
70d69
< import android.view.inputmethod.EditorInfo;
100d98
< import org.telegram.messenger.BuildConfig;
159d156
< import org.telegram.ui.Cells.TextDetailSettingsCell;
182d178
< import org.telegram.ui.Components.EditTextBoldCursor;
211a208
> import org.telegram.ui.Components.TranslateAlert2;
226d222
< import java.util.Date;
234d229
< import java.util.concurrent.atomic.AtomicBoolean;
239,253d233
< import kotlin.Unit;
< import top.qwq2333.nullgram.activity.MainSettingActivity;
< import top.qwq2333.nullgram.config.ConfigManager;
< import top.qwq2333.nullgram.helpers.TranslateHelper;
< import top.qwq2333.nullgram.translate.LanguageDetectorTimeout;
< import top.qwq2333.nullgram.ui.AutoTranslatePopupWrapper;
< import top.qwq2333.nullgram.ui.BottomBuilder;
< import top.qwq2333.nullgram.ui.SimpleTextViewSwitcher;
< import top.qwq2333.nullgram.utils.AlertUtil;
< import top.qwq2333.nullgram.utils.Defines;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.NumberUtils;
< import top.qwq2333.nullgram.utils.StringUtils;
< import top.qwq2333.nullgram.utils.Utils;
< 
331c311
<     private final boolean[] isOnline = new boolean[1];
---
>     private boolean[] isOnline = new boolean[1];
386c366
<     private final HashMap<Integer, Integer> positionToOffset = new HashMap<>();
---
>     private HashMap<Integer, Integer> positionToOffset = new HashMap<>();
395,396d374
<     private float idX;
<     private float idY;
402c380
<     private final float[] expandAnimatorValues = new float[]{0f, 1f};
---
>     private float[] expandAnimatorValues = new float[]{0f, 1f};
407c385
<     private final Paint whitePaint = new Paint();
---
>     private Paint whitePaint = new Paint();
448,451c426
<     private final static int event_log = 23;
<     private final static int aliasChannelName = 24;
<     private final static int setLinkedUser = 25;
<     private final static int delete_topic = 26;
---
>     private final static int delete_topic = 23;
463c438
<     private final Rect rect = new Rect();
---
>     private Rect rect = new Rect();
481,482d456
<     private int nullRow;
<     private int nullSectionRow;
496a471
>     private int debugHeaderRow;
510,511d484
<     private int restrictionReasonRow;
<     private int linkedUserRow;
554d526
<     private boolean hidePhone = false;
556d527
<     private SimpleTextViewSwitcher idTextView;
589c560
<     private final PhotoViewer.PhotoViewerProvider provider = new PhotoViewer.EmptyPhotoViewerProvider() {
---
>     private PhotoViewer.PhotoViewerProvider provider = new PhotoViewer.EmptyPhotoViewerProvider() {
661c632
<         private final ImageReceiver foregroundImageReceiver;
---
>         private ImageReceiver foregroundImageReceiver;
779c750
<         private final Paint paint = new Paint();
---
>         private Paint paint = new Paint();
1156c1127
<         private final NestedScrollingParentHelper nestedScrollingParentHelper;
---
>         private NestedScrollingParentHelper nestedScrollingParentHelper;
1379d1349
<                     if (isPulledDown) updateIdText(true, true);
1396d1365
<                     if (isPulledDown) updateIdText(true, true);
1897,1902d1865
<                 } else if (id == event_log) {
<                     presentFragment(new ChannelAdminLogActivity(currentChat));
<                 } else if (id == aliasChannelName) {
<                     setChannelAlias();
<                 } else if (id == setLinkedUser) {
<                     setLinkedUser();
2278d2240
<                             updateIdText(false, true);
2439a2402
>                         if (!getMessagesController().isChatNoForwards(currentChat)) {
2440a2404,2406
>                         } else {
>                             otherItem.hideSubItem(gallery_menu_save);
>                         }
3365,3366d3330
<             } else if (position == nullRow) {
<                 presentFragment(new MainSettingActivity());
3379,3444d3342
<             } else if (position == versionRow) {
<                 TextInfoPrivacyCell cell = (TextInfoPrivacyCell) view;
< 
<                 BottomBuilder builder = new BottomBuilder(getParentActivity());
<                 String message = cell.getTextView().getText().toString();
<                 builder.addTitle(message);
<                 String finalMessage = message;
<                 builder.addItem(LocaleController.getString("Copy", R.string.Copy), R.drawable.msg_copy, (it) -> {
<                     AndroidUtilities.addToClipboard(finalMessage);
<                     AlertUtil.showToast(LocaleController.getString("TextCopied", R.string.TextCopied));
<                     return Unit.INSTANCE;
<                 });
<                 builder.addItem(LocaleController.getString("CheckUpdate", R.string.CheckUpdate), R.drawable.msg_search, (it) -> {
<                     Browser.openUrl(context, "tg://update");
<                     return Unit.INSTANCE;
<                 });
< 
<                 String currentChannel = " - ";
<                 int currentUpdateChannel;
<                 switch (ConfigManager.getIntOrDefault(Defines.updateChannel, -1)) {
<                     case Defines.disableAutoUpdate:
<                         currentUpdateChannel = Defines.disableAutoUpdate;
<                         currentChannel += LocaleController.getString("AutoCheckUpdateOFF", R.string.AutoCheckUpdateOFF);
<                         break;
<                     case Defines.stableChannel:
<                         currentUpdateChannel = Defines.stableChannel;
<                         currentChannel += LocaleController.getString("AutoCheckUpdateStable", R.string.AutoCheckUpdateStable);
<                         break;
<                     case Defines.ciChannel:
<                         currentUpdateChannel = Defines.ciChannel;
<                         currentChannel += LocaleController.getString("AutoCheckUpdatePreview", R.string.AutoCheckUpdatePreview);
<                         break;
<                     default:
<                         if (BuildConfig.VERSION_NAME.contains("preview")) {
<                             currentUpdateChannel = Defines.ciChannel;
<                             currentChannel += LocaleController.getString("AutoCheckUpdatePreview", R.string.AutoCheckUpdatePreview);
< 
<                         } else {
<                             currentUpdateChannel = Defines.stableChannel;
<                             currentChannel += LocaleController.getString("AutoCheckUpdateStable", R.string.AutoCheckUpdateStable);
<                         }
<                 }
< 
<                 builder.addItem(LocaleController.getString("AutoCheckUpdateSwitch", R.string.AutoCheckUpdateSwitch) + currentChannel, R.drawable.baseline_system_update_24, (it) -> {
<                     BottomBuilder switchBuilder = new BottomBuilder(getParentActivity());
<                     switchBuilder.addTitle(LocaleController.getString("AutoCheckUpdateSwitch", R.string.AutoCheckUpdateSwitch));
<                     switchBuilder.addRadioItem(LocaleController.getString("AutoCheckUpdateOFF", R.string.AutoCheckUpdateOFF), currentUpdateChannel == Defines.disableAutoUpdate, (radioButtonCell) -> {
<                         ConfigManager.putInt(Defines.updateChannel, Defines.disableAutoUpdate);
<                         switchBuilder.doRadioCheck(radioButtonCell);
<                         return Unit.INSTANCE;
<                     });
<                     switchBuilder.addRadioItem(LocaleController.getString("AutoCheckUpdateStable", R.string.AutoCheckUpdateStable), currentUpdateChannel == Defines.stableChannel, (radioButtonCell) -> {
<                         ConfigManager.putInt(Defines.updateChannel, Defines.stableChannel);
<                         switchBuilder.doRadioCheck(radioButtonCell);
<                         return Unit.INSTANCE;
<                     });
<                     switchBuilder.addRadioItem(LocaleController.getString("AutoCheckUpdatePreview", R.string.AutoCheckUpdatePreview), currentUpdateChannel == Defines.ciChannel, (radioButtonCell) -> {
<                         ConfigManager.putInt(Defines.updateChannel, Defines.ciChannel);
<                         switchBuilder.doRadioCheck(radioButtonCell);
<                         return Unit.INSTANCE;
<                     });
<                     showDialog(switchBuilder.create());
<                     return Unit.INSTANCE;
<                 });
< 
<                 builder.show();
3522a3421,3422
>                                 getNotificationCenter().postNotificationName(NotificationCenter.newSuggestionsAvailable);
>                                 RestrictedLanguagesSelectActivity.cleanup();
4141,4151d4040
<                 nameTextView[a].setOnLongClickListener(v -> {
<                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
<                     builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
<                         if (i == 0) {
<                             AndroidUtilities.addToClipboard(((SimpleTextView) v).getText());
<                             BulletinFactory.of(this).createCopyBulletin(LocaleController.formatString("TextCopied", R.string.TextCopied)).show();
<                         }
<                     });
<                     showDialog(builder.create());
<                     return false;
<                 });
4213,4243d4101
<         idTextView = new SimpleTextViewSwitcher(context) {
<             @Override
<             public boolean performLongClick(float x, float y) {
<                 long id = idTextView.getTag(R.id.id_copy) != null ? (long) idTextView.getTag(R.id.id_copy) : 0;
<                 int dc = idTextView.getTag(R.id.id_dc) != null ? (int) idTextView.getTag(R.id.id_dc) : 0;
<                 if (id != 0 || dc != 0) {
<                     Utils.showIdPopup(ProfileActivity.this, idTextView, id, dc, userId != 0, x, y);
<                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
<                     return true;
<                 }
<                 return false;
<             }
<         };
<         idTextView.setVisibility(View.VISIBLE);
<         idTextView.setFactory(() -> {
<             SimpleTextView view = new SimpleTextView(context);
<             view.setTextColor(getThemedColor(Theme.key_avatar_subtitleInProfileBlue));
<             view.setTextSize(14);
<             view.setGravity(Gravity.LEFT);
<             view.setPadding(AndroidUtilities.dp(4), AndroidUtilities.dp(2), AndroidUtilities.dp(4), AndroidUtilities.dp(2));
<             view.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
<             return view;
<         });
<         idTextView.setAlpha(1.0f);
<         idTextView.setTag(1.0f);
<         idTextView.setInAnimation(context, R.anim.alpha_in);
<         idTextView.setOutAnimation(context, R.anim.alpha_out);
<         idTextView.setLongClickable(true);
<         avatarContainer2.addView(idTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 118 - 4, -2, 4, 0));
< 
< 
4282,4285d4139
<             if (currentChat.megagroup) {
<                 writeButton.setImageResource(R.drawable.msg_channel);
<                 writeButton.setContentDescription(LocaleController.getString("OpenChannel2", R.string.OpenChannel2));
<             } else {
4289d4142
<         }
4404c4257
<                             statusBarPaint.setColor(getParentActivity().getWindow().getStatusBarColor());
---
>                             statusBarPaint.setColor(ColorUtils.setAlphaComponent(Color.BLACK, (int) (255 * 0.2f)));
4448d4300
<         updateIdText(false, false);
4513,4519d4364
<         final float idTextViewXEnd = AndroidUtilities.dpf2(16f) - idTextView.getLeft();
<         final float idTextViewYEnd = newTop + extraHeight - AndroidUtilities.dpf2(3f) - idTextView.getBottom();
<         final float idTextViewCx = k + idX + (idTextViewXEnd - idX) / 2f;
<         final float idTextViewCy = k + idY + (idTextViewYEnd - idY) / 2f;
<         final float idTextViewX = (1 - value) * (1 - value) * idX + 2 * (1 - value) * value * idTextViewCx + value * value * idTextViewXEnd;
<         final float idTextViewY = (1 - value) * (1 - value) * idY + 2 * (1 - value) * value * idTextViewCy + value * value * idTextViewYEnd;
< 
4522c4367
<         onlineTextView[1].setTranslationX(onlineTextViewX);
---
>         onlineTextView[1].setTranslationX(onlineTextViewX + customPhotoOffset);
4524,4525d4368
<         idTextView.setTranslationX(idTextViewX);
<         idTextView.setTranslationY(idTextViewY);
5060,5061c4903
<                             BulletinFactory.createInviteSentBulletin(getParentActivity(), contentView, dids.size(), dids.size() == 1 ? dids.valueAt(0).id : 0, count,
<                                 getThemedColor(Theme.key_undo_background), getThemedColor(Theme.key_undo_infoColor)).show();
---
>                             BulletinFactory.createInviteSentBulletin(getParentActivity(), contentView, dids.size(), dids.size() == 1 ? dids.valueAt(0).id : 0, count, getThemedColor(Theme.key_undo_background), getThemedColor(Theme.key_undo_infoColor)).show();
5065,5076c4907,4915
<                 return true;
<             }
<         } else if (position == restrictionReasonRow) {
<             ArrayList<TLRPC.TL_restrictionReason> reasons = new ArrayList<>();
<             if (userId != 0) {
<                 final TLRPC.User user = getMessagesController().getUser(userId);
<                 if (user != null) {
<                     reasons = user.restriction_reason;
<                 }
<             } else if (currentChat != null) {
<                 TLRPC.Chat chat = getMessagesController().getChat(chatId);
<                 reasons = chat.restriction_reason;
---
>             } else {
>                 try {
>                     android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
>                     String text = "@" + username;
>                     BulletinFactory.of(this).createCopyBulletin(LocaleController.getString("UsernameCopied", R.string.UsernameCopied), resourcesProvider).show();
>                     android.content.ClipData clip = android.content.ClipData.newPlainText("label", text);
>                     clipboard.setPrimaryClip(clip);
>                 } catch (Exception e) {
>                     FileLog.e(e);
5078,5095d4916
<             Context context = getParentActivity();
<             LinearLayout ll = new LinearLayout(context);
<             ll.setOrientation(LinearLayout.VERTICAL);
< 
<             AlertDialog dialog = new AlertDialog.Builder(context).setView(ll).create();
< 
<             for (TLRPC.TL_restrictionReason reason : reasons) {
<                 TextDetailSettingsCell cell = new TextDetailSettingsCell(context);
<                 cell.setBackground(Theme.getSelectorDrawable(false));
<                 cell.setMultilineDetail(true);
<                 cell.setOnClickListener(v1 -> {
<                     dialog.dismiss();
<                     AndroidUtilities.addToClipboard(cell.getValueTextView().getText());
<                     BulletinFactory.of(this).createCopyBulletin(LocaleController.formatString("TextCopied", R.string.TextCopied)).show();
<                 });
<                 cell.setTextAndValue(reason.reason + "-" + reason.platform, reason.text, false);
< 
<                 ll.addView(cell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
5097,5098d4917
< 
<             showDialog(dialog);
5100,5101d4918
<         } else if (position == linkedUserRow) {
<             Browser.openUrl(getParentActivity(), "tg://user?id=" + ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + getCurrentChat().id, 1578562490L));
5271c5088
<             final boolean translateButtonEnabled = false;
---
>             final boolean translateButtonEnabled = MessagesController.getInstance(currentAccount).getTranslateController().isContextTranslateEnabled();
5274,5275c5091
<             final AtomicBoolean waitForLangDetection = new AtomicBoolean(false);
<             final AtomicReference<Runnable> onLangDetectionDone = new AtomicReference<>(null);
---
>             final String toLang = LocaleController.getInstance().getCurrentLocale().getLanguage();
5314c5130
<                                 TranslateHelper.showTranslateDialog(getParentActivity(), finalText, this, fromLanguage[0], span -> {
---
>                                 TranslateAlert2.showAlert(fragmentView.getContext(), this, currentAccount, fromLanguage[0], toLang, finalText, null, false, span -> {
5320c5136
<                                 });
---
>                                 }, null);
5358,5376c5174,5183
<                     withTranslate[0] = false;
<                     LanguageDetectorTimeout.detectLanguage(
<                         view, finalText,
<                         (String fromLang) -> {
<                             fromLanguage[0] = TranslateHelper.stripLanguageCode(fromLang);
<                             if (!TranslateHelper.isLanguageRestricted(fromLang) || (currentChat != null && (currentChat.has_link || ChatObject.isPublic(currentChat))) && ("uk".equals(fromLang) || "ru".equals(fromLang))) {
<                                 withTranslate[0] = true;
<                             }
<                         },
<                         null, waitForLangDetection, onLangDetectionDone
<                     );
<                     view.postDelayed(() -> {
<                         if (onLangDetectionDone.get() != null) {
<                             onLangDetectionDone.getAndSet(null).run();
<                         }
<                     }, 250);
<                 }
<                 if (waitForLangDetection.get()) {
<                     onLangDetectionDone.set(showMenu);
---
>                     LanguageDetector.detectLanguage(finalText, (fromLang) -> {
>                         fromLanguage[0] = fromLang;
>                         withTranslate[0] = fromLang != null && (!fromLang.equals(toLang) || fromLang.equals("und")) && (
>                             translateButtonEnabled && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(fromLang) ||
>                             (currentChat != null && (currentChat.has_link || ChatObject.isPublic(currentChat))) && ("uk".equals(fromLang) || "ru".equals(fromLang)));
>                         showMenu.run();
>                     }, (error) -> {
>                         FileLog.e("mlkit: failed to detect language in selection", error);
>                         showMenu.run();
>                     });
5399,5519d5205
<     private void setChannelAlias() {
<         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
<         builder.setTitle(LocaleController.getString("setChannelAliasName", R.string.setChannelAliasName));
< 
<         final EditTextBoldCursor editText = new EditTextBoldCursor(getParentActivity()) {
<             @Override
<             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
<                 super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
<             }
<         };
<         editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
<         editText.setTextColor(getThemedColor(Theme.key_dialogTextBlack));
<         editText.setHintText(LocaleController.getString("Name", R.string.Name));
<         if (!ConfigManager.getStringOrDefault(Defines.channelAliasPrefix + getCurrentChat().id, "").equals("")) {
<             editText.setText(ConfigManager.getStringOrDefault(Defines.channelAliasPrefix + getCurrentChat().id, ""));
<         }
<         editText.setHeaderHintColor(getThemedColor(Theme.key_windowBackgroundWhiteBlueHeader));
<         editText.setSingleLine(true);
<         editText.setFocusable(true);
<         editText.setTransformHintToHeader(true);
<         editText.setLineColors(getThemedColor(Theme.key_windowBackgroundWhiteInputField), getThemedColor(Theme.key_windowBackgroundWhiteInputFieldActivated), getThemedColor(Theme.key_text_RedRegular));
<         editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
<         editText.setBackgroundDrawable(null);
<         editText.requestFocus();
<         editText.setPadding(0, 0, 0, 0);
<         builder.setView(editText);
< 
<         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
<             if (editText.getText().toString().trim().equals("")) {
<                 ConfigManager.deleteValue(Defines.channelAliasPrefix + getCurrentChat().id);
<             } else {
<                 ConfigManager.putString(Defines.channelAliasPrefix + getCurrentChat().id, editText.getText().toString());
<             }
<         });
<         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
<         builder.show().setOnShowListener(dialog -> {
<             editText.requestFocus();
<             AndroidUtilities.showKeyboard(editText);
<         });
<         ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
<         if (layoutParams != null) {
<             if (layoutParams instanceof FrameLayout.LayoutParams) {
<                 ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
<             }
<             layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(24);
<             layoutParams.height = AndroidUtilities.dp(36);
<             editText.setLayoutParams(layoutParams);
<         }
<         editText.setSelection(0, editText.getText().length());
<     }
< 
<     private void setLinkedUser() {
<         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
<         builder.setTitle(LocaleController.getString("setLinkedUser", R.string.setLinkedUser));
< 
<         final EditTextBoldCursor editText = new EditTextBoldCursor(getParentActivity()) {
<             @Override
<             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
<                 super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
<             }
<         };
<         editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
<         editText.setTextColor(getThemedColor(Theme.key_dialogTextBlack));
<         editText.setHintText(LocaleController.getString("UserIDOrBotID", R.string.UserIDOrBotID));
<         if (ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + getCurrentChat().id, 1145141919810L) != 1145141919810L) {
<             editText.setText(ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + getCurrentChat().id, 0L) + "");
<         }
<         editText.setHeaderHintColor(getThemedColor(Theme.key_windowBackgroundWhiteBlueHeader));
<         editText.setSingleLine(true);
<         editText.setFocusable(true);
<         editText.setTransformHintToHeader(true);
<         editText.setLineColors(getThemedColor(Theme.key_windowBackgroundWhiteInputField), getThemedColor(Theme.key_windowBackgroundWhiteInputFieldActivated), getThemedColor(Theme.key_text_RedRegular));
<         editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
<         editText.setBackgroundDrawable(null);
<         editText.requestFocus();
<         editText.setPadding(0, 0, 0, 0);
<         builder.setView(editText);
< 
<         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
<             if (StringUtils.isBlank(editText.getText().toString())) {
<                 ConfigManager.deleteValue(Defines.linkedUserPrefix + getCurrentChat().id);
<             } else {
<                 if (NumberUtils.isLong(editText.getText().toString())) {
<                     long id = Long.parseLong(editText.getText().toString());
<                     if (id < 0L) {
<                         id = Utils.getUserIDFromBotID(id, true);
<                     }
<                     final TLRPC.User user = getMessagesController().getUser(id);
<                     if (user == null || (user.last_name == null && user.first_name == null)) {
<                         BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("unableToFindUser", R.string.unableToFindUser)).show();
<                     } else {
<                         ConfigManager.putLong(Defines.linkedUserPrefix + getCurrentChat().id, id);
<                     }
<                 } else {
<                     BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("notANumber", R.string.notANumber)).show();
<                 }
<             }
<         });
<         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
< 
<         builder.setNeutralButton(LocaleController.getString("Clear", R.string.Clear), (dialogInterface, i) -> {
<             ConfigManager.deleteValue(Defines.linkedUserPrefix + getCurrentChat().id);
<         });
< 
< 
<         builder.show().setOnShowListener(dialog -> {
<             editText.requestFocus();
<             AndroidUtilities.showKeyboard(editText);
<         });
<         ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
<         if (layoutParams != null) {
<             if (layoutParams instanceof FrameLayout.LayoutParams) {
<                 ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
<             }
<             layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(24);
<             layoutParams.height = AndroidUtilities.dp(36);
<             editText.setLayoutParams(layoutParams);
<         }
<         editText.setSelection(0, editText.getText().length());
<     }
< 
5915c5601
<                         setVisible = ChatObject.isChannel(currentChat) /*&& !currentChat.megagroup */ && chatInfo != null && chatInfo.linked_chat_id != 0 && infoHeaderRow != -1;
---
>                         setVisible = ChatObject.isChannel(currentChat) && !currentChat.megagroup && chatInfo != null && chatInfo.linked_chat_id != 0 && infoHeaderRow != -1;
5933c5619,5623
<                                 writeButtonAnimation.playTogether(ObjectAnimator.ofFloat(writeButton, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(writeButton, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(writeButton, View.ALPHA, 1.0f));
---
>                                 writeButtonAnimation.playTogether(
>                                         ObjectAnimator.ofFloat(writeButton, View.SCALE_X, 1.0f),
>                                         ObjectAnimator.ofFloat(writeButton, View.SCALE_Y, 1.0f),
>                                         ObjectAnimator.ofFloat(writeButton, View.ALPHA, 1.0f)
>                                 );
5936c5626,5630
<                                 writeButtonAnimation.playTogether(ObjectAnimator.ofFloat(writeButton, View.SCALE_X, 0.2f), ObjectAnimator.ofFloat(writeButton, View.SCALE_Y, 0.2f), ObjectAnimator.ofFloat(writeButton, View.ALPHA, 0.0f));
---
>                                 writeButtonAnimation.playTogether(
>                                         ObjectAnimator.ofFloat(writeButton, View.SCALE_X, 0.2f),
>                                         ObjectAnimator.ofFloat(writeButton, View.SCALE_Y, 0.2f),
>                                         ObjectAnimator.ofFloat(writeButton, View.ALPHA, 0.0f)
>                                 );
5980a5675
>                             if (!getMessagesController().isChatNoForwards(currentChat)) {
5981a5677,5679
>                             } else {
>                                 otherItem.hideSubItem(gallery_menu_save);
>                             }
5994d5691
<                         updateIdText(true, true);
6037,6038d5733
<                         idTextView.setTranslationX(AndroidUtilities.dpf2(16f) - onlineTextView[1].getLeft());
<                         idTextView.setTranslationY(newTop + h - AndroidUtilities.dpf2(3f) - idTextView.getBottom() + additionalTranslationY);
6045d5739
<                         updateIdText(false, true);
6103,6104d5796
<                         idTextView.setTranslationX(idX);
<                         idTextView.setTranslationY(idY);
6176,6177d5867
<                 idX = -21 * AndroidUtilities.density * diff;
<                 idY = (float) Math.floor(avatarY) + AndroidUtilities.dp(32) + (float) Math.floor(22 * AndroidUtilities.density) * diff;
6188,6189d5877
<                         idTextView.setTranslationX(idX);
<                         idTextView.setTranslationY(idY);
6198,6207d5885
< 
<                 if (!searchMode) {
<                     idTextView.setAlpha(diff);
<                     idTextView.setTag(diff);
<                     if (diff == 0) {
<                         idTextView.setVisibility(View.GONE);
<                     } else {
<                         idTextView.setVisibility(View.VISIBLE);
<                     }
<                 }
6305,6306d5982
<         idX = AndroidUtilities.dp(-21f) + avatarContainer.getMeasuredWidth() * (avatarScale - (42f + 18f) / 42f);
<         idY = (float) Math.floor(avatarY) + AndroidUtilities.dp(32) + (float) Math.floor(22 * AndroidUtilities.density) + avatarContainer.getMeasuredHeight() * (avatarScale - (42f + 18f) / 42f) / 2f;
6372,6384d6047
< 
<         width2 = idTextView.getPaint().measureText(idTextView.getText().toString());
<         layoutParams = (FrameLayout.LayoutParams) idTextView.getLayoutParams();
<         prevWidth = layoutParams.width;
<         layoutParams.rightMargin = (int) Math.ceil(idTextView.getTranslationX() + AndroidUtilities.dp(8) + AndroidUtilities.dp(40) * (1.0f - diff));
<         if (width < width2) {
<             layoutParams.width = (int) Math.ceil(width);
<         } else {
<             layoutParams.width = LayoutHelper.WRAP_CONTENT;
<         }
<         if (prevWidth != layoutParams.width) {
<             idTextView.requestLayout();
<         }
6679c6342,6345
<         return playProfileAnimation == 0;
---
>         if (playProfileAnimation == 0) {
>             return true;
>         }
>         return false;
7017,7018d6682
<                     idTextView.setAlpha(0);
<                     idTextView.setTextColor(Color.argb(179, 255, 255, 255));
7021d6684
<                     animators.add(ObjectAnimator.ofFloat(idTextView, View.ALPHA, 0.0f, 1.0f));
7159d6821
<                         idTextView.setAlpha(1.0f);
7305d6966
<         nullRow = -1;
7321a6983
>         debugHeaderRow = -1;
7339,7340d7000
<         restrictionReasonRow = -1;
<         linkedUserRow = -1;
7393c7053
<                 numberRow = hidePhone ? -1 : rowCount++;
---
>                 numberRow = rowCount++;
7397,7399d7056
<                 nullSectionRow = rowCount++;
<                 nullRow = rowCount++;
< 
7435a7092
>                     debugHeaderRow = rowCount++;
7437d7093
<                 /*
7446d7101
<                  */
7463,7466c7118
<                 if (user != null && !user.restriction_reason.isEmpty()) {
<                     restrictionReasonRow = rowCount++;
<                 }
<                 if (phoneRow != -1 || userInfoRow != -1 || usernameRow != -1 || restrictionReasonRow != -1) {
---
>                 if (phoneRow != -1 || userInfoRow != -1 || usernameRow != -1) {
7519c7171
<             if (chatInfo != null && (!TextUtils.isEmpty(chatInfo.about) || chatInfo.location instanceof TLRPC.TL_channelLocation) || ChatObject.isPublic(currentChat) || !currentChat.restriction_reason.isEmpty()) {
---
>             if (chatInfo != null && (!TextUtils.isEmpty(chatInfo.about) || chatInfo.location instanceof TLRPC.TL_channelLocation) || ChatObject.isPublic(currentChat)) {
7535,7540d7186
<                 if (!currentChat.restriction_reason.isEmpty()) {
<                     restrictionReasonRow = rowCount++;
<                 }
<                 if (ConfigManager.getBooleanOrFalse(Defines.linkedUser) && ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + getCurrentChat().id, 1145141919810L) != 1145141919810L) {
<                     linkedUserRow = rowCount++;
<                 }
7762d7407
<         long id = 0;
7853c7498,7502
<                 if (!nameTextView[a].getText().equals(newString)) {
---
>                 if (a == 0 && user.id != getUserConfig().getClientUserId() && user.id / 1000 != 777 && user.id / 1000 != 333 && user.phone != null && user.phone.length() != 0 && getContactsController().contactsDict.get(user.id) == null &&
>                         (getContactsController().contactsDict.size() != 0 || !getContactsController().isLoadingContacts())) {
>                     String phoneString = PhoneFormat.getInstance().format("+" + user.phone);
>                     nameTextView[a].setText(phoneString);
>                 } else {
7892c7541
<                     } else if (user.verifiedExtended()) {
---
>                     } else if (user.verified) {
8117c7766
<                     } else if (chat.verifiedExtended()) {
---
>                     } else if (chat.verified) {
8218,8231d7866
<         if (id != 0) {
<             long finalId = id;
<             idTextView.setOnLongClickListener(v -> {
<                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
<                 builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
<                     if (i == 0) {
<                         AndroidUtilities.addToClipboard(String.valueOf(finalId));
<                         BulletinFactory.of(this).createCopyBulletin(LocaleController.formatString("TextCopied", R.string.TextCopied)).show();
<                     }
<                 });
<                 showDialog(builder.create());
<                 return false;
<             });
<         }
8271d7905
<                         createAutoTranslateItem(userId);
8280c7914
<                         createAutoTranslateItem(userId);
---
>                         otherItem.addSubItem(add_shortcut, R.drawable.msg_home, LocaleController.getString("AddShortcut", R.string.AddShortcut));
8296c7930
<                             otherItem.addSubItem(block_contact, R.drawable.msg_block, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock));
---
>                             otherItem.addSubItem(block_contact, !userBlocked ? R.drawable.msg_block : R.drawable.msg_block, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock));
8303d7936
<                     createAutoTranslateItem(userId);
8308c7941
<                     otherItem.addSubItem(block_contact, R.drawable.msg_block, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock));
---
>                     otherItem.addSubItem(block_contact, !userBlocked ? R.drawable.msg_block : R.drawable.msg_block, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock));
8328d7960
<             createAutoTranslateItem(-chatId, topicId);
8335c7967
<                     if ((ChatObject.hasAdminRights(chat) || chat.megagroup && ChatObject.canChangeChatInfo(chat)) || chat.megagroup) {
---
>                     if (ChatObject.hasAdminRights(chat) || chat.megagroup && ChatObject.canChangeChatInfo(chat)) {
8358,8360d7989
<                     if (chatInfo != null && chatInfo.linked_chat_id != 0) {
<                         otherItem.addSubItem(view_discussion, R.drawable.msg_channel, LocaleController.getString("OpenChannel2", R.string.OpenChannel2));
<                     }
8368,8373d7996
<                     if (ConfigManager.getBooleanOrFalse(Defines.channelAlias)) {
<                         otherItem.addSubItem(aliasChannelName, R.drawable.msg_fave, LocaleController.getString("setChannelAliasName", R.string.setChannelAliasName));
<                     }
<                     if (ConfigManager.getBooleanOrFalse(Defines.linkedUser)) {
<                         otherItem.addSubItem(setLinkedUser, R.drawable.msg_fave, LocaleController.getString("setLinkedUser", R.string.setLinkedUser));
<                     }
8390c8013,8015
<                 editItemVisible = true; // enable edit item by default
---
>                 if (ChatObject.canChangeChatInfo(chat)) {
>                     editItemVisible = true;
>                 }
8412a8038,8040
>         if (getMessagesController().isChatNoForwards(currentChat)) {
>             otherItem.hideSubItem(gallery_menu_save);
>         }
8536,8545d8163
<     private void createAutoTranslateItem(long dialogId) {
<         createAutoTranslateItem(dialogId, 0);
<     }
< 
<     private void createAutoTranslateItem(long dialogId, int topicId) {
<         var autoTranslatePopupWrapper = new AutoTranslatePopupWrapper(ProfileActivity.this, otherItem.getPopupLayout().getSwipeBack(), dialogId, topicId, getResourceProvider());
<         otherItem.addSwipeBackItem(R.drawable.msg_translate, null, LocaleController.getString("AutoTranslate", R.string.AutoTranslate), autoTranslatePopupWrapper.windowLayout);
<         otherItem.addColoredGap();
<     }
< 
8667d8284
<         idTextView.setVisibility(View.VISIBLE);
8714d8330
<             idTextView.setAlpha(((float) idTextView.getTag()) * progressHalf);
8791d8406
<         idTextView.setVisibility(hide);
8806d8420
<         idTextView.setAlpha((float) idTextView.getTag());
9148c8762
<         private final Context mContext;
---
>         private Context mContext;
9156c8770
<             View view = null;
---
>             View view;
9214,9219c8828,8830
<                         protected void didResizeEnd() {
<                             layoutManager.mIgnoreTopPadding = false;
<                         }
< 
<                         protected void didResizeStart() {
<                             layoutManager.mIgnoreTopPadding = true;
---
>                         @Override
>                         protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
>                             super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(32), MeasureSpec.EXACTLY));
9273c8884,8885
<                 case VIEW_TYPE_VERSION: {
---
>                 case VIEW_TYPE_VERSION:
>                 default: {
9280,9282c8892,8908
<                         int code = pInfo.versionCode;
<                         String abi = BuildConfig.FLAVOR;
<                         cell.setText(LocaleController.formatString("NullgramVersion", R.string.NullgramVersion, String.format(Locale.US, "%s (%d) %s", pInfo.versionName, code, abi), String.format(Locale.US, "%s (%d)", BuildVars.BUILD_VERSION_STRING, BuildVars.BUILD_VERSION)));
---
>                         int code = pInfo.versionCode / 10;
>                         String abi = "";
>                         switch (pInfo.versionCode % 10) {
>                             case 1:
>                             case 2:
>                                 abi = "store bundled " + Build.CPU_ABI + " " + Build.CPU_ABI2;
>                                 break;
>                             default:
>                             case 9:
>                                 if (BuildVars.isStandaloneApp()) {
>                                     abi = "direct " + Build.CPU_ABI + " " + Build.CPU_ABI2;
>                                 } else {
>                                     abi = "universal " + Build.CPU_ABI + " " + Build.CPU_ABI2;
>                                 }
>                                 break;
>                         }
>                         cell.setText(LocaleController.formatString("TelegramVersion", R.string.TelegramVersion, String.format(Locale.US, "v%s (%d) %s", pInfo.versionName, code, abi)));
9291,9293d8916
<                 default: {
<                     break;
<                 }
9358a8982,8983
>                     } else if (position == debugHeaderRow) {
>                         headerCell.setText(LocaleController.getString("SettingsDebug", R.string.SettingsDebug));
9428,9468d9052
<                     } else if (position == restrictionReasonRow) {
<                         ArrayList<TLRPC.TL_restrictionReason> reasons = new ArrayList<>();
<                         if (userId != 0) {
<                             final TLRPC.User user = getMessagesController().getUser(userId);
<                             if (user != null) {
<                                 reasons = user.restriction_reason;
<                             }
<                         } else if (currentChat != null) {
<                             TLRPC.Chat chat = getMessagesController().getChat(chatId);
<                             reasons = chat.restriction_reason;
<                         }
<                         StringBuilder value = new StringBuilder();
<                         for (TLRPC.TL_restrictionReason reason : reasons) {
<                             value.append(reason.reason);
<                             value.append("-");
<                             value.append(reason.platform);
<                             if (reasons.indexOf(reason) != reasons.size() - 1) {
<                                 value.append(", ");
<                             }
<                         }
<                         detailCell.setTextAndValue(value.toString(), LocaleController.getString("RestrictionReason", R.string.RestrictionReason), false);
<                     } else if (position == linkedUserRow) {
<                         final TLRPC.User user = getMessagesController().getUser(ConfigManager.getLongOrDefault(Defines.linkedUserPrefix + getCurrentChat().id, 1578562490L));
<                         String nickname;
<                         if (user != null) {
<                             if (user.first_name != null && user.last_name != null) {
<                                 nickname = user.first_name + user.last_name;
<                             } else {
<                                 if (user.first_name != null) {
<                                     nickname = user.first_name;
<                                 } else if (user.last_name != null) {
<                                     nickname = user.last_name;
<                                 } else {
<                                     nickname = "NOT_FOUND";
<                                 }
<                             }
<                         } else {
<                             nickname = "NOT_FOUND";
<                         }
< 
<                         detailCell.setTextAndValue(nickname, LocaleController.getString("LinkedUser", R.string.linkedUser), false);
9539c9123
<                         aboutLinkCell.setText(text, true);
---
>                         aboutLinkCell.setText(text, ChatObject.isChannel(currentChat) && !currentChat.megagroup);
9633,9634c9217
<                     } else if (position == nullRow) {
<                         textCell.setTextAndIcon(LocaleController.getString("NullSettings", R.string.NullSettings), R.drawable.msg_settings, false);
---
>                         textCell.setColors(-1, Theme.key_text_RedRegular);
9885c9468
<                         position == clearLogsRow || position == switchBackendRow || position == setAvatarRow || position == nullRow ||
---
>                         position == clearLogsRow || position == switchBackendRow || position == setAvatarRow ||
9912c9495
<                 position == numberSectionRow || position == helpHeaderRow) {
---
>                     position == numberSectionRow || position == helpHeaderRow || position == debugHeaderRow) {
9914c9497
<             } else if (position == phoneRow || position == locationRow || position == numberRow || position == restrictionReasonRow || position == linkedUserRow) {
---
>             } else if (position == phoneRow || position == locationRow || position == numberRow) {
9927c9510
<                     position == clearLogsRow || position == switchBackendRow || position == setAvatarRow || position == addToGroupButtonRow || position == nullRow ||
---
>                     position == clearLogsRow || position == switchBackendRow || position == setAvatarRow || position == addToGroupButtonRow ||
9939c9522
<                     position == phoneSuggestionSectionRow || position == premiumSectionsRow || position == reportDividerRow || position == nullSectionRow) {
---
>                     position == phoneSuggestionSectionRow || position == premiumSectionsRow || position == reportDividerRow) {
9966,9968c9549,9551
<             private final String searchTitle;
<             private final Runnable openRunnable;
<             private final String rowName;
---
>             private String searchTitle;
>             private Runnable openRunnable;
>             private String rowName;
9970,9971c9553,9554
<             private final int iconResId;
<             private final int guid;
---
>             private int iconResId;
>             private int guid;
10026c9609
<         private final Context mContext;
---
>         private Context mContext;
10030c9613
<         private final ArrayList<Object> recentSearches = new ArrayList<>();
---
>         private ArrayList<Object> recentSearches = new ArrayList<>();
10252a9836
>                 isPremiumFeatureAvailable(PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS) ? new SearchResult(812, LocaleController.getString(R.string.PremiumPreviewAppIcon), LocaleController.getString(R.string.TelegramPremium), R.drawable.msg_settings_premium, () -> showDialog(new PremiumFeatureBottomSheet(ProfileActivity.this, PremiumPreviewFragment.PREMIUM_FEATURE_APPLICATION_ICONS, false).setForceAbout())) : null,
10812,10814d10395
<                 if (idTextView != null) {
<                     idTextView.setTextColor(Theme.getColor(Theme.key_avatar_subtitleInProfileBlue));
<                 }
11102,11103d10682
<             put(++pointer, nullRow, sparseIntArray);
<             put(++pointer, nullSectionRow, sparseIntArray);
11119a10699
>             put(++pointer, debugHeaderRow, sparseIntArray);
11133,11134d10712
<             put(++pointer, restrictionReasonRow, sparseIntArray);
<             put(++pointer, linkedUserRow, sparseIntArray);
11169,11221d10746
<     private void updateIdText(boolean showDate, boolean animated) {
<         if (!showDate && isPulledDown && !animated) {
<             return;
<         }
<         idTextView.setTag(R.id.id_dc, null);
<         idTextView.setTag(R.id.id_copy, null);
<         if (!showDate) {
<             long id;
<             if (userId != 0) {
<                 id = userId;
<                 TLRPC.User user = getMessagesController().getUser(userId);
<                 int dc = user.photo != null && user.photo.dc_id != 0 ? user.photo.dc_id : UserObject.isUserSelf(user) ? getConnectionsManager().getCurrentDatacenterId() : 0;
<                 if (dc != 0) {
<                     idTextView.setText("ID: " + id + ", DC: " + dc, animated);
<                     idTextView.setTag(R.id.id_dc, dc);
<                 } else {
<                     idTextView.setText("ID: " + id, animated);
<                 }
<             } else if (chatId != 0) {
<                 TLRPC.Chat chat = getMessagesController().getChat(chatId);
<                 if (ConfigManager.getBooleanOrFalse(Defines.showBotAPIID)) {
<                     if (ChatObject.isChannel(chat)) {
<                         id = -1000000000000L - chat.id;
<                     } else {
<                         id = - chat.id;
<                     }
<                 } else {
<                     id = chatId;
<                 }
<                 idTextView.setText("ID: " + id, animated);
<             } else {
<                 id = 0;
<             }
<             if (id != 0) {
<                 idTextView.setTag(R.id.id_copy, id);
<             }
<         } else {
<             int position = avatarsViewPager.getRealPosition();
<             TLRPC.Photo avatar = avatarsViewPager.getPhoto(position);
<             if (avatar == null) {
<                 return;
<             }
<             long date = (long) avatar.date * 1000;
<             if (date != 0) {
<                 String dateString = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date(date)), LocaleController.getInstance().formatterDay.format(new Date(date))) + ", DC: " + avatar.dc_id;
<                 idTextView.setText(dateString, animated);
<                 idTextView.setTag(R.id.id_dc, avatar.dc_id);
<             } else {
<                 idTextView.setText("", animated);
<             }
<         }
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ProxyListActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ProxyListActivity.java
72,78d71
< import top.qwq2333.nullgram.activity.WsSettingsActivity;
< import top.qwq2333.nullgram.helpers.WebSocketHelper;
< import top.qwq2333.nullgram.utils.APKUtils;
< import top.qwq2333.nullgram.utils.AlertUtil;
< import top.qwq2333.nullgram.utils.Log;
< import top.qwq2333.nullgram.utils.UIUtil;
< 
162,168c155
<             checkImageView.setOnClickListener(v -> {
<                 if (WebSocketHelper.proxyServer.equals(currentInfo.address)) {
<                     presentFragment(new WsSettingsActivity(currentInfo));
<                 } else {
<                     presentFragment(new ProxySettingsActivity(currentInfo));
<                 }
<             });
---
>             checkImageView.setOnClickListener(v -> presentFragment(new ProxySettingsActivity(currentInfo)));
185,187d171
<             if (WebSocketHelper.proxyServer.equals(proxyInfo.address)) {
<                 textView.setText(LocaleController.getString("PublicProxy", R.string.PublicProxy));
<             } else {
189d172
<             }
574,578d556
<                         for (SharedConfig.ProxyInfo info : selectedItems) {
<                             if (info.address.equals(WebSocketHelper.proxyServer)) {
<                                 break;
<                             }
<                         }
611,615d588
<                         for (SharedConfig.ProxyInfo info : selectedItems) {
<                             if (info.address.equals(WebSocketHelper.proxyServer)) {
<                                 break;
<                             }
<                         }
845,887d817
<     public void checkSingleProxy(SharedConfig.ProxyInfo proxyInfo, int repeat, Runnable callback) {
<         UIUtil.runOnIoDispatcher(() -> {
<             if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && !((SharedConfig.ExternalSocks5Proxy) proxyInfo).isStarted()) {
<                 try {
<                     ((SharedConfig.ExternalSocks5Proxy) proxyInfo).start();
<                 } catch (Exception e) {
<                     Log.e(e);
<                     AlertUtil.showToast(e);
<                 }
<                 APKUtils.sleep(233L);
<             }
<             proxyInfo.proxyCheckPingId = ConnectionsManager.getInstance(currentAccount).checkProxy(proxyInfo.address, proxyInfo.port, proxyInfo.username, proxyInfo.password, proxyInfo.secret, time -> AndroidUtilities.runOnUIThread(() -> {
<                 if (time == -1) {
<                     if (repeat > 0) {
<                         checkSingleProxy(proxyInfo, repeat - 1, callback);
<                     } else {
<                         proxyInfo.availableCheckTime = SystemClock.elapsedRealtime();
<                         proxyInfo.checking = false;
<                         proxyInfo.available = false;
<                         proxyInfo.ping = 0;
<                         if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && proxyInfo != SharedConfig.currentProxy) {
<                             ((SharedConfig.ExternalSocks5Proxy) proxyInfo).stop();
<                         }
<                         if (callback != null) {
<                             UIUtil.runOnUIThread(callback);
<                         }
<                     }
<                 } else {
<                     proxyInfo.availableCheckTime = SystemClock.elapsedRealtime();
<                     proxyInfo.checking = false;
<                     proxyInfo.ping = time;
<                     proxyInfo.available = true;
<                     if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && proxyInfo != SharedConfig.currentProxy) {
<                         ((SharedConfig.ExternalSocks5Proxy) proxyInfo).stop();
<                     }
<                     if (callback != null) {
<                         UIUtil.runOnUIThread(callback);
<                     }
<                 }
<             }));
<         });
<     }
< 
914,917d843
<             if (info.address.equals(WebSocketHelper.proxyServer)) {
<                 return;
<             }
< 
1010d935
<                     if (!info.address.equals(WebSocketHelper.proxyServer)) {
1012d936
<                     }
1039,1040d962
<                 SharedConfig.ProxyInfo info = proxyList.get(position - proxyStartRow);
<                 if (!info.address.equals(WebSocketHelper.proxyServer)) {
1046d967
<                     }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/QrActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/QrActivity.java
5,6d4
< import android.animation.AnimatorSet;
< import android.animation.ObjectAnimator;
46d43
< import android.view.animation.DecelerateInterpolator;
577,604d573
<     @Override
<     public AnimatorSet onCustomTransitionAnimation(boolean isOpen, Runnable callback) {
<         if (isOpen) {
<             fragmentView.setAlpha(0f);
<             fragmentView.setTranslationX(AndroidUtilities.dp(48));
<         }
< 
<         AnimatorSet animator = new AnimatorSet();
<         animator.playTogether(
<             ObjectAnimator.ofFloat(fragmentView, View.TRANSLATION_X, isOpen ? 0 : AndroidUtilities.dp(48)),
<             ObjectAnimator.ofFloat(fragmentView, View.ALPHA, isOpen ? 1f : 0f)
<         );
<         if (!isOpen)
<             animator.setInterpolator(new DecelerateInterpolator(1.5f));
<         else
<             animator.setInterpolator(CubicBezierInterpolator.EASE_IN);
<         animator.setDuration(isOpen ? 200 : 150);
<         animator.addListener(new AnimatorListenerAdapter() {
<             @Override
<             public void onAnimationEnd(Animator animator) {
<                 if (callback != null)
<                     callback.run();
<             }
<         });
<         animator.start();
<         return animator;
<     }
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/QuickRepliesSettingsActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/QuickRepliesSettingsActivity.java
19,21d18
< import androidx.recyclerview.widget.LinearLayoutManager;
< import androidx.recyclerview.widget.RecyclerView;
< 
36a34,36
> 
> import androidx.recyclerview.widget.LinearLayoutManager;
> import androidx.recyclerview.widget.RecyclerView;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java
14a15
> import android.animation.ValueAnimator;
29a31
> import androidx.annotation.Keep;
43,44d44
< import androidx.annotation.Keep;
< 
50,51d49
< import org.telegram.messenger.FileLoader;
< import org.telegram.messenger.FileLog;
56a55,56
> import org.telegram.messenger.FileLoader;
> import org.telegram.messenger.FileLog;
57a58
> import org.telegram.messenger.SharedConfig;
63a65
> import org.telegram.ui.Components.CubicBezierInterpolator;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/SelectAnimatedEmojiDialog.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/SelectAnimatedEmojiDialog.java
28a29
> import android.util.Log;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/SessionBottomSheet.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/SessionBottomSheet.java
8a9
> import android.os.Build;
31a33,34
> import org.telegram.ui.Cells.SessionCell;
> import org.telegram.ui.Cells.TextCheckCell2;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/SponsoredMessageInfoView.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/SponsoredMessageInfoView.java
3a4
> import android.content.Context;
4a6
> import android.graphics.Color;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
118d117
<     private int playEmojiInKeyboardRow;
465,468d463
<             } else if (position == playEmojiInKeyboardRow) {
<                 SharedConfig.togglePlayEmojiInKeyboard();
<                 AnimatedEmojiDrawable.updateAll();
<                 ((TextCheckCell) view).setChecked(SharedConfig.playEmojiInKeyboard);
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
2168c2168
<                 case TYPE_APP_ICON: {
---
>                 case TYPE_APP_ICON:
2171d2170
<                 }
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/TooManyCommunitiesActivity.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/TooManyCommunitiesActivity.java
35a36
> import org.telegram.ui.Cells.TooManyCommunitiesHintCell;
40d40
< import org.telegram.ui.Cells.TooManyCommunitiesHintCell;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/telegram/ui/TopicsFragment.java ../Tele/TMessagesProj/src/main/java/org/telegram/ui/TopicsFragment.java
54a55,56
> import com.google.android.exoplayer2.util.Log;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/AndroidVideoDecoder.java ../Tele/TMessagesProj/src/main/java/org/webrtc/AndroidVideoDecoder.java
17,18d16
< import android.view.Surface;
< 
20,23c18
< 
< import org.telegram.messenger.FileLog;
< import org.webrtc.ThreadUtils.ThreadChecker;
< 
---
> import android.view.Surface;
28a24,26
> 
> import org.telegram.messenger.FileLog;
> import org.webrtc.ThreadUtils.ThreadChecker;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/JavaAudioDeviceModule.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/JavaAudioDeviceModule.java
17d16
< import android.media.AudioRecord;
21c19
< 
---
> import java.util.concurrent.ScheduledExecutorService;
24,25d21
< 
< import java.util.concurrent.ScheduledExecutorService;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/VolumeLogger.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/VolumeLogger.java
16,18d14
< 
< import org.webrtc.Logging;
< 
20a17
> import org.webrtc.Logging;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioEffects.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioEffects.java
20,22d18
< 
< import org.webrtc.Logging;
< 
23a20
> import org.webrtc.Logging;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioManager.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioManager.java
20,21d19
< 
< import org.webrtc.CalledByNative;
22a21
> import org.webrtc.CalledByNative;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioRecord.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioRecord.java
19a20
> import android.media.AudioTimestamp;
27,33c27
< import org.webrtc.CalledByNative;
< import org.webrtc.Logging;
< import org.webrtc.ThreadUtils;
< import org.webrtc.audio.JavaAudioDeviceModule.AudioRecordErrorCallback;
< import org.webrtc.audio.JavaAudioDeviceModule.AudioRecordStartErrorCode;
< import org.webrtc.audio.JavaAudioDeviceModule.AudioRecordStateCallback;
< import org.webrtc.audio.JavaAudioDeviceModule.SamplesReadyCallback;
---
> import com.google.android.exoplayer2.util.Log;
34a29
> import java.lang.System;
46a42,48
> import org.webrtc.CalledByNative;
> import org.webrtc.Logging;
> import org.webrtc.ThreadUtils;
> import org.webrtc.audio.JavaAudioDeviceModule.AudioRecordErrorCallback;
> import org.webrtc.audio.JavaAudioDeviceModule.AudioRecordStartErrorCode;
> import org.webrtc.audio.JavaAudioDeviceModule.AudioRecordStateCallback;
> import org.webrtc.audio.JavaAudioDeviceModule.SamplesReadyCallback;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioTrack.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioTrack.java
23c22
< 
---
> import java.nio.ByteBuffer;
30,31c29
< 
< import java.nio.ByteBuffer;
---
> import org.webrtc.audio.LowLatencyAudioBufferManager;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioUtils.java ../Tele/TMessagesProj/src/main/java/org/webrtc/audio/WebRtcAudioUtils.java
26,28c26
< 
< import org.webrtc.Logging;
< 
---
> import java.lang.Thread;
29a28
> import org.webrtc.Logging;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/Camera1Enumerator.java ../Tele/TMessagesProj/src/main/java/org/webrtc/Camera1Enumerator.java
16,18d14
< 
< import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
< 
20a17
> import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/Camera1Session.java ../Tele/TMessagesProj/src/main/java/org/webrtc/Camera1Session.java
17,19d16
< 
< import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
< 
23a21
> import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/Camera2Enumerator.java ../Tele/TMessagesProj/src/main/java/org/webrtc/Camera2Enumerator.java
22a23
> import androidx.annotation.Nullable;
25,29d25
< 
< import androidx.annotation.Nullable;
< 
< import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
< 
33a30
> import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/Camera2Session.java ../Tele/TMessagesProj/src/main/java/org/webrtc/Camera2Session.java
23a24
> import androidx.annotation.Nullable;
27,30d27
< import androidx.annotation.Nullable;
< 
< import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
< 
33a31,32
> 
> import org.webrtc.CameraEnumerationAndroid.CaptureFormat;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/CameraSession.java ../Tele/TMessagesProj/src/main/java/org/webrtc/CameraSession.java
15d14
< import android.view.Surface;
16a16
> import android.view.Surface;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/EglBase.java ../Tele/TMessagesProj/src/main/java/org/webrtc/EglBase.java
14,15d13
< import android.view.Surface;
< 
17c15
< 
---
> import android.view.Surface;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/EglBase10Impl.java ../Tele/TMessagesProj/src/main/java/org/webrtc/EglBase10Impl.java
16,17d15
< import android.view.Surface;
< import android.view.SurfaceHolder;
19a18,20
> 
> import android.view.Surface;
> import android.view.SurfaceHolder;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/EglBase14.java ../Tele/TMessagesProj/src/main/java/org/webrtc/EglBase14.java
13a14
> import android.view.Surface;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/EglBase14Impl.java ../Tele/TMessagesProj/src/main/java/org/webrtc/EglBase14Impl.java
22,23d21
< import android.view.Surface;
< 
24a23,24
> import android.view.Surface;
> import org.webrtc.EglBase;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/EglRenderer.java ../Tele/TMessagesProj/src/main/java/org/webrtc/EglRenderer.java
21,22d20
< import android.view.Surface;
< 
23a22
> import android.view.Surface;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/GlGenericDrawer.java ../Tele/TMessagesProj/src/main/java/org/webrtc/GlGenericDrawer.java
17,18d16
< import androidx.annotation.Nullable;
< 
19a18,19
> 
> import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/H264Utils.java ../Tele/TMessagesProj/src/main/java/org/webrtc/H264Utils.java
13d12
< import java.util.HashMap;
14a14
> import java.util.HashMap;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/HardwareVideoDecoderFactory.java ../Tele/TMessagesProj/src/main/java/org/webrtc/HardwareVideoDecoderFactory.java
15,16d14
< import androidx.annotation.Nullable;
< 
18a17,18
> 
> import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/HardwareVideoEncoder.java ../Tele/TMessagesProj/src/main/java/org/webrtc/HardwareVideoEncoder.java
19,20d18
< import android.view.Surface;
< 
22,24c20
< 
< import org.webrtc.ThreadUtils.ThreadChecker;
< 
---
> import android.view.Surface;
30a27
> import org.webrtc.ThreadUtils.ThreadChecker;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/IceCandidate.java ../Tele/TMessagesProj/src/main/java/org/webrtc/IceCandidate.java
15a15
> import org.webrtc.PeerConnection;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/JavaI420Buffer.java ../Tele/TMessagesProj/src/main/java/org/webrtc/JavaI420Buffer.java
14,16d13
< 
< import org.webrtc.VideoFrame.I420Buffer;
< 
17a15
> import org.webrtc.VideoFrame.I420Buffer;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/JNILogging.java ../Tele/TMessagesProj/src/main/java/org/webrtc/JNILogging.java
12a13,14
> import org.webrtc.CalledByNative;
> import org.webrtc.Loggable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/Logging.java ../Tele/TMessagesProj/src/main/java/org/webrtc/Logging.java
19a19
> import org.webrtc.Loggable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/MediaCodecVideoDecoderFactory.java ../Tele/TMessagesProj/src/main/java/org/webrtc/MediaCodecVideoDecoderFactory.java
17a18
> import android.media.MediaCodecList;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/NativeAndroidVideoTrackSource.java ../Tele/TMessagesProj/src/main/java/org/webrtc/NativeAndroidVideoTrackSource.java
13a14,15
> import org.webrtc.VideoFrame;
> import org.webrtc.VideoProcessor;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/NativeCapturerObserver.java ../Tele/TMessagesProj/src/main/java/org/webrtc/NativeCapturerObserver.java
12a13,14
> import org.webrtc.VideoFrame;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/NetworkMonitor.java ../Tele/TMessagesProj/src/main/java/org/webrtc/NetworkMonitor.java
19a18
> import org.webrtc.NetworkChangeDetector;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/NetworkMonitorAutoDetect.java ../Tele/TMessagesProj/src/main/java/org/webrtc/NetworkMonitorAutoDetect.java
31,32d30
< import android.telephony.TelephonyManager;
< 
34c32
< 
---
> import android.telephony.TelephonyManager;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/PeerConnection.java ../Tele/TMessagesProj/src/main/java/org/webrtc/PeerConnection.java
20a20,23
> import org.webrtc.CandidatePairChangeEvent;
> import org.webrtc.DataChannel;
> import org.webrtc.MediaStreamTrack;
> import org.webrtc.RtpTransceiver;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/PeerConnectionFactory.java ../Tele/TMessagesProj/src/main/java/org/webrtc/PeerConnectionFactory.java
17c16
< 
---
> import java.util.List;
18a18
> import org.webrtc.PeerConnection;
21,22d20
< 
< import java.util.List;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/PlatformSoftwareVideoDecoderFactory.java ../Tele/TMessagesProj/src/main/java/org/webrtc/PlatformSoftwareVideoDecoderFactory.java
15a15
> import java.util.Arrays;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/RtcCertificatePem.java ../Tele/TMessagesProj/src/main/java/org/webrtc/RtcCertificatePem.java
12a13,14
> import org.webrtc.PeerConnection;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/RtpParameters.java ../Tele/TMessagesProj/src/main/java/org/webrtc/RtpParameters.java
14c14,15
< 
---
> import java.lang.Double;
> import java.lang.String;
16a18
> import org.webrtc.MediaStreamTrack;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/RtpReceiver.java ../Tele/TMessagesProj/src/main/java/org/webrtc/RtpReceiver.java
13a14
> import org.webrtc.MediaStreamTrack;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/RtpTransceiver.java ../Tele/TMessagesProj/src/main/java/org/webrtc/RtpTransceiver.java
15a16,17
> import org.webrtc.MediaStreamTrack;
> import org.webrtc.RtpParameters;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/ScreenCapturerAndroid.java ../Tele/TMessagesProj/src/main/java/org/webrtc/ScreenCapturerAndroid.java
21,22d20
< import android.view.Surface;
< 
23a22
> import android.view.Surface;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/SurfaceTextureHelper.java ../Tele/TMessagesProj/src/main/java/org/webrtc/SurfaceTextureHelper.java
22c21
< 
---
> import java.util.concurrent.Callable;
26,27d24
< 
< import java.util.concurrent.Callable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/TextureBufferImpl.java ../Tele/TMessagesProj/src/main/java/org/webrtc/TextureBufferImpl.java
16,17d15
< import androidx.annotation.Nullable;
< 
20a19,20
> 
> import androidx.annotation.Nullable;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/VideoDecoderWrapper.java ../Tele/TMessagesProj/src/main/java/org/webrtc/VideoDecoderWrapper.java
12a13,14
> import org.webrtc.VideoDecoder;
> 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/VideoEncoderWrapper.java ../Tele/TMessagesProj/src/main/java/org/webrtc/VideoEncoderWrapper.java
15a15
> import org.webrtc.VideoEncoder;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioEffects.java ../Tele/TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioEffects.java
19a19,20
> import java.util.List;
> import java.util.UUID;
23,25d23
< 
< import java.util.List;
< import java.util.UUID;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioManager.java ../Tele/TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioManager.java
22,25d20
< 
< import org.webrtc.ContextUtils;
< import org.webrtc.Logging;
< 
27a23,24
> import org.webrtc.ContextUtils;
> import org.webrtc.Logging;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioRecord.java ../Tele/TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioRecord.java
23a23,26
> import java.lang.System;
> import java.nio.ByteBuffer;
> import java.nio.ByteOrder;
> import java.util.Arrays;
29,32d31
< 
< import java.nio.ByteBuffer;
< import java.nio.ByteOrder;
< import java.util.Arrays;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioUtils.java ../Tele/TMessagesProj/src/main/java/org/webrtc/voiceengine/WebRtcAudioUtils.java
23,26c23
< 
< import org.webrtc.ContextUtils;
< import org.webrtc.Logging;
< 
---
> import java.lang.Thread;
28a26,27
> import org.webrtc.ContextUtils;
> import org.webrtc.Logging;
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/java/org/webrtc/YuvConverter.java ../Tele/TMessagesProj/src/main/java/org/webrtc/YuvConverter.java
14a15
> import java.nio.ByteBuffer;
19,20d19
< 
< import java.nio.ByteBuffer;
Only in TMessagesProj/src/main/java: top
Only in TMessagesProj/src/main/res/anim: shrink_fade_out_center.xml
Only in TMessagesProj/src/main/res/drawable: baseline_block_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_cancel_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_check_circle_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_delete_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_delete_sweep_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_done_all_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_security_24.xml
Only in TMessagesProj/src/main/res/drawable: baseline_system_update_24.xml
Only in TMessagesProj/src/main/res/drawable: ic_line_scan.xml
Only in TMessagesProj/src/main/res/drawable: ic_round_swap_horiz_24.xml
Only in TMessagesProj/src/main/res/drawable: ic_select_between.xml
Only in TMessagesProj/src/main/res/drawable: icon.png
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_2_background.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_2_background_round.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_3_background.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_3_background_round.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_4_background.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_4_background_round.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_5_background.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_5_background_round.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_6_background.xml
Only in ../Tele/TMessagesProj/src/main/res/drawable: icon_6_background_round.xml
Binary files TMessagesProj/src/main/res/drawable/icplaceholder.jpg and ../Tele/TMessagesProj/src/main/res/drawable/icplaceholder.jpg differ
Only in TMessagesProj/src/main/res/drawable: msg_noquote_forward.xml
Only in TMessagesProj/src/main/res/drawable: sticker.webp
Only in TMessagesProj/src/main/res/drawable-hdpi: actions_reactions.png
Only in TMessagesProj/src/main/res/drawable-hdpi: contacts_sort_name.png
Only in TMessagesProj/src/main/res/drawable-hdpi: contacts_sort_time.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_airplane.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_all.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_book.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_bots.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_cat.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_channels.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_crown.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_custom.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_edit.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_favorite.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_flower.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_game.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_group.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_home.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_light.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_like.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_love.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_mask.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_money.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_note.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_palette.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_party.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_poo.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_private.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_setup.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_sport.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_study.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_trade.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_travel.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_unmuted.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_unread.png
Only in TMessagesProj/src/main/res/drawable-hdpi: filter_work.png
Only in TMessagesProj/src/main/res/drawable-hdpi: icon_1.png
Only in TMessagesProj/src/main/res/drawable-hdpi: icon_2.png
Only in TMessagesProj/src/main/res/drawable-hdpi: icon_3.png
Only in TMessagesProj/src/main/res/drawable-hdpi: icon_4.png
Only in TMessagesProj/src/main/res/drawable-hdpi: icon_5.png
Only in TMessagesProj/src/main/res/drawable-hdpi: mainicon.png
Only in TMessagesProj/src/main/res/drawable-hdpi: menu_chats.png
Only in TMessagesProj/src/main/res/drawable-hdpi: menu_clear.png
Only in TMessagesProj/src/main/res/drawable-hdpi: menu_date.png
Only in TMessagesProj/src/main/res/drawable-hdpi: menu_read.png
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_delete.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_delete.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_delete_auto.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_delete_auto.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_inputarrow.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_inputarrow.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_mini_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_mini_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_mini_autodelete_empty.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_mini_autodelete_empty.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_mute.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_mute.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_mute_period.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_mute_period.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_reactions.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_reactions.png differ
Only in TMessagesProj/src/main/res/drawable-hdpi: msg_repeat.png
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_tone_add.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_tone_add.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_tone_off.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_tone_off.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_tone_on.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_tone_on.png differ
Binary files TMessagesProj/src/main/res/drawable-hdpi/msg_unmute.png and ../Tele/TMessagesProj/src/main/res/drawable-hdpi/msg_unmute.png differ
Only in TMessagesProj/src/main/res/drawable-hdpi: photo_color_picker.png
Only in TMessagesProj/src/main/res/drawable-mdpi: actions_reactions.png
Only in TMessagesProj/src/main/res/drawable-mdpi: contacts_sort_name.png
Only in TMessagesProj/src/main/res/drawable-mdpi: contacts_sort_time.png
Only in TMessagesProj/src/main/res/drawable-mdpi: files_empty.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_airplane.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_all.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_book.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_bots.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_cat.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_channels.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_crown.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_custom.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_edit.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_favorite.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_flower.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_game.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_group.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_home.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_light.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_like.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_love.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_mask.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_money.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_note.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_palette.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_party.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_poo.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_private.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_setup.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_sport.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_study.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_trade.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_travel.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_unmuted.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_unread.png
Only in TMessagesProj/src/main/res/drawable-mdpi: filter_work.png
Only in TMessagesProj/src/main/res/drawable-mdpi: menu_chats.png
Only in TMessagesProj/src/main/res/drawable-mdpi: menu_clear.png
Only in TMessagesProj/src/main/res/drawable-mdpi: menu_date.png
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_delete.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_delete.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_delete_auto.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_delete_auto.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_inputarrow.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_inputarrow.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_mini_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_mini_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_mini_autodelete_empty.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_mini_autodelete_empty.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_mute.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_mute.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_mute_period.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_mute_period.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_reactions.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_reactions.png differ
Only in TMessagesProj/src/main/res/drawable-mdpi: msg_repeat.png
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_report_drugs.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_report_drugs.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_tone_add.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_tone_add.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_tone_off.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_tone_off.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_tone_on.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_tone_on.png differ
Binary files TMessagesProj/src/main/res/drawable-mdpi/msg_unmute.png and ../Tele/TMessagesProj/src/main/res/drawable-mdpi/msg_unmute.png differ
Only in TMessagesProj/src/main/res/drawable-mdpi: photo_color_picker.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: actions_reactions.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: contacts_sort_name.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: contacts_sort_time.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_airplane.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_all.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_book.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_bots.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_cat.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_channels.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_crown.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_custom.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_edit.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_favorite.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_flower.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_game.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_group.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_home.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_light.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_like.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_love.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_mask.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_money.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_note.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_palette.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_party.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_poo.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_private.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_setup.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_sport.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_study.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_trade.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_travel.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_unmuted.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_unread.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: filter_work.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: menu_chats.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: menu_clear.png
Only in TMessagesProj/src/main/res/drawable-xhdpi: menu_date.png
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_customize.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_customize.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_delete.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_delete.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_delete_auto.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_delete_auto.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_inputarrow.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_inputarrow.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_mini_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_mini_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_mini_autodelete_empty.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_mini_autodelete_empty.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_mute.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_mute.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_mute_period.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_mute_period.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_reactions.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_reactions.png differ
Only in TMessagesProj/src/main/res/drawable-xhdpi: msg_repeat.png
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_report_drugs.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_report_drugs.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_report_personal.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_report_personal.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_silent.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_silent.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_tone_add.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_tone_add.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_tone_off.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_tone_off.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_tone_on.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_tone_on.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_unmute.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_unmute.png differ
Binary files TMessagesProj/src/main/res/drawable-xhdpi/msg_videocall.png and ../Tele/TMessagesProj/src/main/res/drawable-xhdpi/msg_videocall.png differ
Only in TMessagesProj/src/main/res/drawable-xhdpi: photo_color_picker.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: actions_reactions.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: contacts_sort_name.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: contacts_sort_time.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_airplane.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_all.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_book.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_bots.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_cat.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_channels.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_crown.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_custom.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_edit.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_favorite.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_flower.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_game.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_group.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_home.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_light.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_like.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_love.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_mask.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_money.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_note.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_palette.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_party.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_poo.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_private.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_setup.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_sport.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_study.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_trade.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_travel.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_unmuted.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_unread.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: filter_work.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: menu_chats.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: menu_clear.png
Only in TMessagesProj/src/main/res/drawable-xxhdpi: menu_date.png
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_delete.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_delete.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_delete_auto.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_delete_auto.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_inputarrow.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_inputarrow.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_mini_autodelete.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_mini_autodelete.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_mini_autodelete_empty.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_mini_autodelete_empty.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_mute.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_mute.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_mute_period.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_mute_period.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_reactions.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_reactions.png differ
Only in TMessagesProj/src/main/res/drawable-xxhdpi: msg_repeat.png
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_tone_add.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_tone_add.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_tone_off.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_tone_off.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_tone_on.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_tone_on.png differ
Binary files TMessagesProj/src/main/res/drawable-xxhdpi/msg_unmute.png and ../Tele/TMessagesProj/src/main/res/drawable-xxhdpi/msg_unmute.png differ
Only in TMessagesProj/src/main/res/drawable-xxhdpi: photo_color_picker.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_2_background_sa.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_3_background_sa.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_4_background_sa.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_5_background_sa.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_6_background_sa.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_background_clip.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_background_clip_round.png
Only in ../Tele/TMessagesProj/src/main/res/drawable-xxxhdpi: icon_background_sa.png
Only in TMessagesProj/src/main/res/layout: simple_license_item.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_icon.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_icon_1.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_icon_2.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_icon_3.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_icon_4.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_icon_5.xml
Only in TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_mainicon.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_round.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: ic_launcher_sa.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_2_launcher.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_2_launcher_round.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_2_launcher_sa.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_3_launcher.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_3_launcher_round.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_3_launcher_sa.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_4_launcher.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_4_launcher_round.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_4_launcher_sa.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_5_launcher.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_5_launcher_round.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_5_launcher_sa.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_6_launcher.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_6_launcher_round.xml
Only in ../Tele/TMessagesProj/src/main/res/mipmap-anydpi-v26: icon_6_launcher_sa.xml
Only in ../Tele/TMessagesProj/src/main/res: mipmap-hdpi
Only in ../Tele/TMessagesProj/src/main/res: mipmap-mdpi
Only in ../Tele/TMessagesProj/src/main/res: mipmap-xhdpi
Only in ../Tele/TMessagesProj/src/main/res: mipmap-xxhdpi
Only in ../Tele/TMessagesProj/src/main/res: mipmap-xxxhdpi
Only in TMessagesProj/src/main/res/raw: cc_by_nc_sa_40_full.txt
Only in TMessagesProj/src/main/res/raw: cc_by_nc_sa_40_summary.txt
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/gigagroup.svg ../Tele/TMessagesProj/src/main/res/raw/gigagroup.svg
2,6c2
< <svg width="936px"
<     height="372px"
<     viewBox="0 0 936 372"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="936px" height="372px" viewBox="0 0 936 372" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/permission_map.svg ../Tele/TMessagesProj/src/main/res/raw/permission_map.svg
2,6c2
< <svg width="936px"
<     height="354px"
<     viewBox="0 0 936 354"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="936px" height="354px" viewBox="0 0 936 354" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/permission_map_dark.svg ../Tele/TMessagesProj/src/main/res/raw/permission_map_dark.svg
2,6c2
< <svg width="936px"
<     height="354px"
<     viewBox="0 0 936 354"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="936px" height="354px" viewBox="0 0 936 354" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/permission_pin.svg ../Tele/TMessagesProj/src/main/res/raw/permission_pin.svg
2,6c2
< <svg width="178px"
<     height="248px"
<     viewBox="0 0 178 248"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="178px" height="248px" viewBox="0 0 178 248" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/permission_pin_dark.svg ../Tele/TMessagesProj/src/main/res/raw/permission_pin_dark.svg
2,6c2
< <svg width="178px"
<     height="248px"
<     viewBox="0 0 178 248"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="178px" height="248px" viewBox="0 0 178 248" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/pip_video_request.svg ../Tele/TMessagesProj/src/main/res/raw/pip_video_request.svg
2,6c2
< <svg width="946px"
<     height="472px"
<     viewBox="0 0 946 472"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg"><rect id="Rectangle" fill="#2C506C" x="84" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy" fill="#634248" x="694" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-4" fill="#30573D" x="288" y="88" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-2" fill="#274F5B" x="287.101673" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-3" fill="#5E553D" x="490.203346" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-5" fill="#32506D" x="84.2033462" y="88" width="124.694981" height="124.694981" rx="35.8970399"></rect><path d="M114.683088,350.207664 C131.781225,342.639383 143.182662,337.64991 148.887397,335.239243 C165.175575,328.356299 168.560119,327.160658 170.766117,327.121177 C171.251306,327.112494 171.771117,326.747873 172.473834,327.32718 C173.067195,327.816336 173.795488,328.9639 173.873612,329.427674 C173.951736,329.891447 174.049019,330.947935 173.971686,331.773443 C173.089024,341.195669 169.269759,364.060924 167.326734,374.613978 C166.504567,379.07937 163.580778,379.817589 162.013522,379.964112 C158.607513,380.282541 157.326062,378.436263 154.027176,376.239288 C148.865071,372.801457 146.00237,370.602374 140.938092,367.306707 C136.957806,364.716467 138.957537,363.031573 142.257668,359.54921 C143.121329,358.637859 158.527687,343.33741 158.818147,342.079379 C158.854474,341.922042 158.43249,341.035556 158.089545,340.725873 C157.746601,340.416189 157.240444,340.522089 156.875188,340.606312 C156.357448,340.725695 148.110917,346.263339 132.135596,357.219244 C129.794846,358.852237 127.674667,359.647887 125.775059,359.606192 C123.680894,359.560226 119.652561,358.403221 116.65791,357.414241 C112.984848,356.201218 111.778341,355.78784 112.032544,353.72775 C112.164949,352.654728 113.048464,351.481366 114.683088,350.207664 Z" id="Plane-Copy" fill="#A5A7AA"></path><circle id="Oval" fill="#A5A7AA" cx="349" cy="352" r="9"></circle><path d="M373,328 L363.49,328 L359.77,323.95 C358.66,322.72 357.04,322 355.36,322 L342.64,322 C340.96,322 339.34,322.72 338.2,323.95 L334.51,328 L325,328 C321.7,328 319,330.7 319,334 L319,370 C319,373.3 321.7,376 325,376 L373,376 C376.3,376 379,373.3 379,370 L379,334 C379,330.7 376.3,328 373,328 Z M349,367 C340.72,367 334,360.28 334,352 C334,343.72 340.72,337 349,337 C357.28,337 364,343.72 364,352 C364,360.28 357.28,367 349,367 Z" id="Shape" fill="#A5A7AA"></path><path d="M373.133775,161.603959 L365.119532,160.688942 C363.194852,160.468076 361.301723,161.130674 359.944981,162.487424 L354.139388,168.293048 C345.210133,163.749516 337.890038,156.460933 333.34653,147.500077 L339.183675,141.6629 C340.540417,140.306151 341.203012,138.413012 340.982147,136.488321 L340.067135,128.53714 C339.688509,125.350356 337.006578,122.952381 333.78826,122.952381 L328.32974,122.952381 C324.764349,122.952381 321.798448,125.918298 322.019313,129.483709 C323.691576,156.42938 345.241686,177.948055 372.155659,179.620327 C375.72105,179.841193 378.687561,176.875276 378.687561,173.309865 L378.687561,167.851316 C378.718503,164.664533 376.320541,161.982586 373.133775,161.603959 Z" id="Path-Copy-2" fill="#A5A7AA"></path><path d="M168.5,128 L124.5,128 C121.475,128 119.0275,130.475 119.0275,133.5 L119,166.5 C119,169.525 121.475,172 124.5,172 L168.5,172 C171.525,172 174,169.525 174,166.5 L174,133.5 C174,130.475 171.525,128 168.5,128 Z M167.4,140.6875 L147.9575,152.8425 C147.0775,153.3925 145.9225,153.3925 145.0425,152.8425 L125.6,140.6875 C124.9125,140.2475 124.5,138.505 124.5,137.7075 C124.5,135.865 126.5075,134.765 128.075,135.7275 L146.5,147.25 L164.925,135.7275 C166.4925,134.765 168.5,135.865 168.5,137.7075 C168.5,138.505 168.0875,140.2475 167.4,140.6875 Z" id="Shape-Copy" fill="#A5A7AA"></path><rect id="path-1" fill="#2EA3EF" x="439" y="59" width="427" height="328" rx="22"></rect><path d="M650,163 C616.88,163 590,189.88 590,223 C590,256.12 616.88,283 650,283 C683.12,283 710,256.12 710,223 C710,189.88 683.12,163 650,163 Z M638,244 L638,202 C638,199.54 640.82,198.1 642.8,199.6 L672.82,220.6 C674.44,221.8 674.44,224.2 672.82,225.4 L642.8,246.4 C640.82,247.9 638,246.46 638,244 Z" id="Shape" fill="#FFFFFF"></path>
---
> <svg width="946px" height="472px" viewBox="0 0 946 472" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><rect id="Rectangle" fill="#2C506C" x="84" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy" fill="#634248" x="694" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-4" fill="#30573D" x="288" y="88" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-2" fill="#274F5B" x="287.101673" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-3" fill="#5E553D" x="490.203346" y="288" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-5" fill="#32506D" x="84.2033462" y="88" width="124.694981" height="124.694981" rx="35.8970399"></rect><path d="M114.683088,350.207664 C131.781225,342.639383 143.182662,337.64991 148.887397,335.239243 C165.175575,328.356299 168.560119,327.160658 170.766117,327.121177 C171.251306,327.112494 171.771117,326.747873 172.473834,327.32718 C173.067195,327.816336 173.795488,328.9639 173.873612,329.427674 C173.951736,329.891447 174.049019,330.947935 173.971686,331.773443 C173.089024,341.195669 169.269759,364.060924 167.326734,374.613978 C166.504567,379.07937 163.580778,379.817589 162.013522,379.964112 C158.607513,380.282541 157.326062,378.436263 154.027176,376.239288 C148.865071,372.801457 146.00237,370.602374 140.938092,367.306707 C136.957806,364.716467 138.957537,363.031573 142.257668,359.54921 C143.121329,358.637859 158.527687,343.33741 158.818147,342.079379 C158.854474,341.922042 158.43249,341.035556 158.089545,340.725873 C157.746601,340.416189 157.240444,340.522089 156.875188,340.606312 C156.357448,340.725695 148.110917,346.263339 132.135596,357.219244 C129.794846,358.852237 127.674667,359.647887 125.775059,359.606192 C123.680894,359.560226 119.652561,358.403221 116.65791,357.414241 C112.984848,356.201218 111.778341,355.78784 112.032544,353.72775 C112.164949,352.654728 113.048464,351.481366 114.683088,350.207664 Z" id="Plane-Copy" fill="#A5A7AA"></path><circle id="Oval" fill="#A5A7AA" cx="349" cy="352" r="9"></circle><path d="M373,328 L363.49,328 L359.77,323.95 C358.66,322.72 357.04,322 355.36,322 L342.64,322 C340.96,322 339.34,322.72 338.2,323.95 L334.51,328 L325,328 C321.7,328 319,330.7 319,334 L319,370 C319,373.3 321.7,376 325,376 L373,376 C376.3,376 379,373.3 379,370 L379,334 C379,330.7 376.3,328 373,328 Z M349,367 C340.72,367 334,360.28 334,352 C334,343.72 340.72,337 349,337 C357.28,337 364,343.72 364,352 C364,360.28 357.28,367 349,367 Z" id="Shape" fill="#A5A7AA"></path><path d="M373.133775,161.603959 L365.119532,160.688942 C363.194852,160.468076 361.301723,161.130674 359.944981,162.487424 L354.139388,168.293048 C345.210133,163.749516 337.890038,156.460933 333.34653,147.500077 L339.183675,141.6629 C340.540417,140.306151 341.203012,138.413012 340.982147,136.488321 L340.067135,128.53714 C339.688509,125.350356 337.006578,122.952381 333.78826,122.952381 L328.32974,122.952381 C324.764349,122.952381 321.798448,125.918298 322.019313,129.483709 C323.691576,156.42938 345.241686,177.948055 372.155659,179.620327 C375.72105,179.841193 378.687561,176.875276 378.687561,173.309865 L378.687561,167.851316 C378.718503,164.664533 376.320541,161.982586 373.133775,161.603959 Z" id="Path-Copy-2" fill="#A5A7AA"></path><path d="M168.5,128 L124.5,128 C121.475,128 119.0275,130.475 119.0275,133.5 L119,166.5 C119,169.525 121.475,172 124.5,172 L168.5,172 C171.525,172 174,169.525 174,166.5 L174,133.5 C174,130.475 171.525,128 168.5,128 Z M167.4,140.6875 L147.9575,152.8425 C147.0775,153.3925 145.9225,153.3925 145.0425,152.8425 L125.6,140.6875 C124.9125,140.2475 124.5,138.505 124.5,137.7075 C124.5,135.865 126.5075,134.765 128.075,135.7275 L146.5,147.25 L164.925,135.7275 C166.4925,134.765 168.5,135.865 168.5,137.7075 C168.5,138.505 168.0875,140.2475 167.4,140.6875 Z" id="Shape-Copy" fill="#A5A7AA"></path><rect id="path-1" fill="#2EA3EF" x="439" y="59" width="427" height="328" rx="22"></rect><path d="M650,163 C616.88,163 590,189.88 590,223 C590,256.12 616.88,283 650,283 C683.12,283 710,256.12 710,223 C710,189.88 683.12,163 650,163 Z M638,244 L638,202 C638,199.54 640.82,198.1 642.8,199.6 L672.82,220.6 C674.44,221.8 674.44,224.2 672.82,225.4 L642.8,246.4 C640.82,247.9 638,246.46 638,244 Z" id="Shape" fill="#FFFFFF"></path>
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/pip_voice_request.svg ../Tele/TMessagesProj/src/main/res/raw/pip_voice_request.svg
2,6c2
< <svg width="936px"
<     height="540px"
<     viewBox="0 0 936 540"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg"><rect id="Rectangle" fill="#2C506C" x="100" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy" fill="#30573D" x="710" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-2" fill="#274F5B" x="303.101673" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-3" fill="#2C5548" x="506.203346" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><path d="M130.683088,393.207664 C147.781225,385.639383 159.182662,380.64991 164.887397,378.239243 C181.175575,371.356299 184.560119,370.160658 186.766117,370.121177 C187.251306,370.112494 187.771117,369.747873 188.473834,370.32718 C189.067195,370.816336 189.795488,371.9639 189.873612,372.427674 C189.951736,372.891447 190.049019,373.947935 189.971686,374.773443 C189.089024,384.195669 185.269759,407.060924 183.326734,417.613978 C182.504567,422.07937 179.580778,422.817589 178.013522,422.964112 C174.607514,423.282541 173.326062,421.436263 170.027176,419.239288 C164.865071,415.801457 162.00237,413.602374 156.938092,410.306707 C152.957806,407.716467 154.957536,406.031573 158.257669,402.54921 C159.121329,401.637859 174.527687,386.33741 174.818147,385.079379 C174.854474,384.922042 174.43249,384.035556 174.089545,383.725873 C173.746601,383.416189 173.240444,383.522089 172.875188,383.606312 C172.357448,383.725695 164.110917,389.263339 148.135596,400.219244 C145.794846,401.852237 143.674667,402.647887 141.775059,402.606192 C139.680894,402.560226 135.652561,401.403221 132.65791,400.414241 C128.984847,399.201218 127.778341,398.78784 128.032544,396.72775 C128.164949,395.654728 129.048464,394.481366 130.683088,393.207664 Z" id="Plane-Copy" fill="#A5A7AA"></path><circle id="Oval" fill="#A5A7AA" cx="365" cy="395" r="9"></circle><path d="M389,371 L379.49,371 L375.77,366.95 C374.66,365.72 373.04,365 371.36,365 L358.64,365 C356.96,365 355.34,365.72 354.2,366.95 L350.51,371 L341,371 C337.7,371 335,373.7 335,377 L335,413 C335,416.3 337.7,419 341,419 L389,419 C392.3,419 395,416.3 395,413 L395,377 C395,373.7 392.3,371 389,371 Z M365,410 C356.72,410 350,403.28 350,395 C350,386.72 356.72,380 365,380 C373.28,380 380,386.72 380,395 C380,403.28 373.28,410 365,410 Z" id="Shape" fill="#A5A7AA"></path><path d="M795.133775,404.603959 L787.119532,403.688942 C785.194852,403.468076 783.301723,404.130674 781.944981,405.487423 L776.139388,411.293048 C767.210133,406.749516 759.890038,399.460933 755.34653,390.500077 L761.183675,384.6629 C762.540417,383.306151 763.203012,381.413012 762.982147,379.488321 L762.067135,371.53714 C761.688509,368.350356 759.006578,365.952381 755.78826,365.952381 L750.32974,365.952381 C746.764349,365.952381 743.798448,368.918298 744.019313,372.483709 C745.691576,399.42938 767.241686,420.948055 794.155659,422.620327 C797.72105,422.841193 800.687561,419.875276 800.687561,416.309865 L800.687561,410.851316 C800.718503,407.664533 798.320541,404.982587 795.133775,404.603959 Z" id="Path-Copy" fill="#A5A7AA"></path><path d="M590.5,371 L546.5,371 C543.475,371 541.0275,373.475 541.0275,376.5 L541,409.5 C541,412.525 543.475,415 546.5,415 L590.5,415 C593.525,415 596,412.525 596,409.5 L596,376.5 C596,373.475 593.525,371 590.5,371 Z M589.4,383.6875 L569.9575,395.8425 C569.0775,396.3925 567.9225,396.3925 567.0425,395.8425 L547.6,383.6875 C546.9125,383.2475 546.5,381.505 546.5,380.7075 C546.5,378.865 548.5075,377.765 550.075,378.7275 L568.5,390.25 L586.925,378.7275 C588.4925,377.765 590.5,378.865 590.5,380.7075 C590.5,381.505 590.0875,383.2475 589.4,383.6875 Z" id="Shape" fill="#A5A7AA"></path><rect id="Combined-Shape" fill="#254D5E" x="159" y="84" width="433" height="136" rx="68"></rect><circle id="Oval" fill="#466F7A" cx="508" cy="152" r="37"></circle><circle id="Oval-Copy-6" fill="#466F7A" cx="380" cy="152" r="37"></circle><path d="M379.997694,158.526316 C383.594946,158.526316 386.498753,155.564211 386.498753,151.894737 L386.498753,138.631579 C386.498753,134.962105 383.594946,132 379.997694,132 C376.400441,132 373.496635,134.962105 373.496635,138.631579 L373.496635,151.894737 C373.496635,155.564211 376.400441,158.526316 379.997694,158.526316 Z M392.80478,151.894737 C391.74294,151.894737 390.854462,152.690526 390.681101,153.773684 C389.792623,158.968421 385.350232,162.947368 379.997694,162.947368 C374.645155,162.947368 370.202765,158.968421 369.314287,153.773684 C369.140925,152.690526 368.252447,151.894737 367.190608,151.894737 C365.868726,151.894737 364.828556,153.088421 365.023588,154.414737 C366.085428,161.046316 371.286275,166.241053 377.830674,167.191579 L377.830674,171.789474 C377.830674,173.005263 378.805833,174 379.997694,174 C381.189555,174 382.164713,173.005263 382.164713,171.789474 L382.164713,167.191579 C388.709113,166.241053 393.90996,161.046316 394.9718,154.414737 C395.188502,153.088421 394.126662,151.894737 392.80478,151.894737 Z" id="Mic" fill="#FFFFFF"></path><circle id="Oval-Copy-7" fill="#466F7A" cx="252" cy="152" r="37"></circle><path d="M233,148.275712 L233,157.732861 C233,159.033219 234.05,160.097148 235.333333,160.097148 L242.333333,160.097148 L250.01,167.875653 C251.48,169.365154 254,168.301224 254,166.197009 L254,139.787922 C254,137.683706 251.48,136.619777 250.01,138.109278 L242.333333,145.911425 L235.333333,145.911425 C234.05,145.911425 233,146.975354 233,148.275712 Z M264.5,153.004287 C264.5,148.819498 262.12,145.225782 258.666667,143.476209 L258.666667,162.508721 C262.12,160.782791 264.5,157.189075 264.5,153.004287 Z M258.666667,135.153919 L258.666667,135.626776 C258.666667,136.525205 259.25,137.30542 260.066667,137.63642 C266.086667,140.071636 270.333333,146.053282 270.333333,153.004287 C270.333333,159.955291 266.086667,165.936937 260.066667,168.372153 C259.226667,168.703153 258.666667,169.483368 258.666667,170.381797 L258.666667,170.854654 C258.666667,172.344155 260.136667,173.384442 261.49,172.864299 C269.4,169.814368 275,162.083149 275,153.004287 C275,143.925424 269.4,136.194205 261.49,133.144275 C260.136667,132.600489 258.666667,133.664418 258.666667,135.153919 Z" id="Shape" fill="#FFFFFF"></path><path d="M495.625631,139.627767 C496.797204,138.456194 498.696699,138.456194 499.868272,139.627767 L499.868272,139.627767 L507.999952,147.759088 L516.131728,139.627767 C517.303301,138.456194 519.202796,138.456194 520.374369,139.627767 C521.545942,140.79934 521.545942,142.698835 520.374369,143.870408 L512.242952,152.002088 L520.374369,160.133864 C521.499079,161.258574 521.544067,163.054137 520.509334,164.232515 L520.374369,164.376505 C519.202796,165.548078 517.303301,165.548078 516.131728,164.376505 L516.131728,164.376505 L507.999952,156.245088 L499.868272,164.376505 C498.696699,165.548078 496.797204,165.548078 495.625631,164.376505 C494.454058,163.204932 494.454058,161.305437 495.625631,160.133864 L503.756952,152.002088 L495.625631,143.870408 C494.500921,142.745698 494.455933,140.950135 495.490666,139.771757 Z" id="Combined-Shape" fill="#FFFFFF"></path>
---
> <svg width="936px" height="540px" viewBox="0 0 936 540" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><rect id="Rectangle" fill="#2C506C" x="100" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy" fill="#30573D" x="710" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-2" fill="#274F5B" x="303.101673" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><rect id="Rectangle-Copy-3" fill="#2C5548" x="506.203346" y="331" width="124.694981" height="124.694981" rx="35.8970399"></rect><path d="M130.683088,393.207664 C147.781225,385.639383 159.182662,380.64991 164.887397,378.239243 C181.175575,371.356299 184.560119,370.160658 186.766117,370.121177 C187.251306,370.112494 187.771117,369.747873 188.473834,370.32718 C189.067195,370.816336 189.795488,371.9639 189.873612,372.427674 C189.951736,372.891447 190.049019,373.947935 189.971686,374.773443 C189.089024,384.195669 185.269759,407.060924 183.326734,417.613978 C182.504567,422.07937 179.580778,422.817589 178.013522,422.964112 C174.607514,423.282541 173.326062,421.436263 170.027176,419.239288 C164.865071,415.801457 162.00237,413.602374 156.938092,410.306707 C152.957806,407.716467 154.957536,406.031573 158.257669,402.54921 C159.121329,401.637859 174.527687,386.33741 174.818147,385.079379 C174.854474,384.922042 174.43249,384.035556 174.089545,383.725873 C173.746601,383.416189 173.240444,383.522089 172.875188,383.606312 C172.357448,383.725695 164.110917,389.263339 148.135596,400.219244 C145.794846,401.852237 143.674667,402.647887 141.775059,402.606192 C139.680894,402.560226 135.652561,401.403221 132.65791,400.414241 C128.984847,399.201218 127.778341,398.78784 128.032544,396.72775 C128.164949,395.654728 129.048464,394.481366 130.683088,393.207664 Z" id="Plane-Copy" fill="#A5A7AA"></path><circle id="Oval" fill="#A5A7AA" cx="365" cy="395" r="9"></circle><path d="M389,371 L379.49,371 L375.77,366.95 C374.66,365.72 373.04,365 371.36,365 L358.64,365 C356.96,365 355.34,365.72 354.2,366.95 L350.51,371 L341,371 C337.7,371 335,373.7 335,377 L335,413 C335,416.3 337.7,419 341,419 L389,419 C392.3,419 395,416.3 395,413 L395,377 C395,373.7 392.3,371 389,371 Z M365,410 C356.72,410 350,403.28 350,395 C350,386.72 356.72,380 365,380 C373.28,380 380,386.72 380,395 C380,403.28 373.28,410 365,410 Z" id="Shape" fill="#A5A7AA"></path><path d="M795.133775,404.603959 L787.119532,403.688942 C785.194852,403.468076 783.301723,404.130674 781.944981,405.487423 L776.139388,411.293048 C767.210133,406.749516 759.890038,399.460933 755.34653,390.500077 L761.183675,384.6629 C762.540417,383.306151 763.203012,381.413012 762.982147,379.488321 L762.067135,371.53714 C761.688509,368.350356 759.006578,365.952381 755.78826,365.952381 L750.32974,365.952381 C746.764349,365.952381 743.798448,368.918298 744.019313,372.483709 C745.691576,399.42938 767.241686,420.948055 794.155659,422.620327 C797.72105,422.841193 800.687561,419.875276 800.687561,416.309865 L800.687561,410.851316 C800.718503,407.664533 798.320541,404.982587 795.133775,404.603959 Z" id="Path-Copy" fill="#A5A7AA"></path><path d="M590.5,371 L546.5,371 C543.475,371 541.0275,373.475 541.0275,376.5 L541,409.5 C541,412.525 543.475,415 546.5,415 L590.5,415 C593.525,415 596,412.525 596,409.5 L596,376.5 C596,373.475 593.525,371 590.5,371 Z M589.4,383.6875 L569.9575,395.8425 C569.0775,396.3925 567.9225,396.3925 567.0425,395.8425 L547.6,383.6875 C546.9125,383.2475 546.5,381.505 546.5,380.7075 C546.5,378.865 548.5075,377.765 550.075,378.7275 L568.5,390.25 L586.925,378.7275 C588.4925,377.765 590.5,378.865 590.5,380.7075 C590.5,381.505 590.0875,383.2475 589.4,383.6875 Z" id="Shape" fill="#A5A7AA"></path><rect id="Combined-Shape" fill="#254D5E" x="159" y="84" width="433" height="136" rx="68"></rect><circle id="Oval" fill="#466F7A" cx="508" cy="152" r="37"></circle><circle id="Oval-Copy-6" fill="#466F7A" cx="380" cy="152" r="37"></circle><path d="M379.997694,158.526316 C383.594946,158.526316 386.498753,155.564211 386.498753,151.894737 L386.498753,138.631579 C386.498753,134.962105 383.594946,132 379.997694,132 C376.400441,132 373.496635,134.962105 373.496635,138.631579 L373.496635,151.894737 C373.496635,155.564211 376.400441,158.526316 379.997694,158.526316 Z M392.80478,151.894737 C391.74294,151.894737 390.854462,152.690526 390.681101,153.773684 C389.792623,158.968421 385.350232,162.947368 379.997694,162.947368 C374.645155,162.947368 370.202765,158.968421 369.314287,153.773684 C369.140925,152.690526 368.252447,151.894737 367.190608,151.894737 C365.868726,151.894737 364.828556,153.088421 365.023588,154.414737 C366.085428,161.046316 371.286275,166.241053 377.830674,167.191579 L377.830674,171.789474 C377.830674,173.005263 378.805833,174 379.997694,174 C381.189555,174 382.164713,173.005263 382.164713,171.789474 L382.164713,167.191579 C388.709113,166.241053 393.90996,161.046316 394.9718,154.414737 C395.188502,153.088421 394.126662,151.894737 392.80478,151.894737 Z" id="Mic" fill="#FFFFFF"></path><circle id="Oval-Copy-7" fill="#466F7A" cx="252" cy="152" r="37"></circle><path d="M233,148.275712 L233,157.732861 C233,159.033219 234.05,160.097148 235.333333,160.097148 L242.333333,160.097148 L250.01,167.875653 C251.48,169.365154 254,168.301224 254,166.197009 L254,139.787922 C254,137.683706 251.48,136.619777 250.01,138.109278 L242.333333,145.911425 L235.333333,145.911425 C234.05,145.911425 233,146.975354 233,148.275712 Z M264.5,153.004287 C264.5,148.819498 262.12,145.225782 258.666667,143.476209 L258.666667,162.508721 C262.12,160.782791 264.5,157.189075 264.5,153.004287 Z M258.666667,135.153919 L258.666667,135.626776 C258.666667,136.525205 259.25,137.30542 260.066667,137.63642 C266.086667,140.071636 270.333333,146.053282 270.333333,153.004287 C270.333333,159.955291 266.086667,165.936937 260.066667,168.372153 C259.226667,168.703153 258.666667,169.483368 258.666667,170.381797 L258.666667,170.854654 C258.666667,172.344155 260.136667,173.384442 261.49,172.864299 C269.4,169.814368 275,162.083149 275,153.004287 C275,143.925424 269.4,136.194205 261.49,133.144275 C260.136667,132.600489 258.666667,133.664418 258.666667,135.153919 Z" id="Shape" fill="#FFFFFF"></path><path d="M495.625631,139.627767 C496.797204,138.456194 498.696699,138.456194 499.868272,139.627767 L499.868272,139.627767 L507.999952,147.759088 L516.131728,139.627767 C517.303301,138.456194 519.202796,138.456194 520.374369,139.627767 C521.545942,140.79934 521.545942,142.698835 520.374369,143.870408 L512.242952,152.002088 L520.374369,160.133864 C521.499079,161.258574 521.544067,163.054137 520.509334,164.232515 L520.374369,164.376505 C519.202796,165.548078 517.303301,165.548078 516.131728,164.376505 L516.131728,164.376505 L507.999952,156.245088 L499.868272,164.376505 C498.696699,165.548078 496.797204,165.548078 495.625631,164.376505 C494.454058,163.204932 494.454058,161.305437 495.625631,160.133864 L503.756952,152.002088 L495.625631,143.870408 C494.500921,142.745698 494.455933,140.950135 495.490666,139.771757 Z" id="Combined-Shape" fill="#FFFFFF"></path>
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/qr_logo.svg ../Tele/TMessagesProj/src/main/res/raw/qr_logo.svg
2,6c2
< <svg width="150px"
<     height="150px"
<     viewBox="0 0 150 150"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="150px" height="150px" viewBox="0 0 150 150" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/record_audio.svg ../Tele/TMessagesProj/src/main/res/raw/record_audio.svg
2,6c2
< <svg width="557px"
<     height="210px"
<     viewBox="0 0 557 210"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="557px" height="210px" viewBox="0 0 557 210" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/record_video_l.svg ../Tele/TMessagesProj/src/main/res/raw/record_video_l.svg
2,6c2
< <svg width="480px"
<     height="309px"
<     viewBox="0 0 480 309"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="480px" height="309px" viewBox="0 0 480 309" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/raw/record_video_p.svg ../Tele/TMessagesProj/src/main/res/raw/record_video_p.svg
2,6c2
< <svg width="309px"
<     height="446px"
<     viewBox="0 0 309 446"
<     version="1.1"
<     xmlns="http://www.w3.org/2000/svg">
---
> <svg width="309px" height="446px" viewBox="0 0 309 446" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values/colors.xml ../Tele/TMessagesProj/src/main/res/values/colors.xml
11,15d10
< 
<     <color name="monetRedLight">#B3261E</color>
<     <color name="monetRedDark">#F2B8B5</color>
<     <color name="monetRedCall">#4CAF50</color>
<     <color name="monetGreenCall">#EF5350</color>
Only in TMessagesProj/src/main/res/values: ic_launcher_background.xml
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values/ids.xml ../Tele/TMessagesProj/src/main/res/values/ids.xml
6d5
<     <item name="menu_mention" type="id"/>
11d9
<     <item name="menu_markdown" type="id"/>
13d10
<     <item name="menu_undoredo" type="id"/>
38,40d34
<     <item name="id_dc" type="id"/>
<     <item name="id_copy" type="id"/>
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values/strings.xml ../Tele/TMessagesProj/src/main/res/values/strings.xml
3,4c3,4
<     <string name="AppName">Nullgram</string>
<     <string name="AppNameBeta">Nullgram Beta</string>
---
>     <string name="AppName">Telegram</string>
>     <string name="AppNameBeta">Telegram Beta</string>
44c44
<     <string name="CallText">Nullgram will call you in %1$d:%2$02d</string>
---
>     <string name="CallText">Telegram will call you in %1$d:%2$02d</string>
54c54
<     <string name="CancelAccountResetInfo2">Somebody with access to **%1$s** has requested to delete your Nullgram account and reset your 2-Step Verification password.\n\nIf this wasn\'t you, please enter the code we\'ve just sent you via SMS. You can also cancel this by *changing your phone number*.</string>
---
>     <string name="CancelAccountResetInfo2">Somebody with access to **%1$s** has requested to delete your Telegram account and reset your 2-Step Verification password.\n\nIf this wasn\'t you, please enter the code we\'ve just sent you via SMS. You can also cancel this by *changing your phone number*.</string>
135c135
<     <string name="PaymentWarningText">Neither Nullgram, nor %1$s will have access to your credit card information. Credit card details will be handled only by the payment system, %2$s.\n\nPayments will go directly to the developer of %1$s. Nullgram cannot provide any guarantees, so proceed at your own risk. In case of problems, please contact the developer of %1$s or your bank.</string>
---
>     <string name="PaymentWarningText">Neither Telegram, nor %1$s will have access to your credit card information. Credit card details will be handled only by the payment system, %2$s.\n\nPayments will go directly to the developer of %1$s. Telegram cannot provide any guarantees, so proceed at your own risk. In case of problems, please contact the developer of %1$s or your bank.</string>
160d159
<     <string name="NoChats">Welcome to Nullgram</string>
161a161
>     <string name="NoChats">Welcome to Telegram</string>
250c250
<     <string name="CompatibilityChat">%1$s is using an older version of Nullgram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Nullgram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
---
>     <string name="CompatibilityChat">%1$s is using an older version of Telegram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Telegram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
376c376
<     <string name="ImportImportingInfo">Please keep Nullgram open\nuntil the import is completed.</string>
---
>     <string name="ImportImportingInfo">Please keep Telegram open\nuntil the import is completed.</string>
380c380
<     <string name="ImportDoneInfo">Save space on your device by importing more chats to Nullgram.</string>
---
>     <string name="ImportDoneInfo">Save space on your device by importing more chats to Telegram.</string>
418c418
<     <string name="GroupUserLeftError">Sorry, if a person is no longer part of a group, you need to be in their Nullgram contacts in order to add them back.\n\nNote that they can still join via the group\'s invite link as long as they are not in the Removed Users list.</string>
---
>     <string name="GroupUserLeftError">Sorry, if a person is no longer part of a group, you need to be in their Telegram contacts in order to add them back.\n\nNote that they can still join via the group\'s invite link as long as they are not in the Removed Users list.</string>
550c550
<     <string name="ChannelLinkInfo">Anyone on Nullgram will be able to join your channel by following this link.</string>
---
>     <string name="ChannelLinkInfo">Anyone on Telegram will be able to join your channel by following this link.</string>
560c560
<     <string name="ChannelUserLeftError">Sorry, if a person is no longer part of a channel, you need to be in their Nullgram contacts in order to add them back.\n\nNote that they could still join via the channel\'s invite link as long as they are not in the Removed users list.</string>
---
>     <string name="ChannelUserLeftError">Sorry, if a person is no longer part of a channel, you need to be in their Telegram contacts in order to add them back.\n\nNote that they could still join via the channel\'s invite link as long as they are not in the Removed users list.</string>
1040,1042c1040,1042
<     <string name="SponsoredMessageInfoDescription1">Unlike other apps, Nullgram never uses your private data to target ads. You are seeing this message only because someone chose this public one-to-many channel as a space to promote their messages. This means that no user data is mined or analyzed to display ads, and every user viewing a channel on Nullgram sees the same sponsored message.</string>
<     <string name="SponsoredMessageInfoDescription2">Unlike other apps, Nullgram doesn\'t track whether you tapped on a sponsored message and doesn\'t profile you based on your activity. We also prevent external links in sponsored messages to ensure that third parties can’t spy on our users. We believe that everyone has the right to privacy, and technological platforms should respect that.</string>
<     <string name="SponsoredMessageInfoDescription3">Nullgram offers free and unlimited service to hundreds of millions of users, which involves significant server and traffic costs. In order to remain independent and stay true to its values, Nullgram developed a paid tool to promote messages with user privacy in mind. We welcome responsible advertisers at:</string>
---
>     <string name="SponsoredMessageInfoDescription1">Unlike other apps, Telegram never uses your private data to target ads. You are seeing this message only because someone chose this public one-to-many channel as a space to promote their messages. This means that no user data is mined or analyzed to display ads, and every user viewing a channel on Telegram sees the same sponsored message.</string>
>     <string name="SponsoredMessageInfoDescription2">Unlike other apps, Telegram doesn\'t track whether you tapped on a sponsored message and doesn\'t profile you based on your activity. We also prevent external links in sponsored messages to ensure that third parties can’t spy on our users. We believe that everyone has the right to privacy, and technological platforms should respect that.</string>
>     <string name="SponsoredMessageInfoDescription3">Telegram offers free and unlimited service to hundreds of millions of users, which involves significant server and traffic costs. In order to remain independent and stay true to its values, Telegram developed a paid tool to promote messages with user privacy in mind. We welcome responsible advertisers at:</string>
1066c1066
<     <string name="GotAQuestion">Got a question\nabout Nullgram?</string>
---
>     <string name="GotAQuestion">Got a question\nabout Telegram?</string>
1121c1121
<     <string name="BotPermissionGameAlert">Allow %1$s to pass your Nullgram name and id (not your phone number) to pages you open with this bot?</string>
---
>     <string name="BotPermissionGameAlert">Allow %1$s to pass your Telegram name and id (not your phone number) to pages you open with this bot?</string>
1134c1134
<     <string name="BlockUserAlert">Do you want to block **%1$s** from messaging and calling you on Nullgram?</string>
---
>     <string name="BlockUserAlert">Do you want to block **%1$s** from messaging and calling you on Telegram?</string>
1193c1193
<     <string name="ReportSentInfo">Nullgram moderators will study your report.\nThank you for your cooperation!</string>
---
>     <string name="ReportSentInfo">Telegram moderators will study your report.\nThank you for your cooperation!</string>
1301c1301
<     <string name="MapPreviewProviderTelegram">Nullgram</string>
---
>     <string name="MapPreviewProviderTelegram">Telegram</string>
1495,1496c1495,1496
<     <string name="NotificationContactJoined">%1$s joined Nullgram!</string>
<     <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn\'t you, you can go to Settings - Privacy and Security - Sessions and terminate that session.\n\nIf you think that somebody logged in to your account against your will, you can enable two-step verification in Privacy and Security settings.\n\nSincerely,\nThe Nullgram Team</string>
---
>     <string name="NotificationContactJoined">%1$s joined Telegram!</string>
>     <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn\'t you, you can go to Settings - Privacy and Security - Sessions and terminate that session.\n\nIf you think that somebody logged in to your account against your will, you can enable two-step verification in Privacy and Security settings.\n\nSincerely,\nThe Telegram Team</string>
1502,1503c1502,1503
<     <string name="NotificationHiddenName">Nullgram</string>
<     <string name="NotificationHiddenChatName">Nullgram</string>
---
>     <string name="NotificationHiddenName">Telegram</string>
>     <string name="NotificationHiddenChatName">Telegram</string>
1568c1568
<     <string name="SecretChatName">Nullgram</string>
---
>     <string name="SecretChatName">Telegram</string>
1576c1576
<     <string name="InviteText2">Hey, I\'m using Nullgram to chat. Join me! Download it here: %1$s</string>
---
>     <string name="InviteText2">Hey, I\'m using Telegram to chat. Join me! Download it here: %1$s</string>
1597,1599c1597,1599
<     <string name="InviteFriendsHelp">Select contacts to invite them to Nullgram</string>
<     <string name="InviteToTelegram">INVITE TO NULLGRAM</string>
<     <string name="ShareTelegram">Share Nullgram...</string>
---
>     <string name="InviteFriendsHelp">Select contacts to invite them to Telegram</string>
>     <string name="InviteToTelegram">INVITE TO TELEGRAM</string>
>     <string name="ShareTelegram">Share Telegram...</string>
1601c1601
<     <string name="UpdateContactsMessage">Nullgram has detected many unsynced contacts, would you like to sync them now? Choose \'OK\' if you\'re using your own device, SIM card and Google account.</string>
---
>     <string name="UpdateContactsMessage">Telegram has detected many unsynced contacts, would you like to sync them now? Choose \'OK\' if you\'re using your own device, SIM card and Google account.</string>
1606,1607c1606,1607
<     <string name="NoContactsYet">You have no contacts on Nullgram yet</string>
<     <string name="NoContactsYetLine1">Invite friends to try Nullgram</string>
---
>     <string name="NoContactsYet">You have no contacts on Telegram yet</string>
>     <string name="NoContactsYetLine1">Invite friends to try Telegram</string>
1691,1692c1691,1692
<     <string name="ContactNotRegisteredTitle">Invite to Nullgram</string>
<     <string name="ContactNotRegistered">%1$s is not on Nullgram yet, would you like to invite them to join?</string>
---
>     <string name="ContactNotRegisteredTitle">Invite to Telegram</string>
>     <string name="ContactNotRegistered">%1$s is not on Telegram yet, would you like to invite them to join?</string>
1699,1700c1699,1700
<     <string name="BlockUserMessage">Do you want to block **%1$s** from messaging and calling you on Nullgram?</string>
<     <string name="BlockUsersMessage">Do you want to block **%1$s** from messaging and calling you on Nullgram?</string>
---
>     <string name="BlockUserMessage">Do you want to block **%1$s** from messaging and calling you on Telegram?</string>
>     <string name="BlockUsersMessage">Do you want to block **%1$s** from messaging and calling you on Telegram?</string>
1730c1730
<     <string name="EncryptionKeyDescription">This image and text were derived from the encryption key for this secret chat with **%1$s**.\n\nIf they look the same on **%2$s\'s** device, end-to-end encryption is guaranteed.\n\nLearn more at Nullgram.org</string>
---
>     <string name="EncryptionKeyDescription">This image and text were derived from the encryption key for this secret chat with **%1$s**.\n\nIf they look the same on **%2$s\'s** device, end-to-end encryption is guaranteed.\n\nLearn more at telegram.org</string>
1770c1770
<     <string name="UsernameHelp">You can choose a username on **Nullgram**. If you do, other people will be able to find you by this username and contact you without knowing your phone number.\n\nYou can use **a–z**, **0–9** and underscores. Minimum length is **5** characters.</string>
---
>     <string name="UsernameHelp">You can choose a username on **Telegram**. If you do, other people will be able to find you by this username and contact you without knowing your phone number.\n\nYou can use **a–z**, **0–9** and underscores. Minimum length is **5** characters.</string>
1885c1885
<     <string name="EmojiSuggestionsInfo">**Nullgram** lets you find emoji by thousands of keywords, but there is always something missing. If you want to suggest a new emoji replacement, you can help us by visiting:</string>
---
>     <string name="EmojiSuggestionsInfo">**Telegram** lets you find emoji by thousands of keywords, but there is always something missing. If you want to suggest a new emoji replacement, you can help us by visiting:</string>
1900d1899
<     <string name="PlayEmojiInKeyboard">Emoji Panel Animations</string>
1937c1936
<     <string name="ImportStickersDoneInfo">Import more stickers to Nullgram and share them with your friends.</string>
---
>     <string name="ImportStickersDoneInfo">Import more stickers to Telegram and share them with your friends.</string>
1992c1991
<     <string name="CreateNewThemeAlert">You can create your own theme by changing colors within the app.\n\nYou can always switch back to the default Nullgram theme here.</string>
---
>     <string name="CreateNewThemeAlert">You can create your own theme by changing colors within the app.\n\nYou can always switch back to the default Telegram theme here.</string>
2093c2092
<     <string name="ProfilePopupNotificationInfo">New messages from this contact will appear on your screen when you are not using Nullgram.</string>
---
>     <string name="ProfilePopupNotificationInfo">New messages from this contact will appear on your screen when you are not using Telegram.</string>
2183c2182
<     <string name="ContactJoined">Contact joined Nullgram</string>
---
>     <string name="ContactJoined">Contact joined Telegram</string>
2208,2209c2207,2208
<     <string name="LanguageUnknownCustomAlert">Unfortunately, this custom language pack (**%1$s**) doesn\'t contain data for Nullgram Android.</string>
<     <string name="AskAQuestionInfo">Please note that Nullgram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.\n\nPlease take a look at the <![CDATA[<a href=\"https://Nullgram.org/faq#general-questions\">Nullgram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
---
>     <string name="LanguageUnknownCustomAlert">Unfortunately, this custom language pack (**%1$s**) doesn\'t contain data for Telegram Android.</string>
>     <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.\n\nPlease take a look at the <![CDATA[<a href=\"https://telegram.org/faq#general-questions\">Telegram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
2211,2213c2210,2212
<     <string name="TelegramFAQ">Nullgram FAQ</string>
<     <string name="TelegramFaq">Nullgram FAQ</string>
<     <string name="TelegramFeatures">Nullgram Features</string>
---
>     <string name="TelegramFAQ">Telegram FAQ</string>
>     <string name="TelegramFaq">Telegram FAQ</string>
>     <string name="TelegramFeatures">Telegram Features</string>
2228c2227
<     <string name="NotificationsServiceConnectionInfo">Keep a low impact background connection to Nullgram for reliable notifications.</string>
---
>     <string name="NotificationsServiceConnectionInfo">Keep a low impact background connection to Telegram for reliable notifications.</string>
2319c2318
<     <string name="PhoneNumberHelp">You can change your Nullgram number here. Your account and all your cloud data — messages, media, contacts, etc. will be moved to the new number.</string>
---
>     <string name="PhoneNumberHelp">You can change your Telegram number here. Your account and all your cloud data — messages, media, contacts, etc. will be moved to the new number.</string>
2326c2325
<     <string name="ChangePhoneNumberOccupied">The number %1$s is already connected to a Nullgram account. Please delete that account before migrating to the new number.</string>
---
>     <string name="ChangePhoneNumberOccupied">The number %1$s is already connected to a Telegram account. Please delete that account before migrating to the new number.</string>
2354c2353
<     <string name="SecretWebPageInfo">Link previews will be generated on Nullgram servers. We do not store data about the links you send.</string>
---
>     <string name="SecretWebPageInfo">Link previews will be generated on Telegram servers. We do not store data about the links you send.</string>
2363c2362
<     <string name="TelegramVersion">Nullgram for Android %1$s</string>
---
>     <string name="TelegramVersion">Telegram for Android %1$s</string>
2414c2413
<     <string name="UseProxySponsorInfo">This channel is shown by your proxy server. To remove this channel from your chat list, disable the proxy in Nullgram Settings.</string>
---
>     <string name="UseProxySponsorInfo">This channel is shown by your proxy server. To remove this channel from your chat list, disable the proxy in Telegram Settings.</string>
2417c2416
<     <string name="UseProxyTelegramInfo2">This proxy may display a sponsored channel in your chat list. This doesn\'t reveal any of your Nullgram traffic.</string>
---
>     <string name="UseProxyTelegramInfo2">This proxy may display a sponsored channel in your chat list. This doesn\'t reveal any of your Telegram traffic.</string>
2435c2434
<     <string name="EnableAllStreamingInfo">Some videos can\'t be streamed – e.g., all videos that were sent from Android using Nullgram 4.7 and earlier versions.\n</string>
---
>     <string name="EnableAllStreamingInfo">Some videos can\'t be streamed – e.g., all videos that were sent from Android using Telegram 4.7 and earlier versions.\n</string>
2456c2455
<     <string name="AddAnotherAccountInfo">Connect other Nullgram accounts and easily switch between them.</string>
---
>     <string name="AddAnotherAccountInfo">Connect other Telegram accounts and easily switch between them.</string>
2489,2490c2488,2489
<     <string name="AuthAnotherClientInfo1">Download Nullgram on your computer from *getdesktop.telegram.org*.</string>
<     <string name="AuthAnotherClientInfo2">Run Nullgram Desktop to get the QR code.</string>
---
>     <string name="AuthAnotherClientInfo1">Download Telegram on your computer from *getdesktop.telegram.org*.</string>
>     <string name="AuthAnotherClientInfo2">Run Telegram Desktop to get the QR code.</string>
2533c2532
<     <string name="CheckPhoneNumberInfo">Keep your number up to date to ensure you can always log into Nullgram. **Learn more**</string>
---
>     <string name="CheckPhoneNumberInfo">Keep your number up to date to ensure you can always log into Telegram. **Learn more**</string>
2565c2564
<     <string name="TelegramPassport">Nullgram Passport</string>
---
>     <string name="TelegramPassport">Telegram Passport</string>
2568,2569c2567,2568
<     <string name="PassportInfoTitle">What is Nullgram Passport?</string>
<     <string name="PassportInfo2">With Nullgram Passport you can easily sign up for websites and services that require identity verification.\n\nYour information, personal data, and documents are protected by end-to-end encryption. Nobody, including Nullgram, can access them without your permission.\n\nYou can visit our *FAQ* to learn more.</string>
---
>     <string name="PassportInfoTitle">What is Telegram Passport?</string>
>     <string name="PassportInfo2">With Telegram Passport you can easily sign up for websites and services that require identity verification.\n\nYour information, personal data, and documents are protected by end-to-end encryption. Nobody, including Telegram, can access them without your permission.\n\nYou can visit our *FAQ* to learn more.</string>
2571c2570
<     <string name="TelegramPassportCreatePasswordInfo">Please create a password to secure your personal data with end-to-end encryption.\n\nThis password will also be required whenever you log in to Nullgram on a new device.</string>
---
>     <string name="TelegramPassportCreatePasswordInfo">Please create a password to secure your personal data with end-to-end encryption.\n\nThis password will also be required whenever you log in to Telegram on a new device.</string>
2573,2575c2572,2574
<     <string name="TelegramPassportDelete">Delete Nullgram Passport</string>
<     <string name="TelegramPassportDeleteTitle">Delete Nullgram passport</string>
<     <string name="TelegramPassportDeleteAlert">Are you sure you want to delete your Nullgram Passport?</string>
---
>     <string name="TelegramPassportDelete">Delete Telegram Passport</string>
>     <string name="TelegramPassportDeleteTitle">Delete Telegram passport</string>
>     <string name="TelegramPassportDeleteAlert">Are you sure you want to delete your Telegram Passport?</string>
2611,2612c2610,2611
<     <string name="PassportPhoneUseSameInfo">Use the same phone number as on Nullgram.</string>
<     <string name="PassportPhoneUseSameEmailInfo">Use the same email as on Nullgram.</string>
---
>     <string name="PassportPhoneUseSameInfo">Use the same phone number as on Telegram.</string>
>     <string name="PassportPhoneUseSameEmailInfo">Use the same email as on Telegram.</string>
2623c2622
<     <string name="PassportRequestPasswordInfo">Please enter your Nullgram Password to decrypt your data.</string>
---
>     <string name="PassportRequestPasswordInfo">Please enter your Telegram Password to decrypt your data.</string>
2755c2754
<     <string name="NoOtherSessionsInfo">You can log in to Nullgram from other mobile, tablet and desktop devices, using the same phone number. All your data will be instantly synchronized.</string>
---
>     <string name="NoOtherSessionsInfo">You can log in to Telegram from other mobile, tablet and desktop devices, using the same phone number. All your data will be instantly synchronized.</string>
2768c2767
<     <string name="NoOtherWebSessionsInfo">You can log in on websites that support signing in with Nullgram.</string>
---
>     <string name="NoOtherWebSessionsInfo">You can log in on websites that support signing in with Telegram.</string>
2770,2771c2769,2770
<     <string name="WebSessionsTitle">Logged in with Nullgram</string>
<     <string name="TerminateWebSessionInfo">Tap to disconnect from your Nullgram account.</string>
---
>     <string name="WebSessionsTitle">Logged in with Telegram</string>
>     <string name="TerminateWebSessionInfo">Tap to disconnect from your Telegram account.</string>
2778,2779c2777,2778
<     <string name="AreYouSureWebSessions">Are you sure you want to disconnect all websites where you used Nullgram to log in?</string>
<     <string name="ClearOtherWebSessionsHelp">You can log in on websites that support signing in with Nullgram.</string>
---
>     <string name="AreYouSureWebSessions">Are you sure you want to disconnect all websites where you used Telegram to log in?</string>
>     <string name="ClearOtherWebSessionsHelp">You can log in on websites that support signing in with Telegram.</string>
2894c2893
<     <string name="EnterYourTelegramPasscode">Enter your Nullgram passcode</string>
---
>     <string name="EnterYourTelegramPasscode">Enter your Telegram passcode</string>
2909c2908
<     <string name="ScreenCaptureAlert">This will hide the contents of your chats or chat list from the task switcher, but you will not be able to take screenshots on Nullgram.\n\nYou may need to restart the app for this to take effect.</string>
---
>     <string name="ScreenCaptureAlert">This will hide the contents of your chats or chat list from the task switcher, but you will not be able to take screenshots on Telegram.\n\nYou may need to restart the app for this to take effect.</string>
3248c3247
<     <string name="YourEmailSkipWarningText">No, seriously.\n\nIf you forget your password, you will lose access to your Nullgram account. There will be no way to restore it.</string>
---
>     <string name="YourEmailSkipWarningText">No, seriously.\n\nIf you forget your password, you will lose access to your Telegram account. There will be no way to restore it.</string>
3269c3268
<     <string name="TurnPasswordOffPassport">Warning! All data saved in your Nullgram Passport will be lost!</string>
---
>     <string name="TurnPasswordOffPassport">Warning! All data saved in your Telegram Passport will be lost!</string>
3409,3410c3408,3409
<     <string name="PrivacyPhoneInfo">Users who have your number saved in their contacts will also see it on Nullgram.</string>
<     <string name="PrivacyPhoneInfo3">Users who add your number to their contacts will see it on Nullgram only if they are your contacts.</string>
---
>     <string name="PrivacyPhoneInfo">Users who have your number saved in their contacts will also see it on Telegram.</string>
>     <string name="PrivacyPhoneInfo3">Users who add your number to their contacts will see it on Telegram only if they are your contacts.</string>
3427c3426
<     <string name="PrivacyPaymentsClearAlert">Delete your shipping info and instruct all payment providers to remove your saved credit cards? Note that Nullgram never stores your credit card data.</string>
---
>     <string name="PrivacyPaymentsClearAlert">Delete your shipping info and instruct all payment providers to remove your saved credit cards? Note that Telegram never stores your credit card data.</string>
3431c3430
<     <string name="PrivacyBotsInfo">Websites where you used Nullgram to log in.</string>
---
>     <string name="PrivacyBotsInfo">Websites where you used Telegram to log in.</string>
3490c3489
<     <string name="PrivacyCallsP2PHelp">Disabling peer-to-peer will relay all calls through Nullgram servers to avoid revealing your IP address, but may slightly decrease audio quality.</string>
---
>     <string name="PrivacyCallsP2PHelp">Disabling peer-to-peer will relay all calls through Telegram servers to avoid revealing your IP address, but may slightly decrease audio quality.</string>
3500c3499
<     <string name="SyncContactsDeleteText">This will remove your contacts from the Nullgram servers.\n\nIf \'**Sync Contacts**\' is enabled, contacts will be re-synced.</string>
---
>     <string name="SyncContactsDeleteText">This will remove your contacts from the Telegram servers.\n\nIf \'**Sync Contacts**\' is enabled, contacts will be re-synced.</string>
3652c3651
<     <string name="UnsupportedMedia">This message is not supported on your version of Nullgram. Update the app to view: https://telegram.org/update</string>
---
>     <string name="UnsupportedMedia">This message is not supported on your version of Telegram. Update the app to view: https://telegram.org/update</string>
3694c3693
<     <string name="PleaseLoginPassport">Please log in to your Nullgram account to use Nullgram Passport.</string>
---
>     <string name="PleaseLoginPassport">Please log in to your Telegram account to use Telegram Passport.</string>
3715c3714
<     <string name="InviteUser">This user does not have Nullgram yet, send an invitation?</string>
---
>     <string name="InviteUser">This user does not have Telegram yet, send an invitation?</string>
3739c3738
<     <string name="AreYouSureLogout">Are you sure you want to log out?\n\nNote that you can seamlessly use Nullgram on all your devices at once.\n\nRemember, logging out kills all your Secret Chats.</string>
---
>     <string name="AreYouSureLogout">Are you sure you want to log out?\n\nNote that you can seamlessly use Telegram on all your devices at once.\n\nRemember, logging out kills all your Secret Chats.</string>
3801c3800
<     <string name="SecretLinkPreviewAlert">Would you like to enable extended link previews in Secret Chats? Note that link previews are generated on Nullgram servers.</string>
---
>     <string name="SecretLinkPreviewAlert">Would you like to enable extended link previews in Secret Chats? Note that link previews are generated on Telegram servers.</string>
3804,3807c3803,3806
<     <string name="AllowReadCall">Please allow Nullgram to receive calls so that we can automatically enter your code for you.</string>
<     <string name="AllowReadCallAndLog">Please allow Nullgram to receive calls and read the call log so that we can automatically enter your code for you.</string>
<     <string name="AllowReadCallLog">Please allow Nullgram to read the call log so that we can automatically enter your code for you.</string>
<     <string name="AllowFillNumber">Please allow Nullgram to receive calls so that we can automatically confirm your phone number.</string>
---
>     <string name="AllowReadCall">Please allow Telegram to receive calls so that we can automatically enter your code for you.</string>
>     <string name="AllowReadCallAndLog">Please allow Telegram to receive calls and read the call log so that we can automatically enter your code for you.</string>
>     <string name="AllowReadCallLog">Please allow Telegram to read the call log so that we can automatically enter your code for you.</string>
>     <string name="AllowFillNumber">Please allow Telegram to receive calls so that we can automatically confirm your phone number.</string>
3840,3841c3839,3840
<     <string name="TosUpdateDecline">We\'re very sorry, but this means we must part ways here. Unlike others, we don\'t use your data for ad targeting or other commercial purposes. Nullgram only stores the information it needs to function as a feature-rich cloud service. You can adjust how we use your data (e.g., delete synced contacts) in Privacy &amp; Security settings.\n\nBut if you\'re generally not OK with Nullgram\'s modest needs, it won\'t be possible for us to provide this service. You can deactivate your account now — or look around some more and deactivate it later if you feel you\'re not happy with the way we use your data.</string>
<     <string name="TosDeclineDeleteAccount">Warning, this will irreversibly delete your Nullgram account along with all the data you store in the Nullgram cloud.\n\nImportant: You can Cancel now and export your data before deleting your account instead of losing it all. (To do this, open the latest version of Nullgram Desktop and go to Settings &gt; Export Nullgram Data.)</string>
---
>     <string name="TosUpdateDecline">We\'re very sorry, but this means we must part ways here. Unlike others, we don\'t use your data for ad targeting or other commercial purposes. Telegram only stores the information it needs to function as a feature-rich cloud service. You can adjust how we use your data (e.g., delete synced contacts) in Privacy &amp; Security settings.\n\nBut if you\'re generally not OK with Telegram\'s modest needs, it won\'t be possible for us to provide this service. You can deactivate your account now — or look around some more and deactivate it later if you feel you\'re not happy with the way we use your data.</string>
>     <string name="TosDeclineDeleteAccount">Warning, this will irreversibly delete your Telegram account along with all the data you store in the Telegram cloud.\n\nImportant: You can Cancel now and export your data before deleting your account instead of losing it all. (To do this, open the latest version of Telegram Desktop and go to Settings &gt; Export Telegram Data.)</string>
3859,3860c3858,3859
<     <string name="PermissionXiaomiLockscreen">Please allow Nullgram to be shown on the lock screen so that calls can work properly.</string>
<     <string name="PermissionBackgroundLocation">To share your live location in this chat, Nullgram needs access to your location all the time, including while the app is in the background.\n\nWe will access your location only for the duration you choose, and you can stop sharing it any time. We won\'t use your location for any purpose other than sharing it in this chat.</string>
---
>     <string name="PermissionXiaomiLockscreen">Please allow Telegram to be shown on the lock screen so that calls can work properly.</string>
>     <string name="PermissionBackgroundLocation">To share your live location in this chat, Telegram needs access to your location all the time, including while the app is in the background.\n\nWe will access your location only for the duration you choose, and you can stop sharing it any time. We won\'t use your location for any purpose other than sharing it in this chat.</string>
3880c3879
<     <string name="ClearTelegramCache">Clear Nullgram Cache</string>
---
>     <string name="ClearTelegramCache">Clear Telegram Cache</string>
3886,3887c3885,3886
<     <string name="TelegramCacheSize">%s Nullgram Cache</string>
<     <string name="LocalDatabaseSize">%s Nullgram Local Database</string>
---
>     <string name="TelegramCacheSize">%s Telegram Cache</string>
>     <string name="LocalDatabaseSize">%s Telegram Local Database</string>
3946c3945
<     <string name="Page1Title">Nullgram</string>
---
>     <string name="Page1Title">Telegram</string>
3972,3974c3971,3973
<     <string name="VoipInCallBranding">Nullgram Call</string>
<     <string name="VoipInVideoCallBranding">Nullgram Video Call</string>
<     <string name="VoipOutgoingCall">Ongoing Nullgram call</string>
---
>     <string name="VoipInCallBranding">Telegram Call</string>
>     <string name="VoipInVideoCallBranding">Telegram Video Call</string>
>     <string name="VoipOutgoingCall">Ongoing Telegram call</string>
3986c3985
<     <string name="VoipRingtoneInfo">You can customize the ringtone used when this contact calls you on Nullgram.</string>
---
>     <string name="VoipRingtoneInfo">You can customize the ringtone used when this contact calls you on Telegram.</string>
4026c4025
<     <string name="VoipPeerVideoOutdated">Sorry, **%1$s** is using an old version of Nullgram that doesn\'t support video calls.</string>
---
>     <string name="VoipPeerVideoOutdated">Sorry, **%1$s** is using an old version of Telegram that doesn\'t support video calls.</string>
4037,4038c4036,4037
<     <string name="CallViaTelegram">Nullgram Call</string>
<     <string name="VideoCallViaTelegram">Nullgram Video Call</string>
---
>     <string name="CallViaTelegram">Telegram Call</string>
>     <string name="VideoCallViaTelegram">Telegram Video Call</string>
4056c4055
<     <string name="VoipQuickRepliesExplain">These quick responses will be available when you respond to an incoming call with a Nullgram message. Change them to say anything you like.</string>
---
>     <string name="VoipQuickRepliesExplain">These quick responses will be available when you respond to an incoming call with a Telegram message. Change them to say anything you like.</string>
4063,4065c4062,4064
<     <string name="VoipInCallBrandingWithName">Nullgram Call to %s</string>
<     <string name="VoipInVideoCallBrandingWithName">Nullgram Video Call to %s</string>
<     <string name="VoipErrorUnknown">Can\'t place a Nullgram call at the moment.</string>
---
>     <string name="VoipInCallBrandingWithName">Telegram Call to %s</string>
>     <string name="VoipInVideoCallBrandingWithName">Telegram Video Call to %s</string>
>     <string name="VoipErrorUnknown">Can\'t place a Telegram call at the moment.</string>
4305,4306c4304,4305
<     <string name="VoipVideoNotAvailableAdmin">The video chat has over %1$s.\nNew participants must use the latest version of Nullgram to view video.</string>
<     <string name="VoipChannelVideoNotAvailableAdmin">The live stream is over %1$s.\nNew participants must use the latest version of Nullgram to view video.</string>
---
>     <string name="VoipVideoNotAvailableAdmin">The video chat has over %1$s.\nNew participants must use the latest version of Telegram to view video.</string>
>     <string name="VoipChannelVideoNotAvailableAdmin">The live stream is over %1$s.\nNew participants must use the latest version of Telegram to view video.</string>
4319,4320c4318,4319
<     <string name="PrimaryLinkHelp">Anyone on Nullgram will be able to join your group by following this link.</string>
<     <string name="PrimaryLinkHelpChannel">Anyone on Nullgram will be able to join your channel by following this link.</string>
---
>     <string name="PrimaryLinkHelp">Anyone on Telegram will be able to join your group by following this link.</string>
>     <string name="PrimaryLinkHelpChannel">Anyone on Telegram will be able to join your channel by following this link.</string>
4351c4350
<     <string name="QRCodeLinkHelpGroup">Everyone on Nullgram can scan this code to join your group.</string>
---
>     <string name="QRCodeLinkHelpGroup">Everyone on Telegram can scan this code to join your group.</string>
4447,4458c4446,4457
<     <string name="TelegramContacts_zero">%1$d contacts on Nullgram</string>
<     <string name="TelegramContacts_one">%1$d contact on Nullgram</string>
<     <string name="TelegramContacts_two">%1$d contacts on Nullgram</string>
<     <string name="TelegramContacts_few">%1$d contacts on Nullgram</string>
<     <string name="TelegramContacts_many">%1$d contacts on Nullgram</string>
<     <string name="TelegramContacts_other">%1$d contacts on Nullgram</string>
<     <string name="InviteTextNum_zero">Hey, I\'m using Nullgram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
<     <string name="InviteTextNum_one">Hey, I\'m using Nullgram to chat – and so are %1$d of our other contact. Join us! Download it here: %2$s</string>
<     <string name="InviteTextNum_two">Hey, I\'m using Nullgram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
<     <string name="InviteTextNum_few">Hey, I\'m using Nullgram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
<     <string name="InviteTextNum_many">Hey, I\'m using Nullgram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
<     <string name="InviteTextNum_other">Hey, I\'m using Nullgram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
---
>     <string name="TelegramContacts_zero">%1$d contacts on Telegram</string>
>     <string name="TelegramContacts_one">%1$d contact on Telegram</string>
>     <string name="TelegramContacts_two">%1$d contacts on Telegram</string>
>     <string name="TelegramContacts_few">%1$d contacts on Telegram</string>
>     <string name="TelegramContacts_many">%1$d contacts on Telegram</string>
>     <string name="TelegramContacts_other">%1$d contacts on Telegram</string>
>     <string name="InviteTextNum_zero">Hey, I\'m using Telegram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
>     <string name="InviteTextNum_one">Hey, I\'m using Telegram to chat – and so are %1$d of our other contact. Join us! Download it here: %2$s</string>
>     <string name="InviteTextNum_two">Hey, I\'m using Telegram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
>     <string name="InviteTextNum_few">Hey, I\'m using Telegram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
>     <string name="InviteTextNum_many">Hey, I\'m using Telegram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
>     <string name="InviteTextNum_other">Hey, I\'m using Telegram to chat – and so are %1$d of our other contacts. Join us! Download it here: %2$s</string>
5380c5379
<     <string name="OptimizingTelegram">Optimizing Nullgram...</string>
---
>     <string name="OptimizingTelegram">Optimizing Telegram...</string>
5499c5498
<     <string name="AuthAnotherClientInfo4">Link *Nullgram Desktop* or *Nullgram Web* by scanning the QR.</string>
---
>     <string name="AuthAnotherClientInfo4">Link *Telegram Desktop* or *Telegram Web* by scanning the QR.</string>
5504c5503
<     <string name="SessionsListInfo">The official Nullgram app is available for Android, iPhone, iPad, Windows, macOS and Linux.</string>
---
>     <string name="SessionsListInfo">The official Telegram app is available for Android, iPhone, iPad, Windows, macOS and Linux.</string>
Only in TMessagesProj/src/main/res/values: strings_nullgram.xml
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values/styles.xml ../Tele/TMessagesProj/src/main/res/values/styles.xml
235,239d234
<     <style name="Animation.Preference.SimpleMenuCenter" parent="android:Animation">
<         <item name="android:windowEnterAnimation">@null</item>
<         <item name="android:windowExitAnimation">@anim/shrink_fade_out_center</item>
<     </style>
< 
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-ar/strings.xml ../Tele/TMessagesProj/src/main/res/values-ar/strings.xml
542a543
>     <string name="UserRestrictionsDisabled">تم تعطيل هذا الخيار لجميع الأعضاء في صلاحيات المجموعة.</string>
2140a2142
>     <string name="QRCodePermissionNoCamera">يحتاج تيليجرام الوصول إلى الكاميرا لتتمكن من مسح رمز QR.</string>
2150a2153,2155
>     <string name="CancelForward">إلغاء التحويل</string>
>     <string name="SelectOtherChat">اختيار محادثة أخرى</string>
>     <string name="CancelForwardMessage">هل تريد إلغاء التحويل أم تحويل الرسائل إلى محادثة أخرى؟</string>
2384a2390
>     <string name="TerminateSessionInfo">اضغط على أي جلسة لإنهائها.</string>
2500a2507
>     <string name="EnterYourPasscode">أدخل رمز قفلك</string>
3091a3099
>     <string name="ActionGroupCallJustStarted">المحادثة الصوتية بدأت</string>
3092a3101
>     <string name="ActionGroupCallEnded">انتهت المحادثة الصوتية (%s)</string>
3263a3273,3276
>     <string name="PermissionStorage">يحتاج تيليجرام للوصول لذاكرة التخزين لتتمكن من إرسال وحفظ الصور، المقاطع المرئية، الصوتيات وغيرها من الوسائط.</string>
>     <string name="PermissionNoAudio">يحتاج تيليجرام الوصول للمايكروفون لتتمكن من إرسال الرسائل الصوتية.</string>
>     <string name="PermissionNoAudioVideo">يحتاج تيليجرام إلى استخدام الميكروفون من أجل تسجيل المقاطع المرئية.</string>
>     <string name="PermissionNoCamera">يحتاج تيليجرام للوصول للكاميرا لتتمكن من أخذ الصور والمقاطع المرئية. يرجى تفعيلها في الإعدادات.</string>
3437a3451,3452
>     <string name="VoipNeedMicPermission">يحتاج تيليجرام إلى استخدام الميكروفون من أجل إجراء المكالمات.</string>
>     <string name="VoipNeedMicCameraPermission">"يحتاج تيليجرام الوصول إلى المايكروفون والكاميرا لتتمكن من إجراء المكالمات المرئية. "</string>
3528a3544
>     <string name="VoipGroupMuteMemberAlertText">هل ترغب حقًا في منع **%1$s** من التحدث في المحادثة الصوتية؟</string>
3554a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">قام un1 بدعوة un2 إلى المحادثة الصوتية</string>
>     <string name="VoipGroupJoinCall">الانضمام للمحادثة الصوتية</string>
3566a3585
>     <string name="VoipGroupEndedStartNew">"انتهت المحادثة الصوتية. بدء واحدة جديدة؟ "</string>
3577a3597
>     <string name="VoipGroupStartAs">بدء المحادثة الصوتية بـ...</string>
3649a3670
>     <string name="VideoPreviewDesrciption">ستتم مشاركة فيديو الكاميرا الخاصة بك مع بقية المشاركين في هذه المحادثة الصوتية.</string>
Only in TMessagesProj/src/main/res/values-ar: strings_nullgram.xml
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-de/strings.xml ../Tele/TMessagesProj/src/main/res/values-de/strings.xml
542a543
>     <string name="UserRestrictionsDisabled">In den Gruppenberechtigungen ist diese Option für alle deaktiviert worden</string>
2140a2142
>     <string name="QRCodePermissionNoCamera">Telegram benötigt zum Scannen von QR-Codes Zugriff auf deine Kamera.</string>
2150a2153,2155
>     <string name="CancelForward">Weiterleitung abbrechen</string>
>     <string name="SelectOtherChat">Anderen Chat wählen</string>
>     <string name="CancelForwardMessage">Weiterleitung abbrechen oder möchtest du Nachrichten an einen anderen Chat senden?</string>
2384a2390
>     <string name="TerminateSessionInfo">Tippe auf eine Sitzung, um sie zu beenden.</string>
2500a2507
>     <string name="EnterYourPasscode">Deinen Pincode eingeben</string>
3091a3099
>     <string name="ActionGroupCallJustStarted">Sprachchat gestartet</string>
3092a3101
>     <string name="ActionGroupCallEnded">Sprachchat beendet (%s)</string>
3263a3273,3276
>     <string name="PermissionStorage">Telegram benötigt Zugriff auf deinen Speicher, damit du Bilder, Videos und Musik senden und speichern kannst.</string>
>     <string name="PermissionNoAudio">"Telegram benötigt Zugriff auf dein Mikrofon, damit du Sprachnachrichten senden kannst. "</string>
>     <string name="PermissionNoAudioVideo">Telegram benötigt Zugriff auf dein Mikrofon, damit du Videos aufnehmen kannst.</string>
>     <string name="PermissionNoCamera">Telegram benötigt Zugriff auf deine Kamera, damit du Bilder und Videos aufnehmen kannst. Bitte aktiviere es in den Einstellungen.</string>
3437a3451,3452
>     <string name="VoipNeedMicPermission">Telegram benötigt für Sprachanrufe Zugriff auf dein Mikrofon.</string>
>     <string name="VoipNeedMicCameraPermission">Telegram benötigt Zugriff auf dein Mikrofon und deine Kamera, damit du Videoanrufe tätigen kannst.</string>
3528a3544
>     <string name="VoipGroupMuteMemberAlertText">Wirklich **%1$s** in diesem Sprachchat stummschalten?</string>
3554a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">un1 hat un2 in den Sprachchat eingeladen</string>
>     <string name="VoipGroupJoinCall">Am Sprachchat teilnehmen</string>
3566a3585
>     <string name="VoipGroupEndedStartNew">Sprachchat beendet. Neuen starten?</string>
3577a3597
>     <string name="VoipGroupStartAs">Sprachchat starten als...</string>
3649a3670
>     <string name="VideoPreviewDesrciption">Das Video deiner Kamera wird mit anderen Teilnehmern des Sprachchats geteilt.</string>
Only in TMessagesProj/src/main/res/values-de: strings_nullgram.xml
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-es/strings.xml ../Tele/TMessagesProj/src/main/res/values-es/strings.xml
542a543
>     <string name="UserRestrictionsDisabled">Esta opción está desactivada para todos los miembros en Permisos de grupo</string>
2140a2142
>     <string name="QRCodePermissionNoCamera">Telegram necesita acceso a tu cámara para que puedas escanear códigos QR.</string>
2150a2153,2155
>     <string name="CancelForward">Cancelar reenvío</string>
>     <string name="SelectOtherChat">Elegir otro chat</string>
>     <string name="CancelForwardMessage">¿Quieres cancelar el reenvío o reenviar los mensajes a un chat diferente?</string>
2384a2390
>     <string name="TerminateSessionInfo">Toca en una sesión para cerrarla.</string>
2500a2507
>     <string name="EnterYourPasscode">Pon tu código</string>
3091a3099
>     <string name="ActionGroupCallJustStarted">Chat de voz iniciado</string>
3092a3101
>     <string name="ActionGroupCallEnded">Chat de voz finalizado (%s)</string>
3263a3273,3276
>     <string name="PermissionStorage">Telegram necesita acceso al almacenamiento para que puedas enviar y guardar fotos, videos, música y otros archivos.</string>
>     <string name="PermissionNoAudio">Telegram necesita acceso a tu micrófono para que puedas enviar mensajes de voz.</string>
>     <string name="PermissionNoAudioVideo">Telegram necesita acceso a tu micrófono para que puedas grabar videos.</string>
>     <string name="PermissionNoCamera">Telegram necesita acceso a la cámara para que puedas tomar fotos y videos. Por favor, actívalo en Ajustes.</string>
3437a3451,3452
>     <string name="VoipNeedMicPermission">Telegram necesita acceso a tu micrófono para que puedas realizar llamadas.</string>
>     <string name="VoipNeedMicCameraPermission">Telegram necesita acceso a tu micrófono y cámara para que puedas hacer videollamadas.</string>
3528a3544
>     <string name="VoipGroupMuteMemberAlertText">¿Quieres silenciar a **%1$s** en este chat de voz?</string>
3554a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">un1 invitó a un2 al chat de voz</string>
>     <string name="VoipGroupJoinCall">Unirme al chat de voz</string>
3566a3585
>     <string name="VoipGroupEndedStartNew">Chat de voz finalizado. ¿Quieres iniciar uno nuevo?</string>
3577a3597
>     <string name="VoipGroupStartAs">Iniciar chat de voz como…</string>
3649a3670
>     <string name="VideoPreviewDesrciption">Se compartirá video desde tu cámara con otros miembros de este chat de voz</string>
Only in TMessagesProj/src/main/res/values-es: strings_nullgram.xml
Only in TMessagesProj/src/main/res: values-fa
Only in TMessagesProj/src/main/res: values-fr
Only in TMessagesProj/src/main/res: values-id
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-it/strings.xml ../Tele/TMessagesProj/src/main/res/values-it/strings.xml
2141a2142
>     <string name="QRCodePermissionNoCamera">Telegram deve accedere alla tua fotocamera affinché tu possa scansionare i codici QR .</string>
2151a2153,2155
>     <string name="CancelForward">Annulla inoltro</string>
>     <string name="SelectOtherChat">Scegli un\'altra chat</string>
>     <string name="CancelForwardMessage">Vuoi annullare l\'inoltro o inviare i messaggi in un\'altra chat?</string>
2385a2390
>     <string name="TerminateSessionInfo">Tocca su una sessione per terminarla.</string>
2501a2507
>     <string name="EnterYourPasscode">Inserisci il tuo codice</string>
3092a3099
>     <string name="ActionGroupCallJustStarted">Chat vocale iniziata</string>
3093a3101
>     <string name="ActionGroupCallEnded">Chat vocale terminata (%s)</string>
3264a3273,3276
>     <string name="PermissionStorage">Telegram deve accedere alla tua memoria per poter inviare e salvare foto, video, musica e altri media.</string>
>     <string name="PermissionNoAudio">Telegram deve accedere al microfono affinché tu possa inviare messaggi vocali.</string>
>     <string name="PermissionNoAudioVideo">Telegram deve accedere al microfono affinché tu possa registrare video.</string>
>     <string name="PermissionNoCamera">Telegram deve accedere alla fotocamera affinché tu possa scattare foto e registrare video. Per favore attivalo nelle Impostazioni.</string>
3438a3451,3452
>     <string name="VoipNeedMicPermission">Telegram deve accedere al microfono affinché tu possa effettuare chiamate.</string>
>     <string name="VoipNeedMicCameraPermission">Telegram deve accedere al tuo microfono e alla tua videocamera affinché tu possa effettuare videochiamate.</string>
3529a3544
>     <string name="VoipGroupMuteMemberAlertText">Sei sicuro di voler silenziare **%1$s** in questa chat vocale?</string>
3555a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">un1 ha invitato un2 nella chat vocale</string>
>     <string name="VoipGroupJoinCall">Unisciti alla chat vocale</string>
3567a3585
>     <string name="VoipGroupEndedStartNew">Chat vocale terminata. Iniziarne una nuova?</string>
3578a3597
>     <string name="VoipGroupStartAs">Avvia la chat vocale come...</string>
3650a3670
>     <string name="VideoPreviewDesrciption">Il video dalla tua fotocamera sarà condiviso con gli altri membri di questa chat vocale.</string>
Only in TMessagesProj/src/main/res/values-it: strings_nullgram.xml
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-ko/strings.xml ../Tele/TMessagesProj/src/main/res/values-ko/strings.xml
542a543
>     <string name="UserRestrictionsDisabled">이 설정은 그룹 권한을 가진 참가자 모두에게서 꺼져 있습니다</string>
2140a2142
>     <string name="QRCodePermissionNoCamera">QR 코드를 스캔하려면 텔레그램에게 카메라 접근 권한이 필요합니다.</string>
2150a2153,2155
>     <string name="CancelForward">전달 취소</string>
>     <string name="SelectOtherChat">다른 대화 선택</string>
>     <string name="CancelForwardMessage">전달을 취소하거나 다른 대화로 전달하겠습니까?</string>
2384a2390
>     <string name="TerminateSessionInfo">세션을 종료하려면 짧게 누르세요.</string>
2500a2507
>     <string name="EnterYourPasscode">암호를 입력하세요</string>
3091a3099
>     <string name="ActionGroupCallJustStarted">음성 대화가 시작되었습니다</string>
3092a3101
>     <string name="ActionGroupCallEnded">음성 대화 종료됨 (%s)</string>
3263a3273,3276
>     <string name="PermissionStorage">사진, 동영상, 음악과 그 밖의 미디어를 보내고 저장하려면 텔레그램에게 저장 공간 접근 권한이 필요합니다.</string>
>     <string name="PermissionNoAudio">음성 메시지를 보내려면 텔레그램에게 마이크 접근 권한을 부여하셔야 합니다.</string>
>     <string name="PermissionNoAudioVideo">동영상을 녹화하려면 텔레그램에게 마이크 접근 권한을 부여하셔야 합니다.</string>
>     <string name="PermissionNoCamera">사진과 동영상을 촬영하려면 텔레그램에게 카메라 접근 권한을 부여하셔야 합니다. 설정에서 권한을 켜 주세요.</string>
3437a3451,3452
>     <string name="VoipNeedMicPermission">전화를 걸려면 텔레그램에게 마이크 접근 권한을 부여하셔야 합니다.</string>
>     <string name="VoipNeedMicCameraPermission">텔레그램이 영상 통화를 하기 위하여 기기의 마이크와 카메라에 접근이 필요합니다.</string>
3528a3544
>     <string name="VoipGroupMuteMemberAlertText">정말 **%1$s**님을 음성 대화에서 음소거 하겠습니까?</string>
3554a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">음성 대화에 un1님이 un2님을 초대했습니다</string>
>     <string name="VoipGroupJoinCall">음성 대화 참여</string>
3566a3585
>     <string name="VoipGroupEndedStartNew">음성 대화가 종료되었습니다. 새로운 음성 대화를 시작하겠습니까?</string>
3577a3597
>     <string name="VoipGroupStartAs">다음으로 음성 대화를 시작...</string>
3649a3670
>     <string name="VideoPreviewDesrciption">음성 대화에 참여중인 다른 참가자들에게 내 카메라 영상이 공유 됩니다</string>
Only in TMessagesProj/src/main/res/values-ko: strings_nullgram.xml
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-nl/strings.xml ../Tele/TMessagesProj/src/main/res/values-nl/strings.xml
542a543
>     <string name="UserRestrictionsDisabled">Deze optie is voor alle leden uitgeschakeld via de groepsrechten</string>
2140a2142
>     <string name="QRCodePermissionNoCamera">Telegram heeft toegang tot je camera nodig om QR-codes te scannen.</string>
2150a2153,2155
>     <string name="CancelForward">Cancel Forward</string>
>     <string name="SelectOtherChat">Select another chat</string>
>     <string name="CancelForwardMessage">Do you want to cancel forwarding or to forward messages to a different chat?</string>
2384a2390
>     <string name="TerminateSessionInfo">Tik op een sessie om deze te beëindigen.</string>
2500a2507
>     <string name="EnterYourPasscode">Toegangscode invoeren</string>
3091a3099
>     <string name="ActionGroupCallJustStarted">Voice chat started</string>
3092a3101
>     <string name="ActionGroupCallEnded">Spraakchat beëindigd (%s)</string>
3263a3273,3276
>     <string name="PermissionStorage">Telegram heeft toegang tot je opslaggeheugen nodig zodat je foto\'s, video\'s, muziek en andere media kunt opslaan en versturen.</string>
>     <string name="PermissionNoAudio">Telegram heeft toegang tot je microfoon nodig om spraakberichten te kunnen verzenden.</string>
>     <string name="PermissionNoAudioVideo">Telegram heeft toegang tot je microfoon nodig om video op te nemen.</string>
>     <string name="PermissionNoCamera">Telegram heeft toegang tot je camera nodig zodat je foto\'s en video\'s kunt maken. Schakel dit in via instellingen.</string>
3437a3451,3452
>     <string name="VoipNeedMicPermission">Telegram heeft toegang tot je microfoon nodig zodat je kunt bellen.</string>
>     <string name="VoipNeedMicCameraPermission">Telegram heeft toegang nodig tot je microfoon en camera, zodat je video-oproepen kunt doen.</string>
3528a3544
>     <string name="VoipGroupMuteMemberAlertText">Weet je zeker dat je **%1$s** wilt dempen in deze spraakchat?</string>
3554a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">un1 nodigde un2 uit voor de spraakchat</string>
>     <string name="VoipGroupJoinCall">Deelnemen aan spraakchat</string>
3566a3585
>     <string name="VoipGroupEndedStartNew">Spraakchat beëindigt. Een nieuwe starten?</string>
3577a3597
>     <string name="VoipGroupStartAs">Start Voice Chat as...</string>
3649a3670
>     <string name="VideoPreviewDesrciption">Video from your camera will be shared with other members of this voice chat</string>
Only in TMessagesProj/src/main/res/values-nl: strings_nullgram.xml
Only in TMessagesProj/src/main/res: values-pt
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-pt-rBR/strings.xml ../Tele/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
542a543
>     <string name="UserRestrictionsDisabled">Esta opção está desativada para todos os membros nas Permissões do Grupo</string>
2140a2142
>     <string name="QRCodePermissionNoCamera">O Telegram precisa de acesso à sua câmera para que você possa escanear códigos QR.</string>
2150a2153,2155
>     <string name="CancelForward">Cancelar Encaminhamento</string>
>     <string name="SelectOtherChat">Selecionar outro chat</string>
>     <string name="CancelForwardMessage">Deseja cancelar o encaminhamento ou enviar as mensagens para um chat diferente?</string>
2384a2390
>     <string name="TerminateSessionInfo">Toque em uma sessão para terminar.</string>
2500a2507
>     <string name="EnterYourPasscode">Digite a sua senha.</string>
3091a3099
>     <string name="ActionGroupCallJustStarted">Chat de voz iniciado</string>
3092a3101
>     <string name="ActionGroupCallEnded">Chat de voz encerrado (%s)</string>
3263a3273,3276
>     <string name="PermissionStorage">O Telegram precisa de acesso ao armazenamento para que você possa enviar e salvar fotos, vídeos, músicas e outras mídias.</string>
>     <string name="PermissionNoAudio">O Telegram precisa de acesso ao microfone para que você possa enviar mensagens de voz.</string>
>     <string name="PermissionNoAudioVideo">Telegram precisa acessar seu microfone para que você possa gravar vídeos.</string>
>     <string name="PermissionNoCamera">O Telegram precisa de acesso à câmera para que você possa tirar fotos e vídeos. Por favor, ative a permissão nas Configurações.</string>
3437a3451,3452
>     <string name="VoipNeedMicPermission">O Telegram precisa acessar seu microfone para poder fazer chamadas.</string>
>     <string name="VoipNeedMicCameraPermission">O Telegram precisa de acesso ao seu microfone e à câmera para que você possa fazer videochamadas.</string>
3528a3544
>     <string name="VoipGroupMuteMemberAlertText">Deseja mesmo silenciar **%1$s** neste chat de voz?</string>
3554a3571,3572
>     <string name="VoipGroupInvitedToVoiceChat">un1 convidou un2 para o chat de voz</string>
>     <string name="VoipGroupJoinCall">Entrar no chat de voz</string>
3566a3585
>     <string name="VoipGroupEndedStartNew">Chat de voz encerrado. Começar um novo?</string>
3577a3597
>     <string name="VoipGroupStartAs">Iniciar Chat de Voz como...</string>
3649a3670
>     <string name="VideoPreviewDesrciption">O vídeo da sua câmera será compartilhado com outros membros deste chat de voz</string>
Only in TMessagesProj/src/main/res: values-ru
Only in TMessagesProj/src/main/res: values-tr
Only in TMessagesProj/src/main/res: values-uz
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/values-v21/styles.xml ../Tele/TMessagesProj/src/main/res/values-v21/styles.xml
22a23
>         <item name="android:forceDarkAllowed">false</item>
47a49,50
>         <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
>         <item name="android:forceDarkAllowed">false</item>
57a61
>         <item name="android:forceDarkAllowed">false</item>
87a92,96
>     <!-- TextView -->
> 
>     <style name="MyTextViewStyle" parent="android:Widget.Material.Light.TextView">
>         <item name="android:hyphenationFrequency">none</item>
>     </style>
Only in TMessagesProj/src/main/res: values-v23
Only in TMessagesProj/src/main/res: values-v29
Only in ../Tele/TMessagesProj/src/main/res/values-v31: values.xml
Only in TMessagesProj/src/main/res: values-zh
Only in TMessagesProj/src/main/res: values-zh-rTW
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/xml/chats_widget_info.xml ../Tele/TMessagesProj/src/main/res/xml/chats_widget_info.xml
7a8,9
>     android:targetCellWidth="4"
>     android:targetCellHeight="2"
14a17,18
>     android:previewLayout="@layout/shortcut_widget_layout_preview"
>     android:widgetFeatures="reconfigurable|configuration_optional"
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/xml/contacts_widget_info.xml ../Tele/TMessagesProj/src/main/res/xml/contacts_widget_info.xml
6a7,9
>     android:maxResizeHeight="110dp"
>     android:targetCellWidth="2"
>     android:targetCellHeight="2"
13a17,18
>     android:previewLayout="@layout/contacts_widget_layout_preview"
>     android:widgetFeatures="reconfigurable|configuration_optional"
diff --color --ignore-all-space --ignore-blank-lines --ignore-tab-expansion --ignore-trailing-space '--ignore-matching-lines=(import.*;)' --recursive TMessagesProj/src/main/res/xml/provider_paths.xml ../Tele/TMessagesProj/src/main/res/xml/provider_paths.xml
7d6
<     <cache-path name="cache" path="/" />
Only in TMessagesProj/src: play
